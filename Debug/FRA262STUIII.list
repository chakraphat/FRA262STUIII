
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000706c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007834  08007834  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800783c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200000b8  080078f4  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080078f4  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   001652e0  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ff  00000000  00000000  001853c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00051abc  00000000  00000000  00188ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  001da588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008730  00000000  00000000  001db1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf45  00000000  00000000  001e3910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    003da436  00000000  00000000  0020f855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  005e9c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  005e9cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071f4 	.word	0x080071f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	080071f4 	.word	0x080071f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b974 	b.w	8000cfc <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	4604      	mov	r4, r0
 8000a34:	468e      	mov	lr, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14d      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	d969      	bls.n	8000b14 <__udivmoddi4+0xe8>
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	b152      	cbz	r2, 8000a5c <__udivmoddi4+0x30>
 8000a46:	fa01 f302 	lsl.w	r3, r1, r2
 8000a4a:	f1c2 0120 	rsb	r1, r2, #32
 8000a4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a56:	ea41 0e03 	orr.w	lr, r1, r3
 8000a5a:	4094      	lsls	r4, r2
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	0c21      	lsrs	r1, r4, #16
 8000a62:	fbbe f6f8 	udiv	r6, lr, r8
 8000a66:	fa1f f78c 	uxth.w	r7, ip
 8000a6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a72:	fb06 f107 	mul.w	r1, r6, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a82:	f080 811f 	bcs.w	8000cc4 <__udivmoddi4+0x298>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 811c 	bls.w	8000cc4 <__udivmoddi4+0x298>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a98:	fb08 3310 	mls	r3, r8, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 f707 	mul.w	r7, r0, r7
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x92>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab0:	f080 810a 	bcs.w	8000cc8 <__udivmoddi4+0x29c>
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	f240 8107 	bls.w	8000cc8 <__udivmoddi4+0x29c>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	1be4      	subs	r4, r4, r7
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	b11d      	cbz	r5, 8000ad0 <__udivmoddi4+0xa4>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xc2>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	f000 80ef 	beq.w	8000cbe <__udivmoddi4+0x292>
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f683 	clz	r6, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d14a      	bne.n	8000b8c <__udivmoddi4+0x160>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd4>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80f9 	bhi.w	8000cf2 <__udivmoddi4+0x2c6>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	469e      	mov	lr, r3
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa4>
 8000b0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xec>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 8092 	bne.w	8000c46 <__udivmoddi4+0x21a>
 8000b22:	eba1 010c 	sub.w	r1, r1, ip
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2601      	movs	r6, #1
 8000b30:	0c20      	lsrs	r0, r4, #16
 8000b32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b36:	fb07 1113 	mls	r1, r7, r3, r1
 8000b3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b3e:	fb0e f003 	mul.w	r0, lr, r3
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x12c>
 8000b46:	eb1c 0101 	adds.w	r1, ip, r1
 8000b4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x12a>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2c0>
 8000b56:	4643      	mov	r3, r8
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b60:	fb07 1110 	mls	r1, r7, r0, r1
 8000b64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x156>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x154>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b80:	4608      	mov	r0, r1
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b8a:	e79c      	b.n	8000ac6 <__udivmoddi4+0x9a>
 8000b8c:	f1c6 0720 	rsb	r7, r6, #32
 8000b90:	40b3      	lsls	r3, r6
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	40f9      	lsrs	r1, r7
 8000ba6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000baa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bb2:	0c20      	lsrs	r0, r4, #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bc4:	4288      	cmp	r0, r1
 8000bc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b8>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1a09      	subs	r1, r1, r0
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bec:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	458e      	cmp	lr, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1e2>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c06:	458e      	cmp	lr, r1
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c12:	fba0 9402 	umull	r9, r4, r0, r2
 8000c16:	eba1 010e 	sub.w	r1, r1, lr
 8000c1a:	42a1      	cmp	r1, r4
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46a6      	mov	lr, r4
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x2a0>
 8000c24:	b15d      	cbz	r5, 8000c3e <__udivmoddi4+0x212>
 8000c26:	ebb3 0208 	subs.w	r2, r3, r8
 8000c2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c32:	fa22 f306 	lsr.w	r3, r2, r6
 8000c36:	40f1      	lsrs	r1, r6
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	40d8      	lsrs	r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa21 f303 	lsr.w	r3, r1, r3
 8000c54:	4091      	lsls	r1, r2
 8000c56:	4301      	orrs	r1, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c64:	fb07 3610 	mls	r6, r7, r0, r3
 8000c68:	0c0b      	lsrs	r3, r1, #16
 8000c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c72:	429e      	cmp	r6, r3
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x260>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c84:	429e      	cmp	r6, r3
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	b289      	uxth	r1, r1
 8000c90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c94:	fb07 3316 	mls	r3, r7, r6, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x28a>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000cb2:	3e02      	subs	r6, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0x104>
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e705      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e3      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6f8      	b.n	8000abe <__udivmoddi4+0x92>
 8000ccc:	454b      	cmp	r3, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f8>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f8>
 8000cdc:	4646      	mov	r6, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x28a>
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1e2>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x260>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b8>
 8000cec:	3b02      	subs	r3, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x12c>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e709      	b.n	8000b0a <__udivmoddi4+0xde>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x156>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>:
    * \code
    * quaternion.fromRotationMatrix((Matrix3f() << axis0, axis1, axis2).finished());
    * \endcode
    */
  EIGEN_DEVICE_FUNC
  inline XprType& finished() {
 8000d00:	b508      	push	{r3, lr}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d02:	68c2      	ldr	r2, [r0, #12]
 8000d04:	6843      	ldr	r3, [r0, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d103      	bne.n	8000d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x14>
 8000d0c:	6883      	ldr	r3, [r0, #8]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d100      	bne.n	8000d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x14>
           && m_col == m_xpr.cols()
           && "Too few coefficients passed to comma initializer (operator<<)");
      return m_xpr;
  }
 8000d12:	bd08      	pop	{r3, pc}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x20>)
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x24>)
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x28>)
 8000d1a:	217a      	movs	r1, #122	; 0x7a
 8000d1c:	f005 fa46 	bl	80061ac <__assert_func>
 8000d20:	0800720c 	.word	0x0800720c
 8000d24:	080072ac 	.word	0x080072ac
 8000d28:	08007314 	.word	0x08007314

08000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>:
  inline XprType& finished() {
 8000d2c:	b508      	push	{r3, lr}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d2e:	68c2      	ldr	r2, [r0, #12]
 8000d30:	6843      	ldr	r3, [r0, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d103      	bne.n	8000d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x14>
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d100      	bne.n	8000d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x14>
  }
 8000d3e:	bd08      	pop	{r3, pc}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x20>)
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x24>)
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x28>)
 8000d46:	217a      	movs	r1, #122	; 0x7a
 8000d48:	f005 fa30 	bl	80061ac <__assert_func>
 8000d4c:	0800720c 	.word	0x0800720c
 8000d50:	0800735c 	.word	0x0800735c
 8000d54:	08007314 	.word	0x08007314

08000d58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	2300      	movs	r3, #0
{
 8000d5c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8000d62:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d6a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4926      	ldr	r1, [pc, #152]	; (8000e08 <_Z18SystemClock_Configv+0xb0>)
 8000d70:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <_Z18SystemClock_Configv+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000d7e:	6408      	str	r0, [r1, #64]	; 0x40
 8000d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d82:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000d86:	9100      	str	r1, [sp, #0]
 8000d88:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	6813      	ldr	r3, [r2, #0]
 8000d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9a:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2002      	movs	r0, #2
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000daa:	2008      	movs	r0, #8
 8000dac:	2164      	movs	r1, #100	; 0x64
 8000dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000db2:	2002      	movs	r0, #2
 8000db4:	2104      	movs	r1, #4
 8000db6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dba:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f003 ff0c 	bl	8004be0 <HAL_RCC_OscConfig>
 8000dc8:	b108      	cbz	r0, 8000dce <_Z18SystemClock_Configv+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <_Z18SystemClock_Configv+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000df8 <_Z18SystemClock_Configv+0xa0>
 8000dd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000dd6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000e00 <_Z18SystemClock_Configv+0xa8>
 8000dda:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ddc:	2103      	movs	r1, #3
 8000dde:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de6:	f004 f913 	bl	8005010 <HAL_RCC_ClockConfig>
 8000dea:	b108      	cbz	r0, 8000df0 <_Z18SystemClock_Configv+0x98>
 8000dec:	b672      	cpsid	i
  while (1)
 8000dee:	e7fe      	b.n	8000dee <_Z18SystemClock_Configv+0x96>
}
 8000df0:	b015      	add	sp, #84	; 0x54
 8000df2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000df6:	bf00      	nop
 8000df8:	0000000f 	.word	0x0000000f
 8000dfc:	00000002 	.word	0x00000002
 8000e00:	00000000 	.word	0x00000000
 8000e04:	00001000 	.word	0x00001000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <_Z10Trajectoryv>:
void Trajectory(){
 8000e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{return _micros + htim11.Instance->CNT;}
 8000e14:	4bb6      	ldr	r3, [pc, #728]	; (80010f0 <_Z10Trajectoryv+0x2e0>)
 8000e16:	49b7      	ldr	r1, [pc, #732]	; (80010f4 <_Z10Trajectoryv+0x2e4>)
 8000e18:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampTraject >= 1000){
 8000e1a:	4cb7      	ldr	r4, [pc, #732]	; (80010f8 <_Z10Trajectoryv+0x2e8>)
{return _micros + htim11.Instance->CNT;}
 8000e1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampTraject >= 1000){
 8000e1e:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 8000e20:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampTraject >= 1000){
 8000e24:	1a1b      	subs	r3, r3, r0
 8000e26:	eb60 0000 	sbc.w	r0, r0, r0
 8000e2a:	189b      	adds	r3, r3, r2
 8000e2c:	eb41 0100 	adc.w	r1, r1, r0
 8000e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e34:	f171 0300 	sbcs.w	r3, r1, #0
void Trajectory(){
 8000e38:	ed2d 8b08 	vpush	{d8-d11}
	if(micros() - TimeStampTraject >= 1000){
 8000e3c:	d375      	bcc.n	8000f2a <_Z10Trajectoryv+0x11a>
		if (Finalposition/Velocity > Velocity/Acceleration){
 8000e3e:	4baf      	ldr	r3, [pc, #700]	; (80010fc <_Z10Trajectoryv+0x2ec>)
 8000e40:	49af      	ldr	r1, [pc, #700]	; (8001100 <_Z10Trajectoryv+0x2f0>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	4baf      	ldr	r3, [pc, #700]	; (8001104 <_Z10Trajectoryv+0x2f4>)
 8000e48:	ed91 8a00 	vldr	s16, [r1]
 8000e4c:	ed93 aa00 	vldr	s20, [r3]
{return _micros + htim11.Instance->CNT;}
 8000e50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		if (Finalposition/Velocity > Velocity/Acceleration){
 8000e52:	eec7 7a08 	vdiv.f32	s15, s14, s16
{return _micros + htim11.Instance->CNT;}
 8000e56:	189b      	adds	r3, r3, r2
		TimeStampTraject = micros();
 8000e58:	6023      	str	r3, [r4, #0]
		if (Finalposition/Velocity > Velocity/Acceleration){
 8000e5a:	eec8 8a0a 	vdiv.f32	s17, s16, s20
 8000e5e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	dc64      	bgt.n	8000f32 <_Z10Trajectoryv+0x122>
			Velocity = sqrt(Finalposition/2);
 8000e68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
			Tb = sqrt(2*Finalposition);
 8000e70:	ee77 6a07 	vadd.f32	s13, s14, s14
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000e74:	eeb1 8ae7 	vsqrt.f32	s16, s15
 8000e78:	eef1 8ae6 	vsqrt.f32	s17, s13
			Velocity = sqrt(Finalposition/2);
 8000e7c:	ed81 8a00 	vstr	s16, [r1]
		timeFinal = (4*Velocity) + ((Finalposition-(2*Velocity*Velocity))/Velocity);
 8000e80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e84:	eef0 5a47 	vmov.f32	s11, s14
 8000e88:	eee7 5ae6 	vfms.f32	s11, s15, s13
		if (TimeinS < Tb){
 8000e8c:	4e9e      	ldr	r6, [pc, #632]	; (8001108 <_Z10Trajectoryv+0x2f8>)
 8000e8e:	4a9f      	ldr	r2, [pc, #636]	; (800110c <_Z10Trajectoryv+0x2fc>)
 8000e90:	ed96 9a00 	vldr	s18, [r6]
		timeFinal = (4*Velocity) + ((Finalposition-(2*Velocity*Velocity))/Velocity);
 8000e94:	4b9e      	ldr	r3, [pc, #632]	; (8001110 <_Z10Trajectoryv+0x300>)
 8000e96:	edc2 8a00 	vstr	s17, [r2]
 8000e9a:	eec5 7a88 	vdiv.f32	s15, s11, s16
 8000e9e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8000ea2:	eee8 7a06 	vfma.f32	s15, s16, s12
		if (TimeinS < Tb){
 8000ea6:	eeb4 9ae8 	vcmpe.f32	s18, s17
 8000eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		timeFinal = (4*Velocity) + ((Finalposition-(2*Velocity*Velocity))/Velocity);
 8000eae:	edc3 7a00 	vstr	s15, [r3]
		if (TimeinS < Tb){
 8000eb2:	d541      	bpl.n	8000f38 <_Z10Trajectoryv+0x128>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8000eb4:	ee19 0a10 	vmov	r0, s18
 8000eb8:	f7ff fc70 	bl	800079c <__aeabi_f2d>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	460d      	mov	r5, r1
 8000ec0:	ee1a 0a10 	vmov	r0, s20
 8000ec4:	f7ff fc6a 	bl	800079c <__aeabi_f2d>
 8000ec8:	4622      	mov	r2, r4
 8000eca:	462b      	mov	r3, r5
 8000ecc:	f7ff f9d8 	bl	8000280 <__aeabi_dmul>
 8000ed0:	4b90      	ldr	r3, [pc, #576]	; (8001114 <_Z10Trajectoryv+0x304>)
 8000ed2:	4f91      	ldr	r7, [pc, #580]	; (8001118 <_Z10Trajectoryv+0x308>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f7ff f9d3 	bl	8000280 <__aeabi_dmul>
 8000eda:	4622      	mov	r2, r4
 8000edc:	462b      	mov	r3, r5
 8000ede:	f7ff f9cf 	bl	8000280 <__aeabi_dmul>
 8000ee2:	4b8e      	ldr	r3, [pc, #568]	; (800111c <_Z10Trajectoryv+0x30c>)
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4689      	mov	r9, r1
 8000eea:	f7ff fc57 	bl	800079c <__aeabi_f2d>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	4649      	mov	r1, r9
 8000ef6:	f7ff faf3 	bl	80004e0 <__adddf3>
 8000efa:	f7ff fd2f 	bl	800095c <__aeabi_d2f>
			OutVelocity = Acceleration*TimeinS;
 8000efe:	ee2a 9a09 	vmul.f32	s18, s20, s18
 8000f02:	4b87      	ldr	r3, [pc, #540]	; (8001120 <_Z10Trajectoryv+0x310>)
			OutAcceleration = Acceleration;
 8000f04:	4a87      	ldr	r2, [pc, #540]	; (8001124 <_Z10Trajectoryv+0x314>)
			OutVelocity = Acceleration*TimeinS;
 8000f06:	ed83 9a00 	vstr	s18, [r3]
			ch = 1;
 8000f0a:	4b87      	ldr	r3, [pc, #540]	; (8001128 <_Z10Trajectoryv+0x318>)
			OutAcceleration = Acceleration;
 8000f0c:	ed82 aa00 	vstr	s20, [r2]
			ch = 1;
 8000f10:	2201      	movs	r2, #1
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8000f12:	6038      	str	r0, [r7, #0]
			ch = 1;
 8000f14:	701a      	strb	r2, [r3, #0]
		TimeinS = TimeinS + Dt;
 8000f16:	a374      	add	r3, pc, #464	; (adr r3, 80010e8 <_Z10Trajectoryv+0x2d8>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f7ff fade 	bl	80004e0 <__adddf3>
 8000f24:	f7ff fd1a 	bl	800095c <__aeabi_d2f>
 8000f28:	6030      	str	r0, [r6, #0]
}
 8000f2a:	ecbd 8b08 	vpop	{d8-d11}
 8000f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		timeFinal = (4*Velocity) + ((Finalposition-(2*Velocity*Velocity))/Velocity);
 8000f32:	ee68 7a08 	vmul.f32	s15, s16, s16
 8000f36:	e7a3      	b.n	8000e80 <_Z10Trajectoryv+0x70>
		else if(TimeinS < (timeFinal-Tb)){
 8000f38:	ee37 6ae8 	vsub.f32	s12, s15, s17
 8000f3c:	eeb4 9ac6 	vcmpe.f32	s18, s12
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d419      	bmi.n	8000f7a <_Z10Trajectoryv+0x16a>
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8000f46:	eef4 7ac9 	vcmpe.f32	s15, s18
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	da5a      	bge.n	8001006 <_Z10Trajectoryv+0x1f6>
			OutPosition = Finalposition+Currentpos;
 8000f50:	4b72      	ldr	r3, [pc, #456]	; (800111c <_Z10Trajectoryv+0x30c>)
 8000f52:	4871      	ldr	r0, [pc, #452]	; (8001118 <_Z10Trajectoryv+0x308>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
			ch = 4;
 8000f58:	4973      	ldr	r1, [pc, #460]	; (8001128 <_Z10Trajectoryv+0x318>)
			OutAcceleration = 0;
 8000f5a:	4b72      	ldr	r3, [pc, #456]	; (8001124 <_Z10Trajectoryv+0x314>)
			OutPosition = Finalposition+Currentpos;
 8000f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
			OutAcceleration = 0;
 8000f60:	2200      	movs	r2, #0
			ch = 4;
 8000f62:	2404      	movs	r4, #4
			OutPosition = Finalposition+Currentpos;
 8000f64:	ed80 7a00 	vstr	s14, [r0]
			ch = 4;
 8000f68:	700c      	strb	r4, [r1, #0]
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8000f6a:	ee19 0a10 	vmov	r0, s18
			OutAcceleration = 0;
 8000f6e:	601a      	str	r2, [r3, #0]
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8000f70:	f7ff fc14 	bl	800079c <__aeabi_f2d>
 8000f74:	4604      	mov	r4, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	e7cd      	b.n	8000f16 <_Z10Trajectoryv+0x106>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 8000f7a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8000f7e:	ee79 8a68 	vsub.f32	s17, s18, s17
 8000f82:	ee17 0a90 	vmov	r0, s15
 8000f86:	f7ff fc09 	bl	800079c <__aeabi_f2d>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	ee1a 0a10 	vmov	r0, s20
 8000f90:	460d      	mov	r5, r1
 8000f92:	f7ff fc03 	bl	800079c <__aeabi_f2d>
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <_Z10Trajectoryv+0x304>)
 8000f98:	4f5f      	ldr	r7, [pc, #380]	; (8001118 <_Z10Trajectoryv+0x308>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f7ff f970 	bl	8000280 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	f7ff f96a 	bl	8000280 <__aeabi_dmul>
 8000fac:	4b5b      	ldr	r3, [pc, #364]	; (800111c <_Z10Trajectoryv+0x30c>)
 8000fae:	4604      	mov	r4, r0
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	f7ff fbf2 	bl	800079c <__aeabi_f2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fa8e 	bl	80004e0 <__adddf3>
 8000fc4:	ee68 7a88 	vmul.f32	s15, s17, s16
 8000fc8:	4604      	mov	r4, r0
 8000fca:	ee17 0a90 	vmov	r0, s15
 8000fce:	460d      	mov	r5, r1
 8000fd0:	f7ff fbe4 	bl	800079c <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4620      	mov	r0, r4
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f7ff fa80 	bl	80004e0 <__adddf3>
 8000fe0:	f7ff fcbc 	bl	800095c <__aeabi_d2f>
			OutVelocity = Velocity;
 8000fe4:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <_Z10Trajectoryv+0x310>)
			OutAcceleration = 0;
 8000fe6:	494f      	ldr	r1, [pc, #316]	; (8001124 <_Z10Trajectoryv+0x314>)
			OutVelocity = Velocity;
 8000fe8:	ed83 8a00 	vstr	s16, [r3]
			ch = 2;
 8000fec:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <_Z10Trajectoryv+0x318>)
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 8000fee:	6038      	str	r0, [r7, #0]
			ch = 2;
 8000ff0:	2202      	movs	r2, #2
			OutAcceleration = 0;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	6008      	str	r0, [r1, #0]
			ch = 2;
 8000ff6:	701a      	strb	r2, [r3, #0]
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8000ff8:	ee19 0a10 	vmov	r0, s18
 8000ffc:	f7ff fbce 	bl	800079c <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	e787      	b.n	8000f16 <_Z10Trajectoryv+0x106>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8001006:	ee39 ba28 	vadd.f32	s22, s18, s17
 800100a:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800100e:	ee3b ba67 	vsub.f32	s22, s22, s15
 8001012:	eee8 7ae6 	vfms.f32	s15, s17, s13
 8001016:	4f40      	ldr	r7, [pc, #256]	; (8001118 <_Z10Trajectoryv+0x308>)
 8001018:	ee76 aa49 	vsub.f32	s21, s12, s18
 800101c:	ee17 0a10 	vmov	r0, s14
 8001020:	eef0 9a67 	vmov.f32	s19, s15
 8001024:	f7ff fbba 	bl	800079c <__aeabi_f2d>
 8001028:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 800102c:	4604      	mov	r4, r0
 800102e:	ee17 0a90 	vmov	r0, s15
 8001032:	460d      	mov	r5, r1
 8001034:	f7ff fbb2 	bl	800079c <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4620      	mov	r0, r4
 800103e:	4629      	mov	r1, r5
 8001040:	f7ff fa4e 	bl	80004e0 <__adddf3>
 8001044:	4604      	mov	r4, r0
 8001046:	ee1a 0a10 	vmov	r0, s20
 800104a:	460d      	mov	r5, r1
 800104c:	f7ff fba6 	bl	800079c <__aeabi_f2d>
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <_Z10Trajectoryv+0x304>)
 8001052:	2200      	movs	r2, #0
 8001054:	f7ff f914 	bl	8000280 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f90e 	bl	8000280 <__aeabi_dmul>
 8001064:	ee69 7a88 	vmul.f32	s15, s19, s16
 8001068:	4604      	mov	r4, r0
 800106a:	ee17 0a90 	vmov	r0, s15
 800106e:	460d      	mov	r5, r1
 8001070:	f7ff fb94 	bl	800079c <__aeabi_f2d>
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <_Z10Trajectoryv+0x30c>)
 8001076:	4680      	mov	r8, r0
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	4689      	mov	r9, r1
 800107c:	f7ff fb8e 	bl	800079c <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4640      	mov	r0, r8
 8001086:	4649      	mov	r1, r9
 8001088:	f7ff fa2a 	bl	80004e0 <__adddf3>
 800108c:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8001090:	4680      	mov	r8, r0
 8001092:	ee17 0a90 	vmov	r0, s15
 8001096:	4689      	mov	r9, r1
 8001098:	f7ff fb80 	bl	800079c <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4640      	mov	r0, r8
 80010a2:	4649      	mov	r1, r9
 80010a4:	f7ff fa1c 	bl	80004e0 <__adddf3>
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80010a8:	eeaa 8a2a 	vfma.f32	s16, s20, s21
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fa14 	bl	80004e0 <__adddf3>
 80010b8:	f7ff fc50 	bl	800095c <__aeabi_d2f>
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <_Z10Trajectoryv+0x310>)
			OutAcceleration = -Acceleration;
 80010be:	4919      	ldr	r1, [pc, #100]	; (8001124 <_Z10Trajectoryv+0x314>)
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80010c0:	ed83 8a00 	vstr	s16, [r3]
			ch = 3;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <_Z10Trajectoryv+0x318>)
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 80010c6:	6038      	str	r0, [r7, #0]
			ch = 3;
 80010c8:	2203      	movs	r2, #3
			OutAcceleration = -Acceleration;
 80010ca:	eeb1 aa4a 	vneg.f32	s20, s20
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 80010ce:	ee19 0a10 	vmov	r0, s18
			OutAcceleration = -Acceleration;
 80010d2:	ed81 aa00 	vstr	s20, [r1]
			ch = 3;
 80010d6:	701a      	strb	r2, [r3, #0]
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 80010d8:	f7ff fb60 	bl	800079c <__aeabi_f2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
			ch = 3;
 80010e0:	e719      	b.n	8000f16 <_Z10Trajectoryv+0x106>
 80010e2:	bf00      	nop
 80010e4:	f3af 8000 	nop.w
 80010e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010ec:	3f50624d 	.word	0x3f50624d
 80010f0:	200003fc 	.word	0x200003fc
 80010f4:	200002f0 	.word	0x200002f0
 80010f8:	200002c0 	.word	0x200002c0
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000028 	.word	0x20000028
 8001104:	20000000 	.word	0x20000000
 8001108:	200002c8 	.word	0x200002c8
 800110c:	200002ac 	.word	0x200002ac
 8001110:	20000530 	.word	0x20000530
 8001114:	3fe00000 	.word	0x3fe00000
 8001118:	20000230 	.word	0x20000230
 800111c:	20000118 	.word	0x20000118
 8001120:	20000238 	.word	0x20000238
 8001124:	2000022c 	.word	0x2000022c
 8001128:	2000033c 	.word	0x2000033c
 800112c:	00000000 	.word	0x00000000

08001130 <_Z10Unwrappingv>:
void Unwrapping(){
 8001130:	b538      	push	{r3, r4, r5, lr}
{return _micros + htim11.Instance->CNT;}
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <_Z10Unwrappingv+0xd0>)
 8001134:	4933      	ldr	r1, [pc, #204]	; (8001204 <_Z10Unwrappingv+0xd4>)
 8001136:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeUnwrap >= 1000){
 8001138:	4c33      	ldr	r4, [pc, #204]	; (8001208 <_Z10Unwrappingv+0xd8>)
{return _micros + htim11.Instance->CNT;}
 800113a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeUnwrap >= 1000){
 800113c:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 800113e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeUnwrap >= 1000){
 8001142:	1a1b      	subs	r3, r3, r0
 8001144:	eb60 0000 	sbc.w	r0, r0, r0
 8001148:	189b      	adds	r3, r3, r2
 800114a:	eb41 0100 	adc.w	r1, r1, r0
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001152:	f171 0300 	sbcs.w	r3, r1, #0
 8001156:	d337      	bcc.n	80011c8 <_Z10Unwrappingv+0x98>
		Pn=BinPosXI*0.006136;
 8001158:	492c      	ldr	r1, [pc, #176]	; (800120c <_Z10Unwrappingv+0xdc>)
{return _micros + htim11.Instance->CNT;}
 800115a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		Pn=BinPosXI*0.006136;
 800115c:	8808      	ldrh	r0, [r1, #0]
{return _micros + htim11.Instance->CNT;}
 800115e:	189b      	adds	r3, r3, r2
		TimeUnwrap = micros();
 8001160:	6023      	str	r3, [r4, #0]
		Pn=BinPosXI*0.006136;
 8001162:	f7ff fb09 	bl	8000778 <__aeabi_i2d>
 8001166:	a324      	add	r3, pc, #144	; (adr r3, 80011f8 <_Z10Unwrappingv+0xc8>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff f888 	bl	8000280 <__aeabi_dmul>
 8001170:	f7ff fbf4 	bl	800095c <__aeabi_d2f>
		if(Pn-P_n <= -1*e){
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <_Z10Unwrappingv+0xe0>)
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <_Z10Unwrappingv+0xe4>)
 8001178:	ed92 7a00 	vldr	s14, [r2]
 800117c:	edd3 6a00 	vldr	s13, [r3]
		Pn=BinPosXI*0.006136;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <_Z10Unwrappingv+0xe8>)
 8001182:	ee07 0a90 	vmov	s15, r0
		if(Pn-P_n <= -1*e){
 8001186:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800118a:	eeb1 6a66 	vneg.f32	s12, s13
 800118e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Pn=BinPosXI*0.006136;
 8001196:	6018      	str	r0, [r3, #0]
		if(Pn-P_n <= -1*e){
 8001198:	d817      	bhi.n	80011ca <_Z10Unwrappingv+0x9a>
			P0=P_0+P_max;
 800119a:	4920      	ldr	r1, [pc, #128]	; (800121c <_Z10Unwrappingv+0xec>)
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <_Z10Unwrappingv+0xf0>)
 800119e:	edd1 6a00 	vldr	s13, [r1]
 80011a2:	ed93 7a00 	vldr	s14, [r3]
 80011a6:	491f      	ldr	r1, [pc, #124]	; (8001224 <_Z10Unwrappingv+0xf4>)
 80011a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80011ac:	ed81 7a00 	vstr	s14, [r1]
		OutUnwrap=Pn+P0;
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <_Z10Unwrappingv+0xf8>)
		CurrentEn=BinPosXI*0.006136;
 80011b2:	491e      	ldr	r1, [pc, #120]	; (800122c <_Z10Unwrappingv+0xfc>)
		P_n=Pn;
 80011b4:	edc2 7a00 	vstr	s15, [r2]
		OutUnwrap=Pn+P0;
 80011b8:	ee77 6a87 	vadd.f32	s13, s15, s14
		CurrentEn=BinPosXI*0.006136;
 80011bc:	edc1 7a00 	vstr	s15, [r1]
		OutUnwrap=Pn+P0;
 80011c0:	edc0 6a00 	vstr	s13, [r0]
		P_0=P0;
 80011c4:	ed83 7a00 	vstr	s14, [r3]
}
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
		else if(Pn-P_n >= e){
 80011ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			P0=P_0-P_max;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <_Z10Unwrappingv+0xf0>)
		else if(Pn-P_n >= e){
 80011d4:	db0a      	blt.n	80011ec <_Z10Unwrappingv+0xbc>
			P0=P_0-P_max;
 80011d6:	4911      	ldr	r1, [pc, #68]	; (800121c <_Z10Unwrappingv+0xec>)
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	edd1 6a00 	vldr	s13, [r1]
 80011e0:	4910      	ldr	r1, [pc, #64]	; (8001224 <_Z10Unwrappingv+0xf4>)
 80011e2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80011e6:	ed81 7a00 	vstr	s14, [r1]
 80011ea:	e7e1      	b.n	80011b0 <_Z10Unwrappingv+0x80>
			P0=P_0;
 80011ec:	490d      	ldr	r1, [pc, #52]	; (8001224 <_Z10Unwrappingv+0xf4>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	ed81 7a00 	vstr	s14, [r1]
 80011f6:	e7db      	b.n	80011b0 <_Z10Unwrappingv+0x80>
 80011f8:	f540895d 	.word	0xf540895d
 80011fc:	3f79220f 	.word	0x3f79220f
 8001200:	200003fc 	.word	0x200003fc
 8001204:	200002f0 	.word	0x200002f0
 8001208:	200002c4 	.word	0x200002c4
 800120c:	20000104 	.word	0x20000104
 8001210:	2000026c 	.word	0x2000026c
 8001214:	20000044 	.word	0x20000044
 8001218:	20000270 	.word	0x20000270
 800121c:	2000001c 	.word	0x2000001c
 8001220:	20000268 	.word	0x20000268
 8001224:	20000260 	.word	0x20000260
 8001228:	20000234 	.word	0x20000234
 800122c:	20000114 	.word	0x20000114

08001230 <_Z11PIDPositionv>:
{return _micros + htim11.Instance->CNT;}
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <_Z11PIDPositionv+0xa0>)
 8001232:	4928      	ldr	r1, [pc, #160]	; (80012d4 <_Z11PIDPositionv+0xa4>)
void PIDPosition(){
 8001234:	b430      	push	{r4, r5}
{return _micros + htim11.Instance->CNT;}
 8001236:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampPID_P >= 1000){
 8001238:	4c27      	ldr	r4, [pc, #156]	; (80012d8 <_Z11PIDPositionv+0xa8>)
{return _micros + htim11.Instance->CNT;}
 800123a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampPID_P >= 1000){
 800123c:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 800123e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampPID_P >= 1000){
 8001242:	1a1b      	subs	r3, r3, r0
 8001244:	eb60 0000 	sbc.w	r0, r0, r0
 8001248:	189b      	adds	r3, r3, r2
 800124a:	eb41 0100 	adc.w	r1, r1, r0
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	f171 0300 	sbcs.w	r3, r1, #0
 8001256:	d339      	bcc.n	80012cc <_Z11PIDPositionv+0x9c>
		ErrPos[0] = OutPosition - KalP;
 8001258:	4920      	ldr	r1, [pc, #128]	; (80012dc <_Z11PIDPositionv+0xac>)
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <_Z11PIDPositionv+0xb0>)
 800125c:	ed91 7a00 	vldr	s14, [r1]
 8001260:	edd3 6a00 	vldr	s13, [r3]
 8001264:	491f      	ldr	r1, [pc, #124]	; (80012e4 <_Z11PIDPositionv+0xb4>)
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <_Z11PIDPositionv+0xb8>)
 8001268:	edd1 7a01 	vldr	s15, [r1, #4]
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <_Z11PIDPositionv+0xbc>)
		ErrPos[0] = OutPosition - KalP;
 800126e:	ee37 7a66 	vsub.f32	s14, s14, s13
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8001272:	edd3 6a00 	vldr	s13, [r3]
{return _micros + htim11.Instance->CNT;}
 8001276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		ErrPos[0] = OutPosition - KalP;
 8001278:	ed81 7a00 	vstr	s14, [r1]
{return _micros + htim11.Instance->CNT;}
 800127c:	189b      	adds	r3, r3, r2
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 800127e:	ee77 7a67 	vsub.f32	s15, s14, s15
		sumError = sumError + ErrPos[0];
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <_Z11PIDPositionv+0xc0>)
		TimeStampPID_P = micros();
 8001284:	6023      	str	r3, [r4, #0]
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8001286:	ee67 7aa6 	vmul.f32	s15, s15, s13
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <_Z11PIDPositionv+0xc4>)
		sumError = sumError + ErrPos[0];
 800128c:	edd2 6a00 	vldr	s13, [r2]
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8001290:	edc0 7a00 	vstr	s15, [r0]
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8001294:	edd3 5a00 	vldr	s11, [r3]
		Propo = K_P * ErrPos[0];
 8001298:	4817      	ldr	r0, [pc, #92]	; (80012f8 <_Z11PIDPositionv+0xc8>)
		ufromposit = Propo + Integral + Derivate;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <_Z11PIDPositionv+0xcc>)
		Propo = K_P * ErrPos[0];
 800129c:	ed90 6a00 	vldr	s12, [r0]
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <_Z11PIDPositionv+0xd0>)
		ErrPos[1] = ErrPos[0]; // log previous error
 80012a2:	ed81 7a01 	vstr	s14, [r1, #4]
		sumError = sumError + ErrPos[0];
 80012a6:	ee77 6a26 	vadd.f32	s13, s14, s13
		Propo = K_P * ErrPos[0];
 80012aa:	ee27 6a06 	vmul.f32	s12, s14, s12
		sumError = sumError + ErrPos[0];
 80012ae:	edc2 6a00 	vstr	s13, [r2]
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80012b2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <_Z11PIDPositionv+0xd4>)
		Propo = K_P * ErrPos[0];
 80012b8:	ed80 6a00 	vstr	s12, [r0]
		ufromposit = Propo + Integral + Derivate;
 80012bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80012c0:	edc2 6a00 	vstr	s13, [r2]
		ufromposit = Propo + Integral + Derivate;
 80012c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80012c8:	edc3 7a00 	vstr	s15, [r3]
}
 80012cc:	bc30      	pop	{r4, r5}
 80012ce:	4770      	bx	lr
 80012d0:	200003fc 	.word	0x200003fc
 80012d4:	200002f0 	.word	0x200002f0
 80012d8:	200002b8 	.word	0x200002b8
 80012dc:	20000230 	.word	0x20000230
 80012e0:	200001fc 	.word	0x200001fc
 80012e4:	200001a0 	.word	0x200001a0
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000120 	.word	0x20000120
 80012f0:	2000052c 	.word	0x2000052c
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20000540 	.word	0x20000540
 8001300:	20000274 	.word	0x20000274
 8001304:	200001e8 	.word	0x200001e8

08001308 <_Z11PIDVelocityv>:
{return _micros + htim11.Instance->CNT;}
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <_Z11PIDVelocityv+0x90>)
 800130a:	4924      	ldr	r1, [pc, #144]	; (800139c <_Z11PIDVelocityv+0x94>)
void PIDVelocity(){
 800130c:	b430      	push	{r4, r5}
{return _micros + htim11.Instance->CNT;}
 800130e:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampPID_V >= 1000){
 8001310:	4c23      	ldr	r4, [pc, #140]	; (80013a0 <_Z11PIDVelocityv+0x98>)
{return _micros + htim11.Instance->CNT;}
 8001312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampPID_V >= 1000){
 8001314:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 8001316:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampPID_V >= 1000){
 800131a:	1a1b      	subs	r3, r3, r0
 800131c:	eb60 0000 	sbc.w	r0, r0, r0
 8001320:	189b      	adds	r3, r3, r2
 8001322:	eb41 0100 	adc.w	r1, r1, r0
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132a:	f171 0300 	sbcs.w	r3, r1, #0
 800132e:	d331      	bcc.n	8001394 <_Z11PIDVelocityv+0x8c>
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001330:	491c      	ldr	r1, [pc, #112]	; (80013a4 <_Z11PIDVelocityv+0x9c>)
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <_Z11PIDVelocityv+0xa0>)
 8001334:	ed91 7a00 	vldr	s14, [r1]
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <_Z11PIDVelocityv+0xa4>)
 800133e:	491c      	ldr	r1, [pc, #112]	; (80013b0 <_Z11PIDVelocityv+0xa8>)
		SumAll = SumAll + ErrVelo[0];
 8001340:	481c      	ldr	r0, [pc, #112]	; (80013b4 <_Z11PIDVelocityv+0xac>)
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	edd3 7a00 	vldr	s15, [r3]
{return _micros + htim11.Instance->CNT;}
 800134a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		SumAll = SumAll + ErrVelo[0];
 800134c:	edd0 6a00 	vldr	s13, [r0]
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001350:	ee37 7a67 	vsub.f32	s14, s14, s15
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8001354:	edd1 7a01 	vldr	s15, [r1, #4]
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001358:	ed81 7a00 	vstr	s14, [r1]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 800135c:	ed81 7a01 	vstr	s14, [r1, #4]
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8001360:	4915      	ldr	r1, [pc, #84]	; (80013b8 <_Z11PIDVelocityv+0xb0>)
{return _micros + htim11.Instance->CNT;}
 8001362:	189b      	adds	r3, r3, r2
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_Z11PIDVelocityv+0xb4>)
 800136a:	edd1 5a00 	vldr	s11, [r1]
 800136e:	ed92 6a00 	vldr	s12, [r2]
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <_Z11PIDVelocityv+0xb8>)
		TimeStampPID_V = micros();
 8001374:	6023      	str	r3, [r4, #0]
		SumAll = SumAll + ErrVelo[0];
 8001376:	ee77 6a26 	vadd.f32	s13, s14, s13
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 800137a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_Z11PIDVelocityv+0xbc>)
		SumAll = SumAll + ErrVelo[0];
 8001380:	edc0 6a00 	vstr	s13, [r0]
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8001384:	eee6 7a86 	vfma.f32	s15, s13, s12
 8001388:	ed92 6a00 	vldr	s12, [r2]
 800138c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8001390:	edc3 7a00 	vstr	s15, [r3]
}
 8001394:	bc30      	pop	{r4, r5}
 8001396:	4770      	bx	lr
 8001398:	200003fc 	.word	0x200003fc
 800139c:	200002f0 	.word	0x200002f0
 80013a0:	200002bc 	.word	0x200002bc
 80013a4:	20000238 	.word	0x20000238
 80013a8:	20000540 	.word	0x20000540
 80013ac:	20000200 	.word	0x20000200
 80013b0:	200001a8 	.word	0x200001a8
 80013b4:	200002a8 	.word	0x200002a8
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000010 	.word	0x20000010
 80013c0:	20000018 	.word	0x20000018
 80013c4:	2000053c 	.word	0x2000053c

080013c8 <_Z12MotDrvCytronv>:
{return _micros + htim11.Instance->CNT;}
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <_Z12MotDrvCytronv+0xb0>)
 80013ca:	492c      	ldr	r1, [pc, #176]	; (800147c <_Z12MotDrvCytronv+0xb4>)
void MotDrvCytron(){
 80013cc:	b570      	push	{r4, r5, r6, lr}
{return _micros + htim11.Instance->CNT;}
 80013ce:	681e      	ldr	r6, [r3, #0]
	if(micros() - TimeDrive >= 1000){
 80013d0:	4d2b      	ldr	r5, [pc, #172]	; (8001480 <_Z12MotDrvCytronv+0xb8>)
{return _micros + htim11.Instance->CNT;}
 80013d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if(micros() - TimeDrive >= 1000){
 80013d4:	6828      	ldr	r0, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 80013d6:	680a      	ldr	r2, [r1, #0]
 80013d8:	6849      	ldr	r1, [r1, #4]
	if(micros() - TimeDrive >= 1000){
 80013da:	1a1b      	subs	r3, r3, r0
 80013dc:	eb60 0000 	sbc.w	r0, r0, r0
 80013e0:	189b      	adds	r3, r3, r2
 80013e2:	eb41 0100 	adc.w	r1, r1, r0
 80013e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ea:	f171 0300 	sbcs.w	r3, r1, #0
 80013ee:	d32b      	bcc.n	8001448 <_Z12MotDrvCytronv+0x80>
{return _micros + htim11.Instance->CNT;}
 80013f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
		u_contr = u_contr*833.3;
 80013f2:	4e24      	ldr	r6, [pc, #144]	; (8001484 <_Z12MotDrvCytronv+0xbc>)
{return _micros + htim11.Instance->CNT;}
 80013f4:	189b      	adds	r3, r3, r2
		u_contr = u_contr*833.3;
 80013f6:	6830      	ldr	r0, [r6, #0]
		TimeDrive = micros();
 80013f8:	602b      	str	r3, [r5, #0]
		u_contr = u_contr*833.3;
 80013fa:	f7ff f9cf 	bl	800079c <__aeabi_f2d>
 80013fe:	a31c      	add	r3, pc, #112	; (adr r3, 8001470 <_Z12MotDrvCytronv+0xa8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe ff3c 	bl	8000280 <__aeabi_dmul>
 8001408:	f7ff faa8 	bl	800095c <__aeabi_d2f>
 800140c:	ee07 0a90 	vmov	s15, r0
		if(u_contr < 0){
 8001410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		u_contr = u_contr*833.3;
 8001418:	6030      	str	r0, [r6, #0]
		if(u_contr < 0){
 800141a:	d404      	bmi.n	8001426 <_Z12MotDrvCytronv+0x5e>
		else if(u_contr > 0) {
 800141c:	dd06      	ble.n	800142c <_Z12MotDrvCytronv+0x64>
			mot_dirctn = 0;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <_Z12MotDrvCytronv+0xc0>)
 8001420:	2400      	movs	r4, #0
 8001422:	701c      	strb	r4, [r3, #0]
 8001424:	e002      	b.n	800142c <_Z12MotDrvCytronv+0x64>
			mot_dirctn= 1;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <_Z12MotDrvCytronv+0xc0>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
		PWMOut= (int)fabsf(u_contr); // Absolute int
 800142c:	eef0 7ae7 	vabs.f32	s15, s15
 8001430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <_Z12MotDrvCytronv+0xc4>)
 8001436:	ee17 3a90 	vmov	r3, s15
		if(PWMOut> 5000){
 800143a:	f241 3188 	movw	r1, #5000	; 0x1388
		PWMOut= (int)fabsf(u_contr); // Absolute int
 800143e:	b29b      	uxth	r3, r3
		if(PWMOut> 5000){
 8001440:	428b      	cmp	r3, r1
		PWMOut= (int)fabsf(u_contr); // Absolute int
 8001442:	8013      	strh	r3, [r2, #0]
		if(PWMOut> 5000){
 8001444:	d901      	bls.n	800144a <_Z12MotDrvCytronv+0x82>
			PWMOut = 5000; // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001446:	8011      	strh	r1, [r2, #0]
}
 8001448:	bd70      	pop	{r4, r5, r6, pc}
		if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){
 800144a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800144e:	d2fb      	bcs.n	8001448 <_Z12MotDrvCytronv+0x80>
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <_Z12MotDrvCytronv+0xc8>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800145a:	eef0 7ae7 	vabs.f32	s15, s15
 800145e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			PWMOut = 1600;  //pvnt too low pwm that can't drive mot
 8001466:	bfa4      	itt	ge
 8001468:	f44f 63c8 	movge.w	r3, #1600	; 0x640
 800146c:	8013      	strhge	r3, [r2, #0]
}
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	66666666 	.word	0x66666666
 8001474:	408a0a66 	.word	0x408a0a66
 8001478:	200003fc 	.word	0x200003fc
 800147c:	200002f0 	.word	0x200002f0
 8001480:	200002b0 	.word	0x200002b0
 8001484:	2000053c 	.word	0x2000053c
 8001488:	20000518 	.word	0x20000518
 800148c:	20000264 	.word	0x20000264
 8001490:	200001a0 	.word	0x200001a0

08001494 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_11){
 8001494:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001498:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_11){
 800149a:	d01c      	beq.n	80014d6 <HAL_GPIO_EXTI_Callback+0x42>
	if(GPIO_Pin == GPIO_PIN_10){
 800149c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_EXTI_Callback+0x1e>
	if(GPIO_Pin == GPIO_PIN_13){
 80014a2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80014a6:	d110      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x36>
		bluecounter++;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_GPIO_EXTI_Callback+0x68>)
 80014aa:	7813      	ldrb	r3, [r2, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	7013      	strb	r3, [r2, #0]
}
 80014b0:	bd10      	pop	{r4, pc}
		if(grandState == work){grandState = stopnd;}
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <HAL_GPIO_EXTI_Callback+0x6c>)
		PWMOut = 0;
 80014b4:	4c13      	ldr	r4, [pc, #76]	; (8001504 <HAL_GPIO_EXTI_Callback+0x70>)
		if(grandState == work){grandState = stopnd;}
 80014b6:	7811      	ldrb	r1, [r2, #0]
		bluecounter = 0;
 80014b8:	4810      	ldr	r0, [pc, #64]	; (80014fc <HAL_GPIO_EXTI_Callback+0x68>)
		PWMOut = 0;
 80014ba:	2300      	movs	r3, #0
		if(grandState == work){grandState = stopnd;}
 80014bc:	2901      	cmp	r1, #1
		PWMOut = 0;
 80014be:	8023      	strh	r3, [r4, #0]
		bluecounter = 0;
 80014c0:	7003      	strb	r3, [r0, #0]
		if(grandState == work){grandState = stopnd;}
 80014c2:	d1f5      	bne.n	80014b0 <HAL_GPIO_EXTI_Callback+0x1c>
 80014c4:	2304      	movs	r3, #4
 80014c6:	7013      	strb	r3, [r2, #0]
}
 80014c8:	bd10      	pop	{r4, pc}
		if(GPIO_Pin == GPIO_PIN_2){
 80014ca:	2804      	cmp	r0, #4
 80014cc:	d1f0      	bne.n	80014b0 <HAL_GPIO_EXTI_Callback+0x1c>
			TargetDeg = 0 + POSOFFSET;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_GPIO_EXTI_Callback+0x74>)
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_GPIO_EXTI_Callback+0x78>)
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <HAL_GPIO_EXTI_Callback+0x7c>)
		bluecounter = 0;
 80014d8:	4c08      	ldr	r4, [pc, #32]	; (80014fc <HAL_GPIO_EXTI_Callback+0x68>)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014da:	2120      	movs	r1, #32
 80014dc:	f001 fe96 	bl	800320c <HAL_GPIO_TogglePin>
		counter_e++;
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <HAL_GPIO_EXTI_Callback+0x80>)
		grandState = emer;
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <HAL_GPIO_EXTI_Callback+0x6c>)
		counter_e++;
 80014e4:	780b      	ldrb	r3, [r1, #0]
		grandState = emer;
 80014e6:	f04f 0c03 	mov.w	ip, #3
		bluecounter = 0;
 80014ea:	2200      	movs	r2, #0
		grandState = emer;
 80014ec:	f880 c000 	strb.w	ip, [r0]
		counter_e++;
 80014f0:	3301      	adds	r3, #1
		PWMOut = 0;
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <HAL_GPIO_EXTI_Callback+0x70>)
		counter_e++;
 80014f4:	700b      	strb	r3, [r1, #0]
		bluecounter = 0;
 80014f6:	7022      	strb	r2, [r4, #0]
		PWMOut = 0;
 80014f8:	8002      	strh	r2, [r0, #0]
}
 80014fa:	bd10      	pop	{r4, pc}
 80014fc:	200002f8 	.word	0x200002f8
 8001500:	200002e8 	.word	0x200002e8
 8001504:	20000264 	.word	0x20000264
 8001508:	20000024 	.word	0x20000024
 800150c:	c42c4000 	.word	0xc42c4000
 8001510:	40020000 	.word	0x40020000
 8001514:	2000033e 	.word	0x2000033e

08001518 <HAL_TIM_PeriodElapsedCallback>:
 if(htim == &htim11)
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151a:	4283      	cmp	r3, r0
 800151c:	d000      	beq.n	8001520 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 800151e:	4770      	bx	lr
 {_micros += 65535;}
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001522:	e9d2 3100 	ldrd	r3, r1, [r2]
 8001526:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800152a:	181b      	adds	r3, r3, r0
 800152c:	f141 0100 	adc.w	r1, r1, #0
 8001530:	e9c2 3100 	strd	r3, r1, [r2]
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200003fc 	.word	0x200003fc
 800153c:	200002f0 	.word	0x200002f0

08001540 <Error_Handler>:
 8001540:	b672      	cpsid	i
  while (1)
 8001542:	e7fe      	b.n	8001542 <Error_Handler+0x2>

08001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8001544:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 8001546:	6883      	ldr	r3, [r0, #8]
 8001548:	6802      	ldr	r2, [r0, #0]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d011      	beq.n	8001572 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x2e>
    eigen_assert(m_col<m_xpr.cols()
 800154e:	2b02      	cmp	r3, #2
 8001550:	dc25      	bgt.n	800159e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x5a>
    eigen_assert(m_currentBlockRows==1);
 8001552:	68c4      	ldr	r4, [r0, #12]
 8001554:	2c01      	cmp	r4, #1
 8001556:	d11c      	bne.n	8001592 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x4e>
 8001558:	6844      	ldr	r4, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800155a:	f8d1 c000 	ldr.w	ip, [r1]
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
    {
      if(Flags & RowMajorBit)
        return m_storage.data()[colId + rowId * m_storage.cols()];
      else // column-major
        return m_storage.data()[rowId + colId * m_storage.rows()];
 800155e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001562:	4421      	add	r1, r4
 8001564:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001568:	3301      	adds	r3, #1
 800156a:	6083      	str	r3, [r0, #8]
 800156c:	f8c2 c000 	str.w	ip, [r2]
  }
 8001570:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 8001572:	68c3      	ldr	r3, [r0, #12]
 8001574:	6844      	ldr	r4, [r0, #4]
 8001576:	441c      	add	r4, r3
      m_currentBlockRows = 1;
 8001578:	2501      	movs	r5, #1
      m_col = 0;
 800157a:	2300      	movs	r3, #0
      eigen_assert(m_row<m_xpr.rows()
 800157c:	2c02      	cmp	r4, #2
      m_col = 0;
 800157e:	e9c0 4301 	strd	r4, r3, [r0, #4]
      m_currentBlockRows = 1;
 8001582:	60c5      	str	r5, [r0, #12]
      eigen_assert(m_row<m_xpr.rows()
 8001584:	dde9      	ble.n	800155a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x16>
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x68>)
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 800158c:	2148      	movs	r1, #72	; 0x48
 800158e:	f004 fe0d 	bl	80061ac <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x74>)
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 8001598:	214d      	movs	r1, #77	; 0x4d
 800159a:	f004 fe07 	bl	80061ac <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x78>)
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 80015a4:	214b      	movs	r1, #75	; 0x4b
 80015a6:	f004 fe01 	bl	80061ac <__assert_func>
 80015aa:	bf00      	nop
 80015ac:	080073c4 	.word	0x080073c4
 80015b0:	08007414 	.word	0x08007414
 80015b4:	08007314 	.word	0x08007314
 80015b8:	08007530 	.word	0x08007530
 80015bc:	080074d8 	.word	0x080074d8

080015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80015c0:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 80015c2:	6883      	ldr	r3, [r0, #8]
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d011      	beq.n	80015ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x2e>
    eigen_assert(m_col<m_xpr.cols()
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc24      	bgt.n	8001618 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x58>
    eigen_assert(m_currentBlockRows==1);
 80015ce:	68c4      	ldr	r4, [r0, #12]
 80015d0:	2c01      	cmp	r4, #1
 80015d2:	d11b      	bne.n	800160c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x4c>
 80015d4:	6844      	ldr	r4, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80015d6:	f8d1 c000 	ldr.w	ip, [r1]
 80015da:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80015de:	4421      	add	r1, r4
 80015e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80015e4:	3301      	adds	r3, #1
 80015e6:	6083      	str	r3, [r0, #8]
 80015e8:	f8c2 c000 	str.w	ip, [r2]
  }
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 80015ee:	6844      	ldr	r4, [r0, #4]
 80015f0:	68c5      	ldr	r5, [r0, #12]
      m_currentBlockRows = 1;
 80015f2:	60c3      	str	r3, [r0, #12]
      m_row+=m_currentBlockRows;
 80015f4:	442c      	add	r4, r5
      m_col = 0;
 80015f6:	2300      	movs	r3, #0
      eigen_assert(m_row<m_xpr.rows()
 80015f8:	2c02      	cmp	r4, #2
      m_col = 0;
 80015fa:	e9c0 4301 	strd	r4, r3, [r0, #4]
      eigen_assert(m_row<m_xpr.rows()
 80015fe:	ddea      	ble.n	80015d6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x16>
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>)
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 8001606:	2148      	movs	r1, #72	; 0x48
 8001608:	f004 fdd0 	bl	80061ac <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x70>)
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 8001612:	214d      	movs	r1, #77	; 0x4d
 8001614:	f004 fdca 	bl	80061ac <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x74>)
 800161a:	4a03      	ldr	r2, [pc, #12]	; (8001628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 800161e:	214b      	movs	r1, #75	; 0x4b
 8001620:	f004 fdc4 	bl	80061ac <__assert_func>
 8001624:	080073c4 	.word	0x080073c4
 8001628:	08007548 	.word	0x08007548
 800162c:	08007314 	.word	0x08007314
 8001630:	08007530 	.word	0x08007530
 8001634:	080074d8 	.word	0x080074d8

08001638 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
    if (m_col==m_xpr.cols())
 8001638:	6882      	ldr	r2, [r0, #8]
 800163a:	2a03      	cmp	r2, #3
  CommaInitializer& operator,(const Scalar& s)
 800163c:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 800163e:	6804      	ldr	r4, [r0, #0]
 8001640:	d00f      	beq.n	8001662 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x2a>
    eigen_assert(m_col<m_xpr.cols()
 8001642:	2a02      	cmp	r2, #2
 8001644:	dc23      	bgt.n	800168e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x56>
    eigen_assert(m_currentBlockRows==1);
 8001646:	68c3      	ldr	r3, [r0, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d11a      	bne.n	8001682 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x4a>
 800164c:	6843      	ldr	r3, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800164e:	6809      	ldr	r1, [r1, #0]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8001650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001654:	4413      	add	r3, r2
 8001656:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800165a:	3201      	adds	r2, #1
 800165c:	6082      	str	r2, [r0, #8]
 800165e:	6019      	str	r1, [r3, #0]
  }
 8001660:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 8001662:	68c2      	ldr	r2, [r0, #12]
 8001664:	6843      	ldr	r3, [r0, #4]
 8001666:	4413      	add	r3, r2
      m_col = 0;
 8001668:	2200      	movs	r2, #0
      m_currentBlockRows = 1;
 800166a:	2501      	movs	r5, #1
      eigen_assert(m_row<m_xpr.rows()
 800166c:	4293      	cmp	r3, r2
      m_col = 0;
 800166e:	e9c0 3201 	strd	r3, r2, [r0, #4]
      m_currentBlockRows = 1;
 8001672:	60c5      	str	r5, [r0, #12]
      eigen_assert(m_row<m_xpr.rows()
 8001674:	ddeb      	ble.n	800164e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x16>
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>)
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 800167a:	480a      	ldr	r0, [pc, #40]	; (80016a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 800167c:	2148      	movs	r1, #72	; 0x48
 800167e:	f004 fd95 	bl	80061ac <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x70>)
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 8001688:	214d      	movs	r1, #77	; 0x4d
 800168a:	f004 fd8f 	bl	80061ac <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x74>)
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 8001694:	214b      	movs	r1, #75	; 0x4b
 8001696:	f004 fd89 	bl	80061ac <__assert_func>
 800169a:	bf00      	nop
 800169c:	080073c4 	.word	0x080073c4
 80016a0:	0800760c 	.word	0x0800760c
 80016a4:	08007314 	.word	0x08007314
 80016a8:	08007530 	.word	0x08007530
 80016ac:	080074d8 	.word	0x080074d8

080016b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
    dst.resize(dstRows, dstCols);
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
}

template<typename DstXprType, typename SrcXprType, typename Functor>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80016b0:	b430      	push	{r4, r5}
    typedef typename internal::ref_selector<Rhs>::type RhsNested;
    typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
    typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80016b2:	e9d1 4500 	ldrd	r4, r5, [r1]
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
 80016b6:	ed94 3a03 	vldr	s6, [r4, #12]
 80016ba:	ed95 7a04 	vldr	s14, [r5, #16]
 80016be:	edd4 7a00 	vldr	s15, [r4]
 80016c2:	ed95 0a03 	vldr	s0, [r5, #12]
 80016c6:	ed95 2a01 	vldr	s4, [r5, #4]
 80016ca:	edd5 5a00 	vldr	s11, [r5]
 80016ce:	edd5 4a06 	vldr	s9, [r5, #24]
 80016d2:	ed94 5a04 	vldr	s10, [r4, #16]
 80016d6:	ed94 4a06 	vldr	s8, [r4, #24]
 80016da:	ed94 6a05 	vldr	s12, [r4, #20]
 80016de:	688a      	ldr	r2, [r1, #8]
 80016e0:	ed95 1a02 	vldr	s2, [r5, #8]
 80016e4:	edd4 1a02 	vldr	s3, [r4, #8]
 80016e8:	edd4 0a07 	vldr	s1, [r4, #28]
    /** \returns the left hand side nested expression */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const _LhsNested& lhs() const { return m_lhs; }
    /** \returns the right hand side nested expression */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const _RhsNested& rhs() const { return m_rhs; }
 80016ec:	68cb      	ldr	r3, [r1, #12]
 80016ee:	ed2d 8b04 	vpush	{d8-d9}
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80016f2:	ee63 6a07 	vmul.f32	s13, s6, s14
 80016f6:	ed95 8a07 	vldr	s16, [r5, #28]
 80016fa:	edd4 8a01 	vldr	s17, [r4, #4]
 80016fe:	ed95 9a05 	vldr	s18, [r5, #20]
 8001702:	eee7 6a80 	vfma.f32	s13, s15, s0
 8001706:	b090      	sub	sp, #64	; 0x40
 8001708:	ee63 2a02 	vmul.f32	s5, s6, s4
 800170c:	ee23 3a08 	vmul.f32	s6, s6, s16
 8001710:	eee7 2aa5 	vfma.f32	s5, s15, s11
 8001714:	eea7 3aa4 	vfma.f32	s6, s15, s9
 8001718:	ee62 3a05 	vmul.f32	s7, s4, s10
 800171c:	ee65 7a07 	vmul.f32	s15, s10, s14
 8001720:	ee25 5a08 	vmul.f32	s10, s10, s16
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001724:	eee4 6a09 	vfma.f32	s13, s8, s18
 8001728:	eea8 5aa4 	vfma.f32	s10, s17, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800172c:	ee22 2a06 	vmul.f32	s4, s4, s12
 8001730:	ee26 7a07 	vmul.f32	s14, s12, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001734:	eee4 2a01 	vfma.f32	s5, s8, s2
  CoeffReturnType coeff(Index row, Index col) const
 8001738:	eee5 3aa8 	vfma.f32	s7, s11, s17
 800173c:	eea5 2aa1 	vfma.f32	s4, s11, s3
 8001740:	eee8 7a80 	vfma.f32	s15, s17, s0
    return m_data[col * colStride() + row * rowStride()];
 8001744:	edd2 5a03 	vldr	s11, [r2, #12]
 8001748:	edd4 8a08 	vldr	s17, [r4, #32]
 800174c:	eea1 7a80 	vfma.f32	s14, s3, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001750:	ee26 6a08 	vmul.f32	s12, s12, s16
 8001754:	ed95 0a08 	vldr	s0, [r5, #32]
 8001758:	ed92 8a06 	vldr	s16, [r2, #24]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800175c:	eea0 5a80 	vfma.f32	s10, s1, s0
 8001760:	eea1 6aa4 	vfma.f32	s12, s3, s9
 8001764:	edd2 1a00 	vldr	s3, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001768:	ee66 4aa5 	vmul.f32	s9, s13, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800176c:	eea4 3a00 	vfma.f32	s6, s8, s0
 8001770:	eee2 4aa1 	vfma.f32	s9, s5, s3
 8001774:	eea8 7a89 	vfma.f32	s14, s17, s18
 8001778:	eeb0 4a45 	vmov.f32	s8, s10
 800177c:	eee0 7a89 	vfma.f32	s15, s1, s18
 8001780:	eea8 6a80 	vfma.f32	s12, s17, s0
 8001784:	ed93 5a00 	vldr	s10, [r3]
 8001788:	ed92 9a01 	vldr	s18, [r2, #4]
 800178c:	ed92 0a02 	vldr	s0, [r2, #8]
 8001790:	eee1 3a20 	vfma.f32	s7, s2, s1
 8001794:	eea1 2a28 	vfma.f32	s4, s2, s17
 8001798:	ee34 5a85 	vadd.f32	s10, s9, s10
 800179c:	ed92 1a07 	vldr	s2, [r2, #28]
 80017a0:	eef0 4a46 	vmov.f32	s9, s12
 80017a4:	eea3 5a08 	vfma.f32	s10, s6, s16
 80017a8:	ed92 6a04 	vldr	s12, [r2, #16]
 80017ac:	edd2 8a05 	vldr	s17, [r2, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80017b0:	ee67 0aa5 	vmul.f32	s1, s15, s11
 80017b4:	ee67 5a25 	vmul.f32	s11, s14, s11
 80017b8:	eee3 0aa1 	vfma.f32	s1, s7, s3
 80017bc:	eee2 5a21 	vfma.f32	s11, s4, s3
 80017c0:	ee67 1a06 	vmul.f32	s3, s14, s12
 80017c4:	ee27 7a28 	vmul.f32	s14, s14, s17
 80017c8:	eee2 1a09 	vfma.f32	s3, s4, s18
 80017cc:	eea2 7a00 	vfma.f32	s14, s4, s0
 80017d0:	ed92 2a08 	vldr	s4, [r2, #32]
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80017d4:	ed80 5a00 	vstr	s10, [r0]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80017d8:	ed93 5a01 	vldr	s10, [r3, #4]
 80017dc:	ee30 5a85 	vadd.f32	s10, s1, s10
 80017e0:	eea4 5a08 	vfma.f32	s10, s8, s16
 80017e4:	ed80 5a01 	vstr	s10, [r0, #4]
 80017e8:	ed93 5a02 	vldr	s10, [r3, #8]
 80017ec:	ee75 5a85 	vadd.f32	s11, s11, s10
 80017f0:	eee4 5a88 	vfma.f32	s11, s9, s16
 80017f4:	edc0 5a02 	vstr	s11, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80017f8:	ee66 5a86 	vmul.f32	s11, s13, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80017fc:	ed93 5a03 	vldr	s10, [r3, #12]
 8001800:	eee2 5a89 	vfma.f32	s11, s5, s18
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001804:	ee27 6a86 	vmul.f32	s12, s15, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001808:	ee75 5a85 	vadd.f32	s11, s11, s10
 800180c:	eea3 6a89 	vfma.f32	s12, s7, s18
 8001810:	eee3 5a01 	vfma.f32	s11, s6, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001814:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8001818:	edc0 5a03 	vstr	s11, [r0, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800181c:	edd3 5a04 	vldr	s11, [r3, #16]
 8001820:	ee36 6a25 	vadd.f32	s12, s12, s11
 8001824:	eee2 6a80 	vfma.f32	s13, s5, s0
 8001828:	eea4 6a01 	vfma.f32	s12, s8, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800182c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001830:	ed80 6a04 	vstr	s12, [r0, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001834:	ed93 6a05 	vldr	s12, [r3, #20]
 8001838:	ee31 6a86 	vadd.f32	s12, s3, s12
 800183c:	eee3 7a80 	vfma.f32	s15, s7, s0
 8001840:	eea4 6a81 	vfma.f32	s12, s9, s2
 8001844:	ed80 6a05 	vstr	s12, [r0, #20]
 8001848:	ed93 6a06 	vldr	s12, [r3, #24]
 800184c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001850:	eee3 6a02 	vfma.f32	s13, s6, s4
 8001854:	edc0 6a06 	vstr	s13, [r0, #24]
 8001858:	edd3 6a07 	vldr	s13, [r3, #28]
 800185c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001860:	eee4 7a02 	vfma.f32	s15, s8, s4
 8001864:	edc0 7a07 	vstr	s15, [r0, #28]
 8001868:	edd3 7a08 	vldr	s15, [r3, #32]
 800186c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001870:	eea4 7a82 	vfma.f32	s14, s9, s4
 8001874:	ed80 7a08 	vstr	s14, [r0, #32]

  typedef generic_dense_assignment_kernel<DstEvaluatorType,SrcEvaluatorType,Functor> Kernel;
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());

  dense_assignment_loop<Kernel>::run(kernel);
}
 8001878:	b010      	add	sp, #64	; 0x40
 800187a:	ecbd 8b04 	vpop	{d8-d9}
 800187e:	bc30      	pop	{r4, r5}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <_Z12Kalmanfilterv>:
void Kalmanfilter(){
 8001884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{return _micros + htim11.Instance->CNT;}
 8001888:	4ece      	ldr	r6, [pc, #824]	; (8001bc4 <_Z12Kalmanfilterv+0x340>)
	 if(micros() - TimeStampKalman >= 1000){
 800188a:	4dcf      	ldr	r5, [pc, #828]	; (8001bc8 <_Z12Kalmanfilterv+0x344>)
{return _micros + htim11.Instance->CNT;}
 800188c:	6837      	ldr	r7, [r6, #0]
 800188e:	4ccf      	ldr	r4, [pc, #828]	; (8001bcc <_Z12Kalmanfilterv+0x348>)
	 if(micros() - TimeStampKalman >= 1000){
 8001890:	6828      	ldr	r0, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	6821      	ldr	r1, [r4, #0]
 8001896:	6862      	ldr	r2, [r4, #4]
	 if(micros() - TimeStampKalman >= 1000){
 8001898:	1a1b      	subs	r3, r3, r0
 800189a:	eb60 0000 	sbc.w	r0, r0, r0
void Kalmanfilter(){
 800189e:	ed2d 8b0a 	vpush	{d8-d12}
	 if(micros() - TimeStampKalman >= 1000){
 80018a2:	185b      	adds	r3, r3, r1
 80018a4:	eb42 0200 	adc.w	r2, r2, r0
 80018a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ac:	f172 0300 	sbcs.w	r3, r2, #0
void Kalmanfilter(){
 80018b0:	b086      	sub	sp, #24
	 if(micros() - TimeStampKalman >= 1000){
 80018b2:	d204      	bcs.n	80018be <_Z12Kalmanfilterv+0x3a>
}
 80018b4:	b006      	add	sp, #24
 80018b6:	ecbd 8b0a 	vpop	{d8-d12}
 80018ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{return _micros + htim11.Instance->CNT;}
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80018c0:	4ac3      	ldr	r2, [pc, #780]	; (8001bd0 <_Z12Kalmanfilterv+0x34c>)
 80018c2:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8001c0c <_Z12Kalmanfilterv+0x388>
 80018c6:	ed92 6a00 	vldr	s12, [r2]
 80018ca:	edd2 6a01 	vldr	s13, [r2, #4]
 80018ce:	ed92 7a02 	vldr	s14, [r2, #8]
 80018d2:	4ac0      	ldr	r2, [pc, #768]	; (8001bd4 <_Z12Kalmanfilterv+0x350>)
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
#endif

    call_dense_assignment_loop(dst, src, func);
 80018d4:	4fc0      	ldr	r7, [pc, #768]	; (8001bd8 <_Z12Kalmanfilterv+0x354>)
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80018d6:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8001c10 <_Z12Kalmanfilterv+0x38c>
 80018da:	f8df a338 	ldr.w	sl, [pc, #824]	; 8001c14 <_Z12Kalmanfilterv+0x390>
 80018de:	185b      	adds	r3, r3, r1
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80018e0:	49be      	ldr	r1, [pc, #760]	; (8001bdc <_Z12Kalmanfilterv+0x358>)
		 TimeStampKalman = micros();
 80018e2:	602b      	str	r3, [r5, #0]
 80018e4:	edd1 7a00 	vldr	s15, [r1]
 80018e8:	4bbd      	ldr	r3, [pc, #756]	; (8001be0 <_Z12Kalmanfilterv+0x35c>)
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	ee27 5a86 	vmul.f32	s10, s15, s12
 80018f0:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	ee25 3a26 	vmul.f32	s6, s10, s13
 80018fc:	ee26 4a05 	vmul.f32	s8, s12, s10
 8001900:	ee66 4a25 	vmul.f32	s9, s12, s11
 8001904:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8001908:	ee25 5a07 	vmul.f32	s10, s10, s14
 800190c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001910:	ee65 5a87 	vmul.f32	s11, s11, s14
 8001914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001918:	ee26 6a27 	vmul.f32	s12, s12, s15
 800191c:	edc2 3a04 	vstr	s7, [r2, #16]
 8001920:	edd9 7a01 	vldr	s15, [r9, #4]
 8001924:	edd3 3a05 	vldr	s7, [r3, #20]
 8001928:	edc2 6a05 	vstr	s13, [r2, #20]
 800192c:	ed82 7a08 	vstr	s14, [r2, #32]
 8001930:	edd3 6a03 	vldr	s13, [r3, #12]
 8001934:	ed93 7a04 	vldr	s14, [r3, #16]
 8001938:	ed82 4a00 	vstr	s8, [r2]
 800193c:	ed82 6a02 	vstr	s12, [r2, #8]
 8001940:	ed99 4a00 	vldr	s8, [r9]
 8001944:	ed93 6a02 	vldr	s12, [r3, #8]
 8001948:	ed82 5a06 	vstr	s10, [r2, #24]
 800194c:	edc2 5a07 	vstr	s11, [r2, #28]
 8001950:	ed93 5a00 	vldr	s10, [r3]
 8001954:	edd3 5a01 	vldr	s11, [r3, #4]
 8001958:	edc2 4a01 	vstr	s9, [r2, #4]
 800195c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001964:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8001968:	eee5 6a04 	vfma.f32	s13, s10, s8
 800196c:	a901      	add	r1, sp, #4
 800196e:	4638      	mov	r0, r7
 8001970:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001974:	eee4 7a06 	vfma.f32	s15, s8, s12
 8001978:	edd9 4a02 	vldr	s9, [r9, #8]
 800197c:	ed93 5a06 	vldr	s10, [r3, #24]
 8001980:	edd3 5a07 	vldr	s11, [r3, #28]
 8001984:	ed93 6a08 	vldr	s12, [r3, #32]
 8001988:	ed82 3a03 	vstr	s6, [r2, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800198c:	eee5 6a24 	vfma.f32	s13, s10, s9
 8001990:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8001994:	eee4 7a86 	vfma.f32	s15, s9, s12
 8001998:	edca 6a00 	vstr	s13, [sl]
 800199c:	ed8a 7a01 	vstr	s14, [sl, #4]
 80019a0:	edca 7a02 	vstr	s15, [sl, #8]
 80019a4:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80019a8:	9204      	str	r2, [sp, #16]
 80019aa:	466a      	mov	r2, sp
 80019ac:	f7ff fe80 	bl	80016b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
 80019b0:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <_Z12Kalmanfilterv+0x360>)
 80019b2:	edd7 1a04 	vldr	s3, [r7, #16]
 80019b6:	ed93 1a01 	vldr	s2, [r3, #4]
 80019ba:	edd3 3a00 	vldr	s7, [r3]
 80019be:	edd7 2a03 	vldr	s5, [r7, #12]
 80019c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c6:	edd7 8a00 	vldr	s17, [r7]
 80019ca:	ed93 2a02 	vldr	s4, [r3, #8]
 80019ce:	ed97 4a05 	vldr	s8, [r7, #20]
 80019d2:	ed97 8a02 	vldr	s16, [r7, #8]
 80019d6:	ed97 3a06 	vldr	s6, [r7, #24]
 80019da:	edd7 4a08 	vldr	s9, [r7, #32]
 80019de:	ed97 5a07 	vldr	s10, [r7, #28]
 80019e2:	4b81      	ldr	r3, [pc, #516]	; (8001be8 <_Z12Kalmanfilterv+0x364>)
 80019e4:	ed9a 9a02 	vldr	s18, [sl, #8]
 80019e8:	edd3 0a00 	vldr	s1, [r3]
 80019ec:	edda 9a01 	vldr	s19, [sl, #4]
    m_xpr.coeffRef(0,0) = s;
 80019f0:	4b7e      	ldr	r3, [pc, #504]	; (8001bec <_Z12Kalmanfilterv+0x368>)
 80019f2:	ed9a aa00 	vldr	s20, [sl]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <_Z12Kalmanfilterv+0x36c>)
		 KalP = X(0,0);
 80019f8:	497e      	ldr	r1, [pc, #504]	; (8001bf4 <_Z12Kalmanfilterv+0x370>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80019fa:	ee21 6a21 	vmul.f32	s12, s2, s3
 80019fe:	ee61 7a07 	vmul.f32	s15, s2, s14
 8001a02:	eef0 6a46 	vmov.f32	s13, s12
 8001a06:	eee3 6aa2 	vfma.f32	s13, s7, s5
 8001a0a:	eee8 7aa3 	vfma.f32	s15, s17, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001a0e:	eee2 6a04 	vfma.f32	s13, s4, s8
 8001a12:	eee2 7a08 	vfma.f32	s15, s4, s16
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001a16:	ee61 6a26 	vmul.f32	s13, s2, s13
  EIGEN_DEVICE_FUNC
  static inline void run(const MatrixType& matrix, ResultType& result)
  {
    typedef typename MatrixType::Scalar Scalar;
    internal::evaluator<MatrixType> matrixEval(matrix);
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 8001a1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001a1e:	eee3 6aa7 	vfma.f32	s13, s7, s15
 8001a22:	ee63 7a83 	vmul.f32	s15, s7, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001a26:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8001a2a:	eee2 7a24 	vfma.f32	s15, s4, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001a2e:	ee22 ca81 	vmul.f32	s24, s5, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001a32:	eee1 7a05 	vfma.f32	s15, s2, s10
 8001a36:	eea3 6a87 	vfma.f32	s12, s7, s14
 8001a3a:	eee2 6a27 	vfma.f32	s13, s4, s15
 8001a3e:	eea8 caa3 	vfma.f32	s24, s17, s7
 8001a42:	eec5 0aa6 	vdiv.f32	s1, s11, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001a46:	ee61 5a04 	vmul.f32	s11, s2, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001a4a:	eea2 6a05 	vfma.f32	s12, s4, s10
 8001a4e:	eee3 5a88 	vfma.f32	s11, s7, s16
 8001a52:	eea3 ca02 	vfma.f32	s24, s6, s4
 8001a56:	eee2 5a24 	vfma.f32	s11, s4, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001a5a:	ee69 6a02 	vmul.f32	s13, s18, s4
 8001a5e:	ee60 7a86 	vmul.f32	s15, s1, s12
 8001a62:	eee9 6a81 	vfma.f32	s13, s19, s2
 8001a66:	ee20 ca8c 	vmul.f32	s24, s1, s24
 8001a6a:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8001a6e:	edd3 0a00 	vldr	s1, [r3]
 8001a72:	ed82 ca00 	vstr	s24, [r2]
    dst.coeffRef(0,0) += (lhs.transpose().cwiseProduct(rhs)).sum();
  }

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 8001a76:	ee70 6ae6 	vsub.f32	s13, s1, s13
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001a7a:	eeb0 6a4a 	vmov.f32	s12, s20
 8001a7e:	eeea 6a63 	vfms.f32	s13, s20, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <_Z12Kalmanfilterv+0x374>)
 8001a84:	edc2 5a02 	vstr	s11, [r2, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001a88:	eeac 6a26 	vfma.f32	s12, s24, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001a8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8001a90:	ed89 6a00 	vstr	s12, [r9]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001a94:	eeb0 6a69 	vmov.f32	s12, s19
 8001a98:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8001a9c:	4a57      	ldr	r2, [pc, #348]	; (8001bfc <_Z12Kalmanfilterv+0x378>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001a9e:	edd3 ba05 	vldr	s23, [r3, #20]
 8001aa2:	ed89 6a01 	vstr	s12, [r9, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001aa6:	eeb0 6a49 	vmov.f32	s12, s18
 8001aaa:	eea5 6aa6 	vfma.f32	s12, s11, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001aae:	ed93 ba01 	vldr	s22, [r3, #4]
 8001ab2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ab6:	ed89 6a02 	vstr	s12, [r9, #8]
 8001aba:	edc2 0a00 	vstr	s1, [r2]
 8001abe:	ed93 6a04 	vldr	s12, [r3, #16]
 8001ac2:	edd3 0a07 	vldr	s1, [r3, #28]
 8001ac6:	edd3 aa02 	vldr	s21, [r3, #8]
 8001aca:	ed93 0a06 	vldr	s0, [r3, #24]
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8001ace:	eee1 ba65 	vfms.f32	s23, s2, s11
 8001ad2:	eea3 bae7 	vfms.f32	s22, s7, s15
 8001ad6:	eee1 6a4c 	vfms.f32	s13, s2, s24
 8001ada:	eea1 6a67 	vfms.f32	s12, s2, s15
 8001ade:	eee2 0a67 	vfms.f32	s1, s4, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001ae2:	ed93 1a08 	vldr	s2, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
{return _micros + htim11.Instance->CNT;}
 8001aea:	6833      	ldr	r3, [r6, #0]
		 runtime = micros()-TimeStampKalman;
 8001aec:	682a      	ldr	r2, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		 KalP = X(0,0);
 8001af0:	ed81 aa00 	vstr	s20, [r1]
 8001af4:	eee3 7acc 	vfms.f32	s15, s7, s24
		 runtime = micros()-TimeStampKalman;
 8001af8:	1a9a      	subs	r2, r3, r2
 8001afa:	e9d4 3000 	ldrd	r3, r0, [r4]
 8001afe:	eee3 aae5 	vfms.f32	s21, s7, s11
 8001b02:	eb61 0101 	sbc.w	r1, r1, r1
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	eea2 1a65 	vfms.f32	s2, s4, s11
 8001b0c:	eb41 0000 	adc.w	r0, r1, r0
 8001b10:	493b      	ldr	r1, [pc, #236]	; (8001c00 <_Z12Kalmanfilterv+0x37c>)
		 KalV = X(1,0);
 8001b12:	4c3c      	ldr	r4, [pc, #240]	; (8001c04 <_Z12Kalmanfilterv+0x380>)
		 runtime = micros()-TimeStampKalman;
 8001b14:	600b      	str	r3, [r1, #0]
 8001b16:	ee67 5a26 	vmul.f32	s11, s14, s13
 8001b1a:	eea2 0a4c 	vfms.f32	s0, s4, s24
		 KalA = X(2,0);
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <_Z12Kalmanfilterv+0x384>)
		 runtime = micros()-TimeStampKalman;
 8001b20:	6048      	str	r0, [r1, #4]
 8001b22:	eee8 5aa7 	vfma.f32	s11, s17, s15
 8001b26:	ee61 3aa6 	vmul.f32	s7, s3, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001b2a:	eee8 5a00 	vfma.f32	s11, s16, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001b2e:	ee65 6a26 	vmul.f32	s13, s10, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001b32:	edc8 5a00 	vstr	s11, [r8]
 8001b36:	ee67 5a06 	vmul.f32	s11, s14, s12
 8001b3a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8001b3e:	eee8 5a8b 	vfma.f32	s11, s17, s22
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001b42:	eea8 7aaa 	vfma.f32	s14, s17, s21
 8001b46:	eee8 5a20 	vfma.f32	s11, s16, s1
 8001b4a:	eea8 7a01 	vfma.f32	s14, s16, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001b4e:	eee2 3aa7 	vfma.f32	s7, s5, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001b52:	eee3 6a27 	vfma.f32	s13, s6, s15
 8001b56:	edc8 5a01 	vstr	s11, [r8, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001b5a:	ee65 7a2b 	vmul.f32	s15, s10, s23
 8001b5e:	ee65 5a06 	vmul.f32	s11, s10, s12
 8001b62:	ed88 7a02 	vstr	s14, [r8, #8]
 8001b66:	ee21 6a86 	vmul.f32	s12, s3, s12
 8001b6a:	ee21 7aab 	vmul.f32	s14, s3, s23
 8001b6e:	eea2 6a8b 	vfma.f32	s12, s5, s22
 8001b72:	eea2 7aaa 	vfma.f32	s14, s5, s21
 8001b76:	eee3 5a0b 	vfma.f32	s11, s6, s22
 8001b7a:	eee3 7a2a 	vfma.f32	s15, s6, s21
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001b7e:	eeb0 5a63 	vmov.f32	s10, s7
 8001b82:	eea4 5a00 	vfma.f32	s10, s8, s0
 8001b86:	eea4 6a20 	vfma.f32	s12, s8, s1
 8001b8a:	eea4 7a01 	vfma.f32	s14, s8, s2
 8001b8e:	eee4 6a80 	vfma.f32	s13, s9, s0
 8001b92:	eee4 5aa0 	vfma.f32	s11, s9, s1
 8001b96:	eee4 7a81 	vfma.f32	s15, s9, s2
		 KalV = X(1,0);
 8001b9a:	edc4 9a00 	vstr	s19, [r4]
		 KalA = X(2,0);
 8001b9e:	ed83 9a00 	vstr	s18, [r3]
 8001ba2:	ed88 5a03 	vstr	s10, [r8, #12]
 8001ba6:	ed88 6a04 	vstr	s12, [r8, #16]
 8001baa:	ed88 7a05 	vstr	s14, [r8, #20]
 8001bae:	edc8 6a06 	vstr	s13, [r8, #24]
 8001bb2:	edc8 5a07 	vstr	s11, [r8, #28]
 8001bb6:	edc8 7a08 	vstr	s15, [r8, #32]
}
 8001bba:	b006      	add	sp, #24
 8001bbc:	ecbd 8b0a 	vpop	{d8-d12}
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc4:	200003fc 	.word	0x200003fc
 8001bc8:	200002b4 	.word	0x200002b4
 8001bcc:	200002f0 	.word	0x200002f0
 8001bd0:	200001b4 	.word	0x200001b4
 8001bd4:	20000278 	.word	0x20000278
 8001bd8:	2000023c 	.word	0x2000023c
 8001bdc:	20000020 	.word	0x20000020
 8001be0:	200000d4 	.word	0x200000d4
 8001be4:	20000108 	.word	0x20000108
 8001be8:	2000029c 	.word	0x2000029c
 8001bec:	20000234 	.word	0x20000234
 8001bf0:	200001ec 	.word	0x200001ec
 8001bf4:	200001fc 	.word	0x200001fc
 8001bf8:	200001c4 	.word	0x200001c4
 8001bfc:	200002e4 	.word	0x200002e4
 8001c00:	20000520 	.word	0x20000520
 8001c04:	20000200 	.word	0x20000200
 8001c08:	200001f8 	.word	0x200001f8
 8001c0c:	200002d8 	.word	0x200002d8
 8001c10:	20000208 	.word	0x20000208
 8001c14:	200002cc 	.word	0x200002cc

08001c18 <_Z13GrandStatumixv>:
void GrandStatumix(){
 8001c18:	b530      	push	{r4, r5, lr}
	if (grandState != Ready){
 8001c1a:	4c51      	ldr	r4, [pc, #324]	; (8001d60 <_Z13GrandStatumixv+0x148>)
 8001c1c:	7823      	ldrb	r3, [r4, #0]
void GrandStatumix(){
 8001c1e:	b085      	sub	sp, #20
	if (grandState != Ready){
 8001c20:	b9d3      	cbnz	r3, 8001c58 <_Z13GrandStatumixv+0x40>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8001c22:	4850      	ldr	r0, [pc, #320]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2a:	f001 faeb 	bl	8003204 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001c2e:	484d      	ldr	r0, [pc, #308]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001c30:	4d4d      	ldr	r5, [pc, #308]	; (8001d68 <_Z13GrandStatumixv+0x150>)
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c38:	f001 fae4 	bl	8003204 <HAL_GPIO_WritePin>
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001c3c:	484b      	ldr	r0, [pc, #300]	; (8001d6c <_Z13GrandStatumixv+0x154>)
 8001c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c42:	f001 fad9 	bl	80031f8 <HAL_GPIO_ReadPin>
	switch(grandState){
 8001c46:	7823      	ldrb	r3, [r4, #0]
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001c48:	7028      	strb	r0, [r5, #0]
	switch(grandState){
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d864      	bhi.n	8001d1a <_Z13GrandStatumixv+0x102>
 8001c50:	e8df f003 	tbb	[pc, r3]
 8001c54:	0c1d4b35 	.word	0x0c1d4b35
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8001c58:	4842      	ldr	r0, [pc, #264]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c60:	f001 fad0 	bl	8003204 <HAL_GPIO_WritePin>
	if (grandState != work){
 8001c64:	7823      	ldrb	r3, [r4, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d0e1      	beq.n	8001c2e <_Z13GrandStatumixv+0x16>
 8001c6a:	e7da      	b.n	8001c22 <_Z13GrandStatumixv+0xa>
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001c6c:	483d      	ldr	r0, [pc, #244]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c74:	f001 fac6 	bl	8003204 <HAL_GPIO_WritePin>
			if (stop_sense == 1){
 8001c78:	782b      	ldrb	r3, [r5, #0]
			PWMOut = 0;
 8001c7a:	483d      	ldr	r0, [pc, #244]	; (8001d70 <_Z13GrandStatumixv+0x158>)
			Integral = 0;
 8001c7c:	4a3d      	ldr	r2, [pc, #244]	; (8001d74 <_Z13GrandStatumixv+0x15c>)
 8001c7e:	2100      	movs	r1, #0
			PWMOut = 0;
 8001c80:	2500      	movs	r5, #0
			if (stop_sense == 1){
 8001c82:	2b01      	cmp	r3, #1
			PWMOut = 0;
 8001c84:	8005      	strh	r5, [r0, #0]
			Integral = 0;
 8001c86:	6011      	str	r1, [r2, #0]
			if (stop_sense == 1){
 8001c88:	d05f      	beq.n	8001d4a <_Z13GrandStatumixv+0x132>
}
 8001c8a:	b005      	add	sp, #20
 8001c8c:	bd30      	pop	{r4, r5, pc}
		if (pwr_sense == 0){
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <_Z13GrandStatumixv+0x160>)
		PWMOut = 0;
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <_Z13GrandStatumixv+0x158>)
		if (pwr_sense == 0){
 8001c92:	7815      	ldrb	r5, [r2, #0]
		PWMOut = 0;
 8001c94:	2200      	movs	r2, #0
 8001c96:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 0){
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	d1f6      	bne.n	8001c8a <_Z13GrandStatumixv+0x72>
			HAL_Delay(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
			grandState = Ready;
 8001c9e:	7025      	strb	r5, [r4, #0]
			HAL_Delay(100);
 8001ca0:	f000 ff50 	bl	8002b44 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <_Z13GrandStatumixv+0x164>)
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2164      	movs	r1, #100	; 0x64
 8001caa:	2216      	movs	r2, #22
 8001cac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	462a      	mov	r2, r5
 8001cb4:	2140      	movs	r1, #64	; 0x40
 8001cb6:	4832      	ldr	r0, [pc, #200]	; (8001d80 <_Z13GrandStatumixv+0x168>)
 8001cb8:	f001 fdd0 	bl	800385c <HAL_I2C_Mem_Write>
}
 8001cbc:	e7e5      	b.n	8001c8a <_Z13GrandStatumixv+0x72>
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8001cbe:	4829      	ldr	r0, [pc, #164]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc6:	f001 fa9d 	bl	8003204 <HAL_GPIO_WritePin>
		if (pwr_sense == 1){
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <_Z13GrandStatumixv+0x160>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d03f      	beq.n	8001d52 <_Z13GrandStatumixv+0x13a>
		if (stop_sense == 0){
 8001cd2:	782b      	ldrb	r3, [r5, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1d8      	bne.n	8001c8a <_Z13GrandStatumixv+0x72>
			PWMOut = 0;
 8001cd8:	4825      	ldr	r0, [pc, #148]	; (8001d70 <_Z13GrandStatumixv+0x158>)
			u_contr = 0;}
 8001cda:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <_Z13GrandStatumixv+0x16c>)
			PWMOut = 0;
 8001cdc:	8003      	strh	r3, [r0, #0]
			u_contr = 0;}
 8001cde:	2100      	movs	r1, #0
			grandState = stopnd;
 8001ce0:	2504      	movs	r5, #4
 8001ce2:	7025      	strb	r5, [r4, #0]
			u_contr = 0;}
 8001ce4:	6011      	str	r1, [r2, #0]
}
 8001ce6:	b005      	add	sp, #20
 8001ce8:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001cea:	481e      	ldr	r0, [pc, #120]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf2:	f001 fa87 	bl	8003204 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8001cf6:	481e      	ldr	r0, [pc, #120]	; (8001d70 <_Z13GrandStatumixv+0x158>)
		if (stop_sense == 1){
 8001cf8:	7829      	ldrb	r1, [r5, #0]
		PWMOut = 0;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	8002      	strh	r2, [r0, #0]
		X(1,0)=0;
 8001cfe:	4822      	ldr	r0, [pc, #136]	; (8001d88 <_Z13GrandStatumixv+0x170>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	6043      	str	r3, [r0, #4]
	    KalV = X(1,0);
 8001d04:	4821      	ldr	r0, [pc, #132]	; (8001d8c <_Z13GrandStatumixv+0x174>)
		if (stop_sense == 1){
 8001d06:	2901      	cmp	r1, #1
	    KalV = X(1,0);
 8001d08:	6003      	str	r3, [r0, #0]
		if (stop_sense == 1){
 8001d0a:	d1be      	bne.n	8001c8a <_Z13GrandStatumixv+0x72>
			mot_dirctn%=2;
 8001d0c:	4920      	ldr	r1, [pc, #128]	; (8001d90 <_Z13GrandStatumixv+0x178>)
			grandState = Ready;
 8001d0e:	7022      	strb	r2, [r4, #0]
			mot_dirctn%=2;
 8001d10:	780b      	ldrb	r3, [r1, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	700b      	strb	r3, [r1, #0]
 8001d18:	e7b7      	b.n	8001c8a <_Z13GrandStatumixv+0x72>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8001d1a:	4812      	ldr	r0, [pc, #72]	; (8001d64 <_Z13GrandStatumixv+0x14c>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d22:	f001 fa6f 	bl	8003204 <HAL_GPIO_WritePin>
		Unwrapping();
 8001d26:	f7ff fa03 	bl	8001130 <_Z10Unwrappingv>
		Kalmanfilter();
 8001d2a:	f7ff fdab 	bl	8001884 <_Z12Kalmanfilterv>
		if (pwr_sense == 1){grandState = emer;}
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <_Z13GrandStatumixv+0x160>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	bf04      	itt	eq
 8001d36:	2303      	moveq	r3, #3
 8001d38:	7023      	strbeq	r3, [r4, #0]
		if (stop_sense == 0){grandState = stop;}
 8001d3a:	782b      	ldrb	r3, [r5, #0]
 8001d3c:	b90b      	cbnz	r3, 8001d42 <_Z13GrandStatumixv+0x12a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	7023      	strb	r3, [r4, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <_Z13GrandStatumixv+0x17c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d09f      	beq.n	8001c8a <_Z13GrandStatumixv+0x72>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	7023      	strb	r3, [r4, #0]
}
 8001d4e:	b005      	add	sp, #20
 8001d50:	bd30      	pop	{r4, r5, pc}
			u_contr = 0;}
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <_Z13GrandStatumixv+0x16c>)
 8001d54:	2200      	movs	r2, #0
			grandState = emer;
 8001d56:	2103      	movs	r1, #3
 8001d58:	7021      	strb	r1, [r4, #0]
			u_contr = 0;}
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e7b9      	b.n	8001cd2 <_Z13GrandStatumixv+0xba>
 8001d5e:	bf00      	nop
 8001d60:	200002e8 	.word	0x200002e8
 8001d64:	40020400 	.word	0x40020400
 8001d68:	20000528 	.word	0x20000528
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	20000264 	.word	0x20000264
 8001d74:	200001e8 	.word	0x200001e8
 8001d78:	20000519 	.word	0x20000519
 8001d7c:	2000002c 	.word	0x2000002c
 8001d80:	200003a8 	.word	0x200003a8
 8001d84:	2000053c 	.word	0x2000053c
 8001d88:	200002cc 	.word	0x200002cc
 8001d8c:	20000200 	.word	0x20000200
 8001d90:	20000518 	.word	0x20000518
 8001d94:	200002f8 	.word	0x200002f8

08001d98 <main>:
{
 8001d98:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d9c:	4bab      	ldr	r3, [pc, #684]	; (800204c <main+0x2b4>)
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001d9e:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8002084 <main+0x2ec>
 8001da2:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8002088 <main+0x2f0>
    m_xpr.coeffRef(0,0) = s;
 8001da6:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 800208c <main+0x2f4>
{
 8001daa:	b09b      	sub	sp, #108	; 0x6c
 8001dac:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001db0:	2601      	movs	r6, #1
    m_xpr.coeffRef(0,0) = s;
 8001db2:	601f      	str	r7, [r3, #0]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001db4:	2500      	movs	r5, #0
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001db6:	a906      	add	r1, sp, #24
 8001db8:	a812      	add	r0, sp, #72	; 0x48
 8001dba:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
 8001dbe:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8001dc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8001dc6:	f7ff fbbd 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dca:	a907      	add	r1, sp, #28
	     0 ,    1    ,      Dt    ,
 8001dcc:	2400      	movs	r4, #0
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001dce:	f8cd a01c 	str.w	sl, [sp, #28]
 8001dd2:	f7ff fbb7 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 ,    1    ,      Dt    ,
 8001dd6:	a908      	add	r1, sp, #32
 8001dd8:	9408      	str	r4, [sp, #32]
 8001dda:	f7ff fbb3 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dde:	a909      	add	r1, sp, #36	; 0x24
 8001de0:	9709      	str	r7, [sp, #36]	; 0x24
 8001de2:	f7ff fbaf 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001de6:	a90a      	add	r1, sp, #40	; 0x28
 8001de8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001dec:	f7ff fbaa 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 ,    0    ,      1     ;
 8001df0:	a90b      	add	r1, sp, #44	; 0x2c
 8001df2:	940b      	str	r4, [sp, #44]	; 0x2c
 8001df4:	f7ff fba6 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001df8:	a90c      	add	r1, sp, #48	; 0x30
 8001dfa:	940c      	str	r4, [sp, #48]	; 0x30
 8001dfc:	f7ff fba2 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e00:	a90e      	add	r1, sp, #56	; 0x38
 8001e02:	970e      	str	r7, [sp, #56]	; 0x38
 8001e04:	f7ff fb9e 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001e08:	a812      	add	r0, sp, #72	; 0x48
 8001e0a:	f7fe ff8f 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e0e:	4b90      	ldr	r3, [pc, #576]	; (8002050 <main+0x2b8>)
 8001e10:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001e12:	601c      	str	r4, [r3, #0]
	X << 0 ,    0    ,      0     ;
 8001e14:	a90c      	add	r1, sp, #48	; 0x30
 8001e16:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e18:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001e1c:	9615      	str	r6, [sp, #84]	; 0x54
 8001e1e:	940c      	str	r4, [sp, #48]	; 0x30
 8001e20:	f7ff fbce 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e24:	a90e      	add	r1, sp, #56	; 0x38
 8001e26:	940e      	str	r4, [sp, #56]	; 0x38
 8001e28:	f7ff fbca 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001e2c:	a812      	add	r0, sp, #72	; 0x48
 8001e2e:	f7fe ff67 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <main+0x2bc>)
 8001e34:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001e36:	601c      	str	r4, [r3, #0]
	X1 << 0 ,    0    ,      0     ;
 8001e38:	a90c      	add	r1, sp, #48	; 0x30
 8001e3a:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e3c:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001e40:	9615      	str	r6, [sp, #84]	; 0x54
 8001e42:	940c      	str	r4, [sp, #48]	; 0x30
 8001e44:	f7ff fbbc 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e48:	a90e      	add	r1, sp, #56	; 0x38
 8001e4a:	940e      	str	r4, [sp, #56]	; 0x38
 8001e4c:	f7ff fbb8 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001e50:	a812      	add	r0, sp, #72	; 0x48
 8001e52:	f7fe ff55 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e56:	4b80      	ldr	r3, [pc, #512]	; (8002058 <main+0x2c0>)
 8001e58:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001e5a:	f8c3 9000 	str.w	r9, [r3]
	P << 0.000001 , 			0 	 , 			0     ,
 8001e5e:	a906      	add	r1, sp, #24
 8001e60:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001e62:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001e66:	9615      	str	r6, [sp, #84]	; 0x54
 8001e68:	9406      	str	r4, [sp, #24]
 8001e6a:	f7ff fb6b 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e6e:	a907      	add	r1, sp, #28
 8001e70:	9407      	str	r4, [sp, #28]
 8001e72:	f7ff fb67 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 		 ,    0.000001    ,  		0     ,
 8001e76:	a908      	add	r1, sp, #32
 8001e78:	9408      	str	r4, [sp, #32]
 8001e7a:	f7ff fb63 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e7e:	a909      	add	r1, sp, #36	; 0x24
 8001e80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001e84:	f7ff fb5e 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e88:	a90a      	add	r1, sp, #40	; 0x28
 8001e8a:	940a      	str	r4, [sp, #40]	; 0x28
 8001e8c:	f7ff fb5a 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 		 ,    		0    ,      0.000001     ;
 8001e90:	a90b      	add	r1, sp, #44	; 0x2c
 8001e92:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e94:	f7ff fb56 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e98:	a90c      	add	r1, sp, #48	; 0x30
 8001e9a:	940c      	str	r4, [sp, #48]	; 0x30
 8001e9c:	f7ff fb52 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ea0:	a90e      	add	r1, sp, #56	; 0x38
 8001ea2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8001ea6:	f7ff fb4d 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001eaa:	a812      	add	r0, sp, #72	; 0x48
 8001eac:	f7fe ff3e 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <main+0x2c4>)
 8001eb2:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001eb4:	601c      	str	r4, [r3, #0]
	O << 0 , 	0 	 , 		0     ,
 8001eb6:	a906      	add	r1, sp, #24
 8001eb8:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001eba:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001ebe:	9615      	str	r6, [sp, #84]	; 0x54
 8001ec0:	9406      	str	r4, [sp, #24]
 8001ec2:	f7ff fb3f 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ec6:	a907      	add	r1, sp, #28
 8001ec8:	9407      	str	r4, [sp, #28]
 8001eca:	f7ff fb3b 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 ,    0    ,  	0     ,
 8001ece:	a908      	add	r1, sp, #32
 8001ed0:	9408      	str	r4, [sp, #32]
 8001ed2:	f7ff fb37 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ed6:	a909      	add	r1, sp, #36	; 0x24
 8001ed8:	9409      	str	r4, [sp, #36]	; 0x24
 8001eda:	f7ff fb33 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ede:	a90a      	add	r1, sp, #40	; 0x28
 8001ee0:	940a      	str	r4, [sp, #40]	; 0x28
 8001ee2:	f7ff fb2f 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 ,    0    ,      0     ;
 8001ee6:	a90b      	add	r1, sp, #44	; 0x2c
 8001ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8001eea:	f7ff fb2b 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001eee:	a90c      	add	r1, sp, #48	; 0x30
 8001ef0:	940c      	str	r4, [sp, #48]	; 0x30
 8001ef2:	f7ff fb27 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ef6:	a90e      	add	r1, sp, #56	; 0x38
 8001ef8:	940e      	str	r4, [sp, #56]	; 0x38
 8001efa:	f7ff fb23 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001efe:	a812      	add	r0, sp, #72	; 0x48
 8001f00:	f7fe ff14 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f04:	4b56      	ldr	r3, [pc, #344]	; (8002060 <main+0x2c8>)
 8001f06:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001f08:	601f      	str	r7, [r3, #0]
	I << 1 , 0 , 0 ,
 8001f0a:	a906      	add	r1, sp, #24
 8001f0c:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f0e:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001f12:	9615      	str	r6, [sp, #84]	; 0x54
 8001f14:	9406      	str	r4, [sp, #24]
 8001f16:	f7ff fb15 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f1a:	a907      	add	r1, sp, #28
 8001f1c:	9407      	str	r4, [sp, #28]
 8001f1e:	f7ff fb11 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 , 1 , 0 ,
 8001f22:	a908      	add	r1, sp, #32
 8001f24:	9408      	str	r4, [sp, #32]
 8001f26:	f7ff fb0d 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f2a:	a909      	add	r1, sp, #36	; 0x24
 8001f2c:	9709      	str	r7, [sp, #36]	; 0x24
 8001f2e:	f7ff fb09 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f32:	a90a      	add	r1, sp, #40	; 0x28
 8001f34:	940a      	str	r4, [sp, #40]	; 0x28
 8001f36:	f7ff fb05 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 , 0 , 1 ;
 8001f3a:	a90b      	add	r1, sp, #44	; 0x2c
 8001f3c:	940b      	str	r4, [sp, #44]	; 0x2c
 8001f3e:	f7ff fb01 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f42:	a90c      	add	r1, sp, #48	; 0x30
 8001f44:	940c      	str	r4, [sp, #48]	; 0x30
 8001f46:	f7ff fafd 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f4a:	a90e      	add	r1, sp, #56	; 0x38
 8001f4c:	970e      	str	r7, [sp, #56]	; 0x38
 8001f4e:	f7ff faf9 	bl	8001544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001f52:	a812      	add	r0, sp, #72	; 0x48
 8001f54:	f7fe feea 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <main+0x2cc>)
    m_xpr.coeffRef(0,0) = s;
 8001f5a:	4a43      	ldr	r2, [pc, #268]	; (8002068 <main+0x2d0>)
 8001f5c:	601c      	str	r4, [r3, #0]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f5e:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <main+0x2d4>)
 8001f62:	6014      	str	r4, [r2, #0]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <main+0x2d8>)
 8001f66:	601a      	str	r2, [r3, #0]
	B << 0 , 0 , 0 ;
 8001f68:	a90c      	add	r1, sp, #48	; 0x30
 8001f6a:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f6c:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001f70:	9615      	str	r6, [sp, #84]	; 0x54
 8001f72:	940c      	str	r4, [sp, #48]	; 0x30
 8001f74:	f7ff fb24 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f78:	a90e      	add	r1, sp, #56	; 0x38
 8001f7a:	940e      	str	r4, [sp, #56]	; 0x38
 8001f7c:	f7ff fb20 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001f80:	a812      	add	r0, sp, #72	; 0x48
 8001f82:	f7fe febd 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <main+0x2dc>)
 8001f88:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001f8a:	601f      	str	r7, [r3, #0]
	C << 1 , 0 , 0 ;
 8001f8c:	a90c      	add	r1, sp, #48	; 0x30
 8001f8e:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001f90:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001f94:	9615      	str	r6, [sp, #84]	; 0x54
 8001f96:	940c      	str	r4, [sp, #48]	; 0x30
 8001f98:	f7ff fb4e 	bl	8001638 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f9c:	a90e      	add	r1, sp, #56	; 0x38
 8001f9e:	940e      	str	r4, [sp, #56]	; 0x38
 8001fa0:	f7ff fb4a 	bl	8001638 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8001fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001fa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001fa8:	4413      	add	r3, r2
 8001faa:	42b3      	cmp	r3, r6
 8001fac:	f040 81ab 	bne.w	8002306 <main+0x56e>
 8001fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001fb2:	2a03      	cmp	r2, #3
 8001fb4:	f040 81a7 	bne.w	8002306 <main+0x56e>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001fb8:	e9cd 5313 	strd	r5, r3, [sp, #76]	; 0x4c
 8001fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <main+0x2e0>)
 8001fc0:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001fc2:	f8c3 a000 	str.w	sl, [r3]
	G << (Dt*Dt)/2 , Dt , 1 ;
 8001fc6:	a90c      	add	r1, sp, #48	; 0x30
 8001fc8:	a812      	add	r0, sp, #72	; 0x48
 8001fca:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8001fce:	f7ff faf7 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001fd2:	a90e      	add	r1, sp, #56	; 0x38
 8001fd4:	970e      	str	r7, [sp, #56]	; 0x38
 8001fd6:	f7ff faf3 	bl	80015c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001fda:	a812      	add	r0, sp, #72	; 0x48
 8001fdc:	f7fe fe90 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
  HAL_Init();
 8001fe0:	f000 fd84 	bl	8002aec <HAL_Init>
  SystemClock_Config();
 8001fe4:	f7fe feb8 	bl	8000d58 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 8001fec:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	4c22      	ldr	r4, [pc, #136]	; (800207c <main+0x2e4>)
 8001ff2:	9507      	str	r5, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	9516      	str	r5, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ff8:	4821      	ldr	r0, [pc, #132]	; (8002080 <main+0x2e8>)
  huart2.Init.BaudRate = 115200;
 8001ffa:	f8df b094 	ldr.w	fp, [pc, #148]	; 8002090 <main+0x2f8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6323      	str	r3, [r4, #48]	; 0x30
 8002004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	9307      	str	r3, [sp, #28]
 800200c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	9508      	str	r5, [sp, #32]
 8002010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002016:	6323      	str	r3, [r4, #48]	; 0x30
 8002018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	9308      	str	r3, [sp, #32]
 8002020:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	9509      	str	r5, [sp, #36]	; 0x24
 8002024:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6323      	str	r3, [r4, #48]	; 0x30
 800202c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	9309      	str	r3, [sp, #36]	; 0x24
 8002034:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	950a      	str	r5, [sp, #40]	; 0x28
 8002038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	6323      	str	r3, [r4, #48]	; 0x30
 8002040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	930a      	str	r3, [sp, #40]	; 0x28
 8002048:	e024      	b.n	8002094 <main+0x2fc>
 800204a:	bf00      	nop
 800204c:	200000d4 	.word	0x200000d4
 8002050:	200002cc 	.word	0x200002cc
 8002054:	200002d8 	.word	0x200002d8
 8002058:	2000023c 	.word	0x2000023c
 800205c:	20000208 	.word	0x20000208
 8002060:	200001c4 	.word	0x200001c4
 8002064:	200000f8 	.word	0x200000f8
 8002068:	2000011c 	.word	0x2000011c
 800206c:	2000029c 	.word	0x2000029c
 8002070:	41200000 	.word	0x41200000
 8002074:	20000108 	.word	0x20000108
 8002078:	200001b4 	.word	0x200001b4
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000
 8002084:	3a83126f 	.word	0x3a83126f
 8002088:	350637bd 	.word	0x350637bd
 800208c:	358637bd 	.word	0x358637bd
 8002090:	40004400 	.word	0x40004400
 8002094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002096:	950b      	str	r5, [sp, #44]	; 0x2c
 8002098:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6323      	str	r3, [r4, #48]	; 0x30
 80020a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020a6:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a8:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020aa:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ae:	f001 f8a9 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80020b2:	462a      	mov	r2, r5
 80020b4:	489f      	ldr	r0, [pc, #636]	; (8002334 <main+0x59c>)
 80020b6:	f24e 0104 	movw	r1, #57348	; 0xe004
 80020ba:	f001 f8a3 	bl	8003204 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_Stop_Pin;
 80020be:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80020c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	489c      	ldr	r0, [pc, #624]	; (8002338 <main+0x5a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_Stop_Pin;
 80020cc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = LD2_Pin;
 80020d0:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f000 ff9e 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80020d8:	f04f 0900 	mov.w	r9, #0
 80020dc:	2220      	movs	r2, #32
 80020de:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020e0:	4896      	ldr	r0, [pc, #600]	; (800233c <main+0x5a4>)
 80020e2:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = LD2_Pin;
 80020e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80020e8:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f000 ff92 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80020f0:	2202      	movs	r2, #2
 80020f2:	2300      	movs	r3, #0
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80020f4:	488f      	ldr	r0, [pc, #572]	; (8002334 <main+0x59c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80020f8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80020fa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f000 ff89 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002102:	f24e 0204 	movw	r2, #57348	; 0xe004
 8002106:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	488a      	ldr	r0, [pc, #552]	; (8002334 <main+0x59c>)
 800210a:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 800210c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002110:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f000 ff7e 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXTI10_Emer_Pin;
 8002118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8002120:	4885      	ldr	r0, [pc, #532]	; (8002338 <main+0x5a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8002124:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = EXTI10_Emer_Pin;
 8002126:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 800212a:	f000 ff73 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800212e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002132:	2300      	movs	r3, #0
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002134:	4880      	ldr	r0, [pc, #512]	; (8002338 <main+0x5a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002138:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800213a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 800213e:	f000 ff69 	bl	8003014 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002146:	2204      	movs	r2, #4
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002148:	487d      	ldr	r0, [pc, #500]	; (8002340 <main+0x5a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800214c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 800214e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002152:	f000 ff5f 	bl	8003014 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002156:	462a      	mov	r2, r5
 8002158:	4629      	mov	r1, r5
 800215a:	2008      	movs	r0, #8
 800215c:	f000 fd16 	bl	8002b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002160:	2008      	movs	r0, #8
 8002162:	f000 fd51 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002166:	462a      	mov	r2, r5
 8002168:	4629      	mov	r1, r5
 800216a:	2028      	movs	r0, #40	; 0x28
 800216c:	f000 fd0e 	bl	8002b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002170:	2028      	movs	r0, #40	; 0x28
 8002172:	f000 fd49 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002176:	4873      	ldr	r0, [pc, #460]	; (8002344 <main+0x5ac>)
  huart2.Init.BaudRate = 115200;
 8002178:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800217c:	e9c0 b300 	strd	fp, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002180:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002182:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002186:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
 800218a:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800218c:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800218e:	f003 ff73 	bl	8006078 <HAL_UART_Init>
 8002192:	4605      	mov	r5, r0
 8002194:	bb30      	cbnz	r0, 80021e4 <main+0x44c>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002196:	9006      	str	r0, [sp, #24]
 8002198:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hi2c1.Init.ClockSpeed = 400000;
 800219a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8002370 <main+0x5d8>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a2:	6323      	str	r3, [r4, #48]	; 0x30
 80021a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hi2c1.Instance = I2C1;
 80021a6:	4c68      	ldr	r4, [pc, #416]	; (8002348 <main+0x5b0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021ac:	4602      	mov	r2, r0
 80021ae:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b0:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021b2:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b4:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021b6:	f000 fce9 	bl	8002b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021ba:	2010      	movs	r0, #16
 80021bc:	f000 fd24 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 400000;
 80021c0:	4b62      	ldr	r3, [pc, #392]	; (800234c <main+0x5b4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c2:	4620      	mov	r0, r4
  hi2c1.Init.ClockSpeed = 400000;
 80021c4:	e9c4 a300 	strd	sl, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80021cc:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80021d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d8:	6123      	str	r3, [r4, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021da:	f001 fa77 	bl	80036cc <HAL_I2C_Init>
 80021de:	b118      	cbz	r0, 80021e8 <main+0x450>
 80021e0:	b672      	cpsid	i
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <main+0x44a>
 80021e4:	b672      	cpsid	i
 80021e6:	e7fe      	b.n	80021e6 <main+0x44e>
  htim11.Instance = TIM11;
 80021e8:	4d59      	ldr	r5, [pc, #356]	; (8002350 <main+0x5b8>)
  htim11.Init.Prescaler = 99;
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <main+0x5bc>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	60a8      	str	r0, [r5, #8]
  htim11.Init.Prescaler = 99;
 80021ee:	2763      	movs	r7, #99	; 0x63
 80021f0:	e9c5 3700 	strd	r3, r7, [r5]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	6128      	str	r0, [r5, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	61a8      	str	r0, [r5, #24]
  htim11.Init.Period = 65535;
 80021f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80021fc:	4628      	mov	r0, r5
  htim11.Init.Period = 65535;
 80021fe:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002200:	f002 ffc4 	bl	800518c <HAL_TIM_Base_Init>
 8002204:	b9d0      	cbnz	r0, 800223c <main+0x4a4>
  htim2.Instance = TIM2;
 8002206:	4e54      	ldr	r6, [pc, #336]	; (8002358 <main+0x5c0>)
 8002208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8002210:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002218:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 800221c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	e9c6 7001 	strd	r7, r0, [r6, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	6130      	str	r0, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	61b0      	str	r0, [r6, #24]
  htim2.Instance = TIM2;
 8002228:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800222a:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002232:	f002 ffab 	bl	800518c <HAL_TIM_Base_Init>
 8002236:	b118      	cbz	r0, 8002240 <main+0x4a8>
 8002238:	b672      	cpsid	i
  while (1)
 800223a:	e7fe      	b.n	800223a <main+0x4a2>
 800223c:	b672      	cpsid	i
 800223e:	e7fe      	b.n	800223e <main+0x4a6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002244:	a912      	add	r1, sp, #72	; 0x48
 8002246:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800224a:	f003 fcb9 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 800224e:	b108      	cbz	r0, 8002254 <main+0x4bc>
 8002250:	b672      	cpsid	i
  while (1)
 8002252:	e7fe      	b.n	8002252 <main+0x4ba>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002254:	4630      	mov	r0, r6
 8002256:	f003 f95f 	bl	8005518 <HAL_TIM_IC_Init>
 800225a:	b108      	cbz	r0, 8002260 <main+0x4c8>
 800225c:	b672      	cpsid	i
  while (1)
 800225e:	e7fe      	b.n	800225e <main+0x4c6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002260:	a90c      	add	r1, sp, #48	; 0x30
 8002262:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002268:	f003 feca 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4602      	mov	r2, r0
 800226e:	b108      	cbz	r0, 8002274 <main+0x4dc>
 8002270:	b672      	cpsid	i
  while (1)
 8002272:	e7fe      	b.n	8002272 <main+0x4da>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002274:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	a90e      	add	r1, sp, #56	; 0x38
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800227a:	f04f 0800 	mov.w	r8, #0
 800227e:	f04f 0901 	mov.w	r9, #1
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002284:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002288:	f003 fabe 	bl	8005808 <HAL_TIM_IC_ConfigChannel>
 800228c:	b108      	cbz	r0, 8002292 <main+0x4fa>
 800228e:	b672      	cpsid	i
  while (1)
 8002290:	e7fe      	b.n	8002290 <main+0x4f8>
  htim4.Instance = TIM4;
 8002292:	4f32      	ldr	r7, [pc, #200]	; (800235c <main+0x5c4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002294:	2300      	movs	r3, #0
 8002296:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800229a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80022a6:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80022aa:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	e9c7 3301 	strd	r3, r3, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b2:	9318      	str	r3, [sp, #96]	; 0x60
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	613b      	str	r3, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	61bb      	str	r3, [r7, #24]
  htim4.Instance = TIM4;
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <main+0x5c8>)
 80022ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022bc:	4638      	mov	r0, r7
  htim4.Init.Period = 9999;
 80022be:	f242 730f 	movw	r3, #9999	; 0x270f
 80022c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022c4:	f002 ff62 	bl	800518c <HAL_TIM_Base_Init>
 80022c8:	b108      	cbz	r0, 80022ce <main+0x536>
 80022ca:	b672      	cpsid	i
  while (1)
 80022cc:	e7fe      	b.n	80022cc <main+0x534>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022d2:	a90e      	add	r1, sp, #56	; 0x38
 80022d4:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022d8:	f003 fc72 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 80022dc:	b108      	cbz	r0, 80022e2 <main+0x54a>
 80022de:	b672      	cpsid	i
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <main+0x548>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022e2:	4638      	mov	r0, r7
 80022e4:	f003 f836 	bl	8005354 <HAL_TIM_PWM_Init>
 80022e8:	b108      	cbz	r0, 80022ee <main+0x556>
 80022ea:	b672      	cpsid	i
  while (1)
 80022ec:	e7fe      	b.n	80022ec <main+0x554>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2200      	movs	r2, #0
 80022f0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f2:	a90c      	add	r1, sp, #48	; 0x30
 80022f4:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022fa:	f003 fe81 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4602      	mov	r2, r0
 8002300:	b138      	cbz	r0, 8002312 <main+0x57a>
 8002302:	b672      	cpsid	i
  while (1)
 8002304:	e7fe      	b.n	8002304 <main+0x56c>
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <main+0x5cc>)
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <main+0x5d0>)
 800230a:	4818      	ldr	r0, [pc, #96]	; (800236c <main+0x5d4>)
 800230c:	217a      	movs	r1, #122	; 0x7a
 800230e:	f003 ff4d 	bl	80061ac <__assert_func>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	f04f 0860 	mov.w	r8, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231a:	a912      	add	r1, sp, #72	; 0x48
 800231c:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800231e:	f04f 0900 	mov.w	r9, #0
 8002322:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	f003 fb45 	bl	80059b4 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4680      	mov	r8, r0
 800232c:	b310      	cbz	r0, 8002374 <main+0x5dc>
 800232e:	b672      	cpsid	i
  while (1)
 8002330:	e7fe      	b.n	8002330 <main+0x598>
 8002332:	bf00      	nop
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020c00 	.word	0x40020c00
 8002344:	200004d4 	.word	0x200004d4
 8002348:	200003a8 	.word	0x200003a8
 800234c:	00061a80 	.word	0x00061a80
 8002350:	200003fc 	.word	0x200003fc
 8002354:	40014800 	.word	0x40014800
 8002358:	20000444 	.word	0x20000444
 800235c:	2000048c 	.word	0x2000048c
 8002360:	40000800 	.word	0x40000800
 8002364:	0800720c 	.word	0x0800720c
 8002368:	080076d0 	.word	0x080076d0
 800236c:	08007314 	.word	0x08007314
 8002370:	40005400 	.word	0x40005400
  HAL_TIM_MspPostInit(&htim4);
 8002374:	4638      	mov	r0, r7
 8002376:	f000 fa5b 	bl	8002830 <HAL_TIM_MspPostInit>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 800237a:	4899      	ldr	r0, [pc, #612]	; (80025e0 <main+0x848>)
 800237c:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8002644 <main+0x8ac>
 8002380:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002648 <main+0x8b0>
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002384:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800264c <main+0x8b4>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8002388:	f002 ffae 	bl	80052e8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 800238c:	4895      	ldr	r0, [pc, #596]	; (80025e4 <main+0x84c>)
 800238e:	f002 ff7b 	bl	8005288 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8002392:	4a95      	ldr	r2, [pc, #596]	; (80025e8 <main+0x850>)
 8002394:	4893      	ldr	r0, [pc, #588]	; (80025e4 <main+0x84c>)
 8002396:	2310      	movs	r3, #16
 8002398:	4641      	mov	r1, r8
 800239a:	f003 f93b 	bl	8005614 <HAL_TIM_IC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 800239e:	4638      	mov	r0, r7
 80023a0:	f002 ff72 	bl	8005288 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80023a4:	4641      	mov	r1, r8
 80023a6:	4638      	mov	r0, r7
 80023a8:	f003 f852 	bl	8005450 <HAL_TIM_PWM_Start>
    HAL_Delay(100);
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f000 fbc9 	bl	8002b44 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 80023b2:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <main+0x854>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2064      	movs	r0, #100	; 0x64
 80023b8:	2316      	movs	r3, #22
 80023ba:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80023be:	4642      	mov	r2, r8
 80023c0:	488b      	ldr	r0, [pc, #556]	; (80025f0 <main+0x858>)
 80023c2:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8002650 <main+0x8b8>
 80023c6:	2301      	movs	r3, #1
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	f001 fa47 	bl	800385c <HAL_I2C_Mem_Write>
	  	  if (micros()-timeStampSR > 1000)      // don't use 1 millisec
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <main+0x85c>)
{return _micros + htim11.Instance->CNT;}
 80023d0:	6828      	ldr	r0, [r5, #0]
	  	  if (micros()-timeStampSR > 1000)      // don't use 1 millisec
 80023d2:	681a      	ldr	r2, [r3, #0]
{return _micros + htim11.Instance->CNT;}
 80023d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	  if (micros()-timeStampSR > 1000)      // don't use 1 millisec
 80023d6:	1a9b      	subs	r3, r3, r2
{return _micros + htim11.Instance->CNT;}
 80023d8:	e9d8 2100 	ldrd	r2, r1, [r8]
	  	  if (micros()-timeStampSR > 1000)      // don't use 1 millisec
 80023dc:	eb6c 0c0c 	sbc.w	ip, ip, ip
 80023e0:	189b      	adds	r3, r3, r2
 80023e2:	eb41 010c 	adc.w	r1, r1, ip
 80023e6:	f240 3ce9 	movw	ip, #1001	; 0x3e9
 80023ea:	4563      	cmp	r3, ip
 80023ec:	f171 0300 	sbcs.w	r3, r1, #0
 80023f0:	f080 8097 	bcs.w	8002522 <main+0x78a>
	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 80023f4:	f899 3000 	ldrb.w	r3, [r9]
 80023f8:	b123      	cbz	r3, 8002404 <main+0x66c>
 80023fa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80023fe:	2a20      	cmp	r2, #32
 8002400:	f000 80a5 	beq.w	800254e <main+0x7b6>
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8002404:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002406:	487c      	ldr	r0, [pc, #496]	; (80025f8 <main+0x860>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 800240c:	f1c1 0213 	rsb	r2, r1, #19
 8002410:	f1c1 0120 	rsb	r1, r1, #32
	uint32_t sum = 0 ;
 8002414:	2300      	movs	r3, #0
 8002416:	9105      	str	r1, [sp, #20]
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8002418:	2100      	movs	r1, #0
 800241a:	f102 3cff 	add.w	ip, r2, #4294967295
 800241e:	6041      	str	r1, [r0, #4]
 8002420:	f00c 0c0f 	and.w	ip, ip, #15
 8002424:	4970      	ldr	r1, [pc, #448]	; (80025e8 <main+0x850>)
 8002426:	f851 e02c 	ldr.w	lr, [r1, ip, lsl #2]
 800242a:	f002 0c0f 	and.w	ip, r2, #15
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 800242e:	3201      	adds	r2, #1
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8002430:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8002434:	9905      	ldr	r1, [sp, #20]
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8002436:	ebac 0c0e 	sub.w	ip, ip, lr
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 800243a:	4291      	cmp	r1, r2
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 800243c:	f8c0 c000 	str.w	ip, [r0]
		sum += DiffTime[i];
 8002440:	4463      	add	r3, ip
 8002442:	f100 0008 	add.w	r0, r0, #8
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8002446:	d1e7      	bne.n	8002418 <main+0x680>
	MeanTime =sum / (float)(CAPTURENUM-3);
 8002448:	ee07 3a90 	vmov	s15, r3
	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 800244c:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 80025fc <main+0x864>
	MeanTime =sum / (float)(CAPTURENUM-3);
 8002450:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002600 <main+0x868>
 8002454:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <main+0x86c>)
{return _micros + htim11.Instance->CNT;}
 8002456:	6828      	ldr	r0, [r5, #0]
	  	 if(micros() - timestampPWM >= 500){
 8002458:	f8da 2000 	ldr.w	r2, [sl]
	MeanTime =sum / (float)(CAPTURENUM-3);
 800245c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 8002460:	ee86 7a27 	vdiv.f32	s14, s12, s15
	MeanTime =sum / (float)(CAPTURENUM-3);
 8002464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002468:	edc3 7a00 	vstr	s15, [r3]
	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <main+0x870>)
 800246e:	ed83 7a00 	vstr	s14, [r3]
{return _micros + htim11.Instance->CNT;}
 8002472:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	 if(micros() - timestampPWM >= 500){
 8002474:	1a9b      	subs	r3, r3, r2
{return _micros + htim11.Instance->CNT;}
 8002476:	e9d8 2100 	ldrd	r2, r1, [r8]
	  	 if(micros() - timestampPWM >= 500){
 800247a:	eb6c 0c0c 	sbc.w	ip, ip, ip
 800247e:	189b      	adds	r3, r3, r2
 8002480:	eb41 010c 	adc.w	r1, r1, ip
 8002484:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002488:	f171 0300 	sbcs.w	r3, r1, #0
 800248c:	d310      	bcc.n	80024b0 <main+0x718>
{return _micros + htim11.Instance->CNT;}
 800248e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 8002490:	495e      	ldr	r1, [pc, #376]	; (800260c <main+0x874>)
{return _micros + htim11.Instance->CNT;}
 8002492:	189b      	adds	r3, r3, r2
	  		  	  timestampPWM = micros(); // stamp
 8002494:	f8ca 3000 	str.w	r3, [sl]
	  	  		if (mot_dirctn == 0){
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <main+0x878>)
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 800249a:	683a      	ldr	r2, [r7, #0]
	  	  		if (mot_dirctn == 0){
 800249c:	781b      	ldrb	r3, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 800249e:	8809      	ldrh	r1, [r1, #0]
 80024a0:	6351      	str	r1, [r2, #52]	; 0x34
	  	  		if (mot_dirctn == 0){
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d14d      	bne.n	8002542 <main+0x7aa>
						HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2104      	movs	r1, #4
 80024aa:	4658      	mov	r0, fp
 80024ac:	f000 feaa 	bl	8003204 <HAL_GPIO_WritePin>
	  	 if (grandState ==  work){
 80024b0:	4b58      	ldr	r3, [pc, #352]	; (8002614 <main+0x87c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d18a      	bne.n	80023ce <main+0x636>
	  		 if(flagNewpos==0){
 80024b8:	4957      	ldr	r1, [pc, #348]	; (8002618 <main+0x880>)
 80024ba:	680a      	ldr	r2, [r1, #0]
 80024bc:	b922      	cbnz	r2, 80024c8 <main+0x730>
	  		    flagNewpos = 1;
 80024be:	600b      	str	r3, [r1, #0]
	  		    Currentpos = CurrentEn;
 80024c0:	4b56      	ldr	r3, [pc, #344]	; (800261c <main+0x884>)
 80024c2:	4a57      	ldr	r2, [pc, #348]	; (8002620 <main+0x888>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6013      	str	r3, [r2, #0]
	  		 Unwrapping();
 80024c8:	f7fe fe32 	bl	8001130 <_Z10Unwrappingv>
	  		 Trajectory();
 80024cc:	f7fe fca0 	bl	8000e10 <_Z10Trajectoryv>
	  		 Kalmanfilter();
 80024d0:	f7ff f9d8 	bl	8001884 <_Z12Kalmanfilterv>
	if(abs(OutPosition-KalP)<0.01 && KalV < 0.0005){
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <main+0x88c>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <main+0x890>)
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024e4:	eef0 7ae7 	vabs.f32	s15, s15
 80024e8:	ee17 0a90 	vmov	r0, s15
 80024ec:	f7fe f956 	bl	800079c <__aeabi_f2d>
 80024f0:	a337      	add	r3, pc, #220	; (adr r3, 80025d0 <main+0x838>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe fa09 	bl	800090c <__aeabi_dcmplt>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d050      	beq.n	80025a0 <main+0x808>
 80024fe:	4b4b      	ldr	r3, [pc, #300]	; (800262c <main+0x894>)
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	f7fe f94b 	bl	800079c <__aeabi_f2d>
 8002506:	a334      	add	r3, pc, #208	; (adr r3, 80025d8 <main+0x840>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f9fe 	bl	800090c <__aeabi_dcmplt>
 8002510:	2800      	cmp	r0, #0
 8002512:	d045      	beq.n	80025a0 <main+0x808>
		PWMOut=0;
 8002514:	4a3d      	ldr	r2, [pc, #244]	; (800260c <main+0x874>)
 8002516:	2300      	movs	r3, #0
 8002518:	8013      	strh	r3, [r2, #0]
		check=8;
 800251a:	4a45      	ldr	r2, [pc, #276]	; (8002630 <main+0x898>)
 800251c:	2308      	movs	r3, #8
 800251e:	7013      	strb	r3, [r2, #0]
 8002520:	e755      	b.n	80023ce <main+0x636>
{return _micros + htim11.Instance->CNT;}
 8002522:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002524:	189b      	adds	r3, r3, r2
	  	              timeStampSR = micros();           //set new time stamp
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <main+0x85c>)
 8002528:	6013      	str	r3, [r2, #0]
	  	              GrandStatumix();
 800252a:	f7ff fb75 	bl	8001c18 <_Z13GrandStatumixv>
	  	              flag_absenc = 1;
 800252e:	2301      	movs	r3, #1
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002530:	2102      	movs	r1, #2
 8002532:	4658      	mov	r0, fp
	  	              flag_absenc = 1;
 8002534:	f889 3000 	strb.w	r3, [r9]
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002538:	f000 fe5e 	bl	80031f8 <HAL_GPIO_ReadPin>
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <main+0x89c>)
 800253e:	7018      	strb	r0, [r3, #0]
 8002540:	e758      	b.n	80023f4 <main+0x65c>
						HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2104      	movs	r1, #4
 8002546:	4658      	mov	r0, fp
 8002548:	f000 fe5c 	bl	8003204 <HAL_GPIO_WritePin>
 800254c:	e7b0      	b.n	80024b0 <main+0x718>
		switch(flag_absenc){
 800254e:	2b01      	cmp	r3, #1
 8002550:	d02d      	beq.n	80025ae <main+0x816>
 8002552:	2b02      	cmp	r3, #2
 8002554:	f47f af56 	bne.w	8002404 <main+0x66c>
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <main+0x8a0>)
 800255a:	8819      	ldrh	r1, [r3, #0]
 800255c:	4b37      	ldr	r3, [pc, #220]	; (800263c <main+0x8a4>)
    binaryout = (grayx >> (numbit-1))&0x01;
 800255e:	2208      	movs	r2, #8
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8002560:	8019      	strh	r1, [r3, #0]
    binaryout = (grayx >> (numbit-1))&0x01;
 8002562:	f3c1 2340 	ubfx	r3, r1, #9, #1
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8002566:	fa41 f002 	asr.w	r0, r1, r2
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 800256a:	f003 0c01 	and.w	ip, r3, #1
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 800256e:	f000 0001 	and.w	r0, r0, #1
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8002572:	005b      	lsls	r3, r3, #1
        if (cp1 == cp2)
 8002574:	4560      	cmp	r0, ip
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8002576:	bf18      	it	ne
 8002578:	3301      	addne	r3, #1
    for (int i = 1; i < numbit ;i++){
 800257a:	3a01      	subs	r2, #1
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 800257c:	b29b      	uxth	r3, r3
    for (int i = 1; i < numbit ;i++){
 800257e:	d2f2      	bcs.n	8002566 <main+0x7ce>
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8002580:	f46f 722c 	mvn.w	r2, #688	; 0x2b0
 8002584:	4413      	add	r3, r2
 8002586:	b29b      	uxth	r3, r3
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <main+0x8a8>)
 800258e:	bf28      	it	cs
 8002590:	f3c3 0309 	ubfxcs	r3, r3, #0, #10
 8002594:	8013      	strh	r3, [r2, #0]
			flag_absenc = 0;
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f889 3000 	strb.w	r3, [r9]
}
 800259e:	e731      	b.n	8002404 <main+0x66c>
		PIDPosition();
 80025a0:	f7fe fe46 	bl	8001230 <_Z11PIDPositionv>
		PIDVelocity();
 80025a4:	f7fe feb0 	bl	8001308 <_Z11PIDVelocityv>
		MotDrvCytron();
 80025a8:	f7fe ff0e 	bl	80013c8 <_Z12MotDrvCytronv>
}
 80025ac:	e70f      	b.n	80023ce <main+0x636>
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <main+0x8a0>)
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	2102      	movs	r1, #2
 80025b4:	2264      	movs	r2, #100	; 0x64
 80025b6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <main+0x858>)
 80025bc:	2212      	movs	r2, #18
 80025be:	2140      	movs	r1, #64	; 0x40
 80025c0:	f001 fa40 	bl	8003a44 <HAL_I2C_Mem_Read>
			flag_absenc = 2;
 80025c4:	f04f 0302 	mov.w	r3, #2
 80025c8:	f889 3000 	strb.w	r3, [r9]
		break;
 80025cc:	e71a      	b.n	8002404 <main+0x66c>
 80025ce:	bf00      	nop
 80025d0:	47ae147b 	.word	0x47ae147b
 80025d4:	3f847ae1 	.word	0x3f847ae1
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f40624d 	.word	0x3f40624d
 80025e0:	200003fc 	.word	0x200003fc
 80025e4:	20000444 	.word	0x20000444
 80025e8:	200002fc 	.word	0x200002fc
 80025ec:	2000002c 	.word	0x2000002c
 80025f0:	200003a8 	.word	0x200003a8
 80025f4:	20000534 	.word	0x20000534
 80025f8:	20000138 	.word	0x20000138
 80025fc:	4939f76b 	.word	0x4939f76b
 8002600:	3d9d89d9 	.word	0x3d9d89d9
 8002604:	20000204 	.word	0x20000204
 8002608:	200002a4 	.word	0x200002a4
 800260c:	20000264 	.word	0x20000264
 8002610:	20000518 	.word	0x20000518
 8002614:	200002e8 	.word	0x200002e8
 8002618:	20000340 	.word	0x20000340
 800261c:	20000114 	.word	0x20000114
 8002620:	20000118 	.word	0x20000118
 8002624:	20000230 	.word	0x20000230
 8002628:	200001fc 	.word	0x200001fc
 800262c:	20000200 	.word	0x20000200
 8002630:	2000033d 	.word	0x2000033d
 8002634:	20000519 	.word	0x20000519
 8002638:	200002a0 	.word	0x200002a0
 800263c:	200001c0 	.word	0x200001c0
 8002640:	20000104 	.word	0x20000104
 8002644:	20000344 	.word	0x20000344
 8002648:	20000538 	.word	0x20000538
 800264c:	40020400 	.word	0x40020400
 8002650:	200002f0 	.word	0x200002f0

08002654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_MspInit+0x38>)
 8002658:	2100      	movs	r1, #0
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
 8002664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002666:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800266a:	9200      	str	r2, [sp, #0]
 800266c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	9101      	str	r1, [sp, #4]
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002682:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002684:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002686:	f000 ba6f 	b.w	8002b68 <HAL_NVIC_SetPriorityGrouping>
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002690:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_I2C_MspInit+0x84>)
 8002694:	6802      	ldr	r2, [r0, #0]
{
 8002696:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800269a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80026a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80026a4:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026a8:	b009      	add	sp, #36	; 0x24
 80026aa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	4d1a      	ldr	r5, [pc, #104]	; (8002718 <HAL_I2C_MspInit+0x88>)
 80026ae:	9400      	str	r4, [sp, #0]
 80026b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	481a      	ldr	r0, [pc, #104]	; (800271c <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	632b      	str	r3, [r5, #48]	; 0x30
 80026ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026c6:	2312      	movs	r3, #18
 80026c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d2:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f000 fc9c 	bl	8003014 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026dc:	9401      	str	r4, [sp, #4]
 80026de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80026e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026e4:	642b      	str	r3, [r5, #64]	; 0x40
 80026e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026ec:	4622      	mov	r2, r4
 80026ee:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026f2:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026f6:	f000 fa49 	bl	8002b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026fa:	201f      	movs	r0, #31
 80026fc:	f000 fa84 	bl	8002c08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002700:	4622      	mov	r2, r4
 8002702:	4621      	mov	r1, r4
 8002704:	2020      	movs	r0, #32
 8002706:	f000 fa41 	bl	8002b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800270a:	2020      	movs	r0, #32
 800270c:	f000 fa7c 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 8002710:	b009      	add	sp, #36	; 0x24
 8002712:	bd30      	pop	{r4, r5, pc}
 8002714:	40005400 	.word	0x40005400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8002722:	6803      	ldr	r3, [r0, #0]
{
 8002724:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002726:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002730:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002734:	9408      	str	r4, [sp, #32]
  if(htim_base->Instance==TIM2)
 8002736:	d029      	beq.n	800278c <HAL_TIM_Base_MspInit+0x6c>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002738:	4a36      	ldr	r2, [pc, #216]	; (8002814 <HAL_TIM_Base_MspInit+0xf4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 800273e:	4a36      	ldr	r2, [pc, #216]	; (8002818 <HAL_TIM_Base_MspInit+0xf8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002744:	b00a      	add	sp, #40	; 0x28
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_TIM_Base_MspInit+0xfc>)
 800274a:	9402      	str	r4, [sp, #8]
 800274c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274e:	f042 0204 	orr.w	r2, r2, #4
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	9b02      	ldr	r3, [sp, #8]
}
 800275e:	b00a      	add	sp, #40	; 0x28
 8002760:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_TIM_Base_MspInit+0xfc>)
 8002764:	9403      	str	r4, [sp, #12]
 8002766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002774:	4622      	mov	r2, r4
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002776:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002778:	4621      	mov	r1, r4
 800277a:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 800277c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800277e:	f000 fa05 	bl	8002b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002782:	201a      	movs	r0, #26
 8002784:	f000 fa40 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 8002788:	b00a      	add	sp, #40	; 0x28
 800278a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002790:	9400      	str	r4, [sp, #0]
 8002792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002794:	4e22      	ldr	r6, [pc, #136]	; (8002820 <HAL_TIM_Base_MspInit+0x100>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
 800279c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279e:	f002 0201 	and.w	r2, r2, #1
 80027a2:	9200      	str	r2, [sp, #0]
 80027a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	9401      	str	r4, [sp, #4]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80027b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027bc:	2302      	movs	r3, #2
 80027be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027c2:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c4:	2301      	movs	r3, #1
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027c6:	4817      	ldr	r0, [pc, #92]	; (8002824 <HAL_TIM_Base_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027ca:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027cc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f000 fc21 	bl	8003014 <HAL_GPIO_Init>
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80027d2:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_TIM_Base_MspInit+0x108>)
 80027d4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80027d8:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80027e8:	4630      	mov	r0, r6
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f2:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80027f6:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fa:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80027fe:	f000 fa2b 	bl	8002c58 <HAL_DMA_Init>
 8002802:	b918      	cbnz	r0, 800280c <HAL_TIM_Base_MspInit+0xec>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002804:	626e      	str	r6, [r5, #36]	; 0x24
 8002806:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8002808:	b00a      	add	sp, #40	; 0x28
 800280a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800280c:	f7fe fe98 	bl	8001540 <Error_Handler>
 8002810:	e7f8      	b.n	8002804 <HAL_TIM_Base_MspInit+0xe4>
 8002812:	bf00      	nop
 8002814:	40000800 	.word	0x40000800
 8002818:	40014800 	.word	0x40014800
 800281c:	40023800 	.word	0x40023800
 8002820:	20000348 	.word	0x20000348
 8002824:	40020000 	.word	0x40020000
 8002828:	40026088 	.word	0x40026088
 800282c:	00000000 	.word	0x00000000

08002830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002830:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_TIM_MspPostInit+0x58>)
 8002834:	6801      	ldr	r1, [r0, #0]
{
 8002836:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 800283a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002840:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002844:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 8002846:	d002      	beq.n	800284e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002848:	b009      	add	sp, #36	; 0x24
 800284a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8002856:	480d      	ldr	r0, [pc, #52]	; (800288c <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8002860:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002880 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 800286a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800286c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 800286e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002874:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8002876:	f000 fbcd 	bl	8003014 <HAL_GPIO_Init>
}
 800287a:	b009      	add	sp, #36	; 0x24
 800287c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002880:	00000040 	.word	0x00000040
 8002884:	00000002 	.word	0x00000002
 8002888:	40000800 	.word	0x40000800
 800288c:	40020400 	.word	0x40020400

08002890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002890:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_UART_MspInit+0x70>)
 8002894:	6801      	ldr	r1, [r0, #0]
{
 8002896:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800289a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80028a4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80028a6:	d001      	beq.n	80028ac <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028a8:	b008      	add	sp, #32
 80028aa:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ac:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80028b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80028b8:	6410      	str	r0, [r2, #64]	; 0x40
 80028ba:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80028bc:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	480e      	ldr	r0, [pc, #56]	; (8002904 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028d2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80028f8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028de:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028e2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f000 fb92 	bl	8003014 <HAL_GPIO_Init>
}
 80028f0:	b008      	add	sp, #32
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	f3af 8000 	nop.w
 80028f8:	0000000c 	.word	0x0000000c
 80028fc:	00000002 	.word	0x00000002
 8002900:	40004400 	.word	0x40004400
 8002904:	40020000 	.word	0x40020000

08002908 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <NMI_Handler>
 800290a:	bf00      	nop

0800290c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <HardFault_Handler>
 800290e:	bf00      	nop

08002910 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler>
 8002912:	bf00      	nop

08002914 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <BusFault_Handler>
 8002916:	bf00      	nop

08002918 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <UsageFault_Handler>
 800291a:	bf00      	nop

0800291c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <DebugMon_Handler>:
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <PendSV_Handler>:
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002928:	f000 b8fa 	b.w	8002b20 <HAL_IncTick>

0800292c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 800292c:	2004      	movs	r0, #4
 800292e:	f000 bc77 	b.w	8003220 <HAL_GPIO_EXTI_IRQHandler>
 8002932:	bf00      	nop

08002934 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <DMA1_Stream5_IRQHandler+0x8>)
 8002936:	f000 ba79 	b.w	8002e2c <HAL_DMA_IRQHandler>
 800293a:	bf00      	nop
 800293c:	20000348 	.word	0x20000348

08002940 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8002942:	f003 ba6f 	b.w	8005e24 <HAL_TIM_IRQHandler>
 8002946:	bf00      	nop
 8002948:	200003fc 	.word	0x200003fc

0800294c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800294c:	4801      	ldr	r0, [pc, #4]	; (8002954 <I2C1_EV_IRQHandler+0x8>)
 800294e:	f001 bbc9 	b.w	80040e4 <HAL_I2C_EV_IRQHandler>
 8002952:	bf00      	nop
 8002954:	200003a8 	.word	0x200003a8

08002958 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002958:	4801      	ldr	r0, [pc, #4]	; (8002960 <I2C1_ER_IRQHandler+0x8>)
 800295a:	f002 b879 	b.w	8004a50 <HAL_I2C_ER_IRQHandler>
 800295e:	bf00      	nop
 8002960:	200003a8 	.word	0x200003a8

08002964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002964:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Emer_Pin);
 8002966:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800296a:	f000 fc59 	bl	8003220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_Stop_Pin);
 800296e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002972:	f000 fc55 	bl	8003220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800297a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800297e:	f000 bc4f 	b.w	8003220 <HAL_GPIO_EXTI_IRQHandler>
 8002982:	bf00      	nop

08002984 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002984:	2001      	movs	r0, #1
 8002986:	4770      	bx	lr

08002988 <_kill>:

int _kill(int pid, int sig)
{
 8002988:	b508      	push	{r3, lr}
	errno = EINVAL;
 800298a:	f003 fc2d 	bl	80061e8 <__errno>
 800298e:	2316      	movs	r3, #22
 8002990:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	bd08      	pop	{r3, pc}

08002998 <_exit>:

void _exit (int status)
{
 8002998:	b508      	push	{r3, lr}
	errno = EINVAL;
 800299a:	f003 fc25 	bl	80061e8 <__errno>
 800299e:	2316      	movs	r3, #22
 80029a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80029a2:	e7fe      	b.n	80029a2 <_exit+0xa>

080029a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a6:	1e16      	subs	r6, r2, #0
 80029a8:	dd07      	ble.n	80029ba <_read+0x16>
 80029aa:	460c      	mov	r4, r1
 80029ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80029ae:	f3af 8000 	nop.w
 80029b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	42a5      	cmp	r5, r4
 80029b8:	d1f9      	bne.n	80029ae <_read+0xa>
	}

return len;
}
 80029ba:	4630      	mov	r0, r6
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
 80029be:	bf00      	nop

080029c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	1e16      	subs	r6, r2, #0
 80029c4:	dd07      	ble.n	80029d6 <_write+0x16>
 80029c6:	460c      	mov	r4, r1
 80029c8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80029ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80029ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	42ac      	cmp	r4, r5
 80029d4:	d1f9      	bne.n	80029ca <_write+0xa>
	}
	return len;
}
 80029d6:	4630      	mov	r0, r6
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
 80029da:	bf00      	nop

080029dc <_close>:

int _close(int file)
{
	return -1;
}
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80029e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80029ea:	2000      	movs	r0, #0
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80029f0:	2001      	movs	r0, #1
 80029f2:	4770      	bx	lr

080029f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	4770      	bx	lr

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	; (8002a2c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <_sbrk+0x38>)
 80029fe:	490d      	ldr	r1, [pc, #52]	; (8002a34 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002a00:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a02:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002a04:	b12a      	cbz	r2, 8002a12 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4410      	add	r0, r2
 8002a08:	4288      	cmp	r0, r1
 8002a0a:	d807      	bhi.n	8002a1c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002a0c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8002a0e:	4610      	mov	r0, r2
 8002a10:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <_sbrk+0x40>)
 8002a14:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002a16:	4410      	add	r0, r2
 8002a18:	4288      	cmp	r0, r1
 8002a1a:	d9f7      	bls.n	8002a0c <_sbrk+0x14>
    errno = ENOMEM;
 8002a1c:	f003 fbe4 	bl	80061e8 <__errno>
 8002a20:	230c      	movs	r3, #12
    return (void *)-1;
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002a26:	6003      	str	r3, [r0, #0]
}
 8002a28:	4610      	mov	r0, r2
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	20000544 	.word	0x20000544
 8002a30:	20020000 	.word	0x20020000
 8002a34:	00000400 	.word	0x00000400
 8002a38:	20000560 	.word	0x20000560

08002a3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <SystemInit+0x10>)
 8002a3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a56:	490e      	ldr	r1, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a6c:	4c0b      	ldr	r4, [pc, #44]	; (8002a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a7a:	f7ff ffdf 	bl	8002a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f003 fbcb 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a82:	f7ff f989 	bl	8001d98 <main>
  bx  lr    
 8002a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a90:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002a94:	0800783c 	.word	0x0800783c
  ldr r2, =_sbss
 8002a98:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002a9c:	2000055c 	.word	0x2000055c

08002aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC_IRQHandler>
	...

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_InitTick+0x3c>)
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_InitTick+0x40>)
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
{
 8002aae:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ab8:	fbb3 f0f0 	udiv	r0, r3, r0
 8002abc:	f000 f8b2 	bl	8002c24 <HAL_SYSTICK_Config>
 8002ac0:	b908      	cbnz	r0, 8002ac6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	2d0f      	cmp	r5, #15
 8002ac4:	d901      	bls.n	8002aca <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
 8002aca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	4602      	mov	r2, r0
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f85a 	bl	8002b8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_InitTick+0x44>)
 8002ada:	4620      	mov	r0, r4
 8002adc:	601d      	str	r5, [r3, #0]
}
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	2000004c 	.word	0x2000004c
 8002ae4:	20000048 	.word	0x20000048
 8002ae8:	20000050 	.word	0x20000050

08002aec <HAL_Init>:
{
 8002aec:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_Init+0x30>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002afe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b08:	2003      	movs	r0, #3
 8002b0a:	f000 f82d 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7ff ffc8 	bl	8002aa4 <HAL_InitTick>
  HAL_MspInit();
 8002b14:	f7ff fd9e 	bl	8002654 <HAL_MspInit>
}
 8002b18:	2000      	movs	r0, #0
 8002b1a:	bd08      	pop	{r3, pc}
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <HAL_IncTick+0x10>)
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_IncTick+0x14>)
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000548 	.word	0x20000548
 8002b34:	2000004c 	.word	0x2000004c

08002b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b38:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_GetTick+0x8>)
 8002b3a:	6818      	ldr	r0, [r3, #0]
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000548 	.word	0x20000548

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fff6 	bl	8002b38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002b50:	d002      	beq.n	8002b58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_Delay+0x20>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	1b43      	subs	r3, r0, r5
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	d3fa      	bcc.n	8002b58 <HAL_Delay+0x14>
  {
  }
}
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	2000004c 	.word	0x2000004c

08002b68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b6a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b7a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b82:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_NVIC_SetPriority+0x74>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b94:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b96:	f1c3 0e07 	rsb	lr, r3, #7
 8002b9a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba2:	bf28      	it	cs
 8002ba4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba8:	f1bc 0f06 	cmp.w	ip, #6
 8002bac:	d91b      	bls.n	8002be6 <HAL_NVIC_SetPriority+0x5a>
 8002bae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 3cff 	mov.w	ip, #4294967295
 8002bb4:	fa0c fc03 	lsl.w	ip, ip, r3
 8002bb8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 3cff 	mov.w	ip, #4294967295
 8002bc0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002bc4:	ea21 010c 	bic.w	r1, r1, ip
 8002bc8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002bca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	db0c      	blt.n	8002bec <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002bd6:	0109      	lsls	r1, r1, #4
 8002bd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002bdc:	b2c9      	uxtb	r1, r1
 8002bde:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002be6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be8:	4613      	mov	r3, r2
 8002bea:	e7e7      	b.n	8002bbc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_NVIC_SetPriority+0x78>)
 8002bee:	f000 000f 	and.w	r0, r0, #15
 8002bf2:	0109      	lsls	r1, r1, #4
 8002bf4:	4403      	add	r3, r0
 8002bf6:	b2c9      	uxtb	r1, r1
 8002bf8:	7619      	strb	r1, [r3, #24]
 8002bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00
 8002c04:	e000ecfc 	.word	0xe000ecfc

08002c08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	db08      	blt.n	8002c1e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0c:	0941      	lsrs	r1, r0, #5
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_NVIC_EnableIRQ+0x18>)
 8002c10:	f000 001f 	and.w	r0, r0, #31
 8002c14:	2301      	movs	r3, #1
 8002c16:	fa03 f000 	lsl.w	r0, r3, r0
 8002c1a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	3801      	subs	r0, #1
 8002c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c2a:	d210      	bcs.n	8002c4e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	4c08      	ldr	r4, [pc, #32]	; (8002c54 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002c3a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c40:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c42:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002c46:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	6119      	str	r1, [r3, #16]
 8002c4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2001      	movs	r0, #1
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ff6c 	bl	8002b38 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	d052      	beq.n	8002d0a <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c64:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002c66:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	2102      	movs	r1, #2
 8002c6a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002c6e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	4605      	mov	r5, r0
 8002c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7c:	e005      	b.n	8002c8a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7e:	f7ff ff5b 	bl	8002b38 <HAL_GetTick>
 8002c82:	1b43      	subs	r3, r0, r5
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d839      	bhi.n	8002cfc <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	07d1      	lsls	r1, r2, #31
 8002c8e:	d4f6      	bmi.n	8002c7e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c90:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002c94:	68e1      	ldr	r1, [r4, #12]
 8002c96:	4302      	orrs	r2, r0
 8002c98:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	432a      	orrs	r2, r5
 8002ca2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8002ca6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca8:	4302      	orrs	r2, r0
 8002caa:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cac:	4933      	ldr	r1, [pc, #204]	; (8002d7c <HAL_DMA_Init+0x124>)
 8002cae:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb0:	6a25      	ldr	r5, [r4, #32]
 8002cb2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cb8:	2904      	cmp	r1, #4
 8002cba:	d028      	beq.n	8002d0e <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cbe:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc0:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc4:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	4a2d      	ldr	r2, [pc, #180]	; (8002d80 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8002cca:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	3810      	subs	r0, #16
 8002cce:	fba2 5200 	umull	r5, r2, r2, r0
 8002cd2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cd4:	492b      	ldr	r1, [pc, #172]	; (8002d84 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cda:	5c89      	ldrb	r1, [r1, r2]
 8002cdc:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cde:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002ce2:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ce4:	bf88      	it	hi
 8002ce6:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce8:	223f      	movs	r2, #63	; 0x3f
 8002cea:	408a      	lsls	r2, r1
 8002cec:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf0:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cfe:	2220      	movs	r2, #32
 8002d00:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002d06:	4618      	mov	r0, r3
}
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d0a:	2001      	movs	r0, #1
}
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d0e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8002d12:	4329      	orrs	r1, r5
 8002d14:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002d16:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002d18:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8002d1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d1c:	f021 0107 	bic.w	r1, r1, #7
 8002d20:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002d22:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d26:	2d00      	cmp	r5, #0
 8002d28:	d0cd      	beq.n	8002cc6 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d2a:	b178      	cbz	r0, 8002d4c <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002d30:	d016      	beq.n	8002d60 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d32:	2a02      	cmp	r2, #2
 8002d34:	d903      	bls.n	8002d3e <HAL_DMA_Init+0xe6>
 8002d36:	2a03      	cmp	r2, #3
 8002d38:	d1c5      	bne.n	8002cc6 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	01ea      	lsls	r2, r5, #7
 8002d3c:	d5c3      	bpl.n	8002cc6 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002d48:	4618      	mov	r0, r3
}
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002d4c:	2a01      	cmp	r2, #1
 8002d4e:	d003      	beq.n	8002d58 <HAL_DMA_Init+0x100>
 8002d50:	f032 0202 	bics.w	r2, r2, #2
 8002d54:	d1b7      	bne.n	8002cc6 <HAL_DMA_Init+0x6e>
 8002d56:	e7f0      	b.n	8002d3a <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d58:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002d5c:	d1b3      	bne.n	8002cc6 <HAL_DMA_Init+0x6e>
 8002d5e:	e7ee      	b.n	8002d3e <HAL_DMA_Init+0xe6>
    switch (tmp)
 8002d60:	2a03      	cmp	r2, #3
 8002d62:	d8b0      	bhi.n	8002cc6 <HAL_DMA_Init+0x6e>
 8002d64:	a001      	add	r0, pc, #4	; (adr r0, 8002d6c <HAL_DMA_Init+0x114>)
 8002d66:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d3f 	.word	0x08002d3f
 8002d70:	08002d3b 	.word	0x08002d3b
 8002d74:	08002d3f 	.word	0x08002d3f
 8002d78:	08002d59 	.word	0x08002d59
 8002d7c:	f010803f 	.word	0xf010803f
 8002d80:	aaaaaaab 	.word	0xaaaaaaab
 8002d84:	08007750 	.word	0x08007750

08002d88 <HAL_DMA_Start_IT>:
{
 8002d88:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8002d8a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002d90:	2c01      	cmp	r4, #1
 8002d92:	d035      	beq.n	8002e00 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d94:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002d98:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d9c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8002d9e:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002da4:	2300      	movs	r3, #0
 8002da6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8002daa:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8002dac:	2002      	movs	r0, #2
}
 8002dae:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db0:	2602      	movs	r6, #2
 8002db2:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	2600      	movs	r6, #0
 8002dba:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dbc:	6826      	ldr	r6, [r4, #0]
 8002dbe:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8002dc2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002dc4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc6:	6883      	ldr	r3, [r0, #8]
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002dca:	bf0e      	itee	eq
 8002dcc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002dce:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002dd4:	bf08      	it	eq
 8002dd6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd8:	233f      	movs	r3, #63	; 0x3f
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dde:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002de2:	f043 0316 	orr.w	r3, r3, #22
 8002de6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	b11a      	cbz	r2, 8002df2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002dfa:	6023      	str	r3, [r4, #0]
}
 8002dfc:	bc70      	pop	{r4, r5, r6}
 8002dfe:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002e00:	2002      	movs	r0, #2
}
 8002e02:	bc70      	pop	{r4, r5, r6}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e08:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d003      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002e14:	2001      	movs	r0, #1
 8002e16:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002e18:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8002e26:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_DMA_IRQHandler>:
{
 8002e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e30:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e32:	4a74      	ldr	r2, [pc, #464]	; (8003004 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e34:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e36:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002e3e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	2208      	movs	r2, #8
 8002e42:	409a      	lsls	r2, r3
 8002e44:	4222      	tst	r2, r4
{
 8002e46:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e4a:	6801      	ldr	r1, [r0, #0]
 8002e4c:	680f      	ldr	r7, [r1, #0]
 8002e4e:	0778      	lsls	r0, r7, #29
 8002e50:	f100 808a 	bmi.w	8002f68 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	4222      	tst	r2, r4
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e5c:	f8d8 1000 	ldr.w	r1, [r8]
 8002e60:	6949      	ldr	r1, [r1, #20]
 8002e62:	0609      	lsls	r1, r1, #24
 8002e64:	d478      	bmi.n	8002f58 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	2204      	movs	r2, #4
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	4222      	tst	r2, r4
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e6e:	f8d8 1000 	ldr.w	r1, [r8]
 8002e72:	6809      	ldr	r1, [r1, #0]
 8002e74:	078f      	lsls	r7, r1, #30
 8002e76:	d467      	bmi.n	8002f48 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	2210      	movs	r2, #16
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	4222      	tst	r2, r4
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	f8d8 1000 	ldr.w	r1, [r8]
 8002e84:	680f      	ldr	r7, [r1, #0]
 8002e86:	0738      	lsls	r0, r7, #28
 8002e88:	d449      	bmi.n	8002f1e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	4222      	tst	r2, r4
 8002e90:	d017      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e92:	f8d8 1000 	ldr.w	r1, [r8]
 8002e96:	680c      	ldr	r4, [r1, #0]
 8002e98:	06e0      	lsls	r0, r4, #27
 8002e9a:	d512      	bpl.n	8002ec2 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8002ea2:	2a05      	cmp	r2, #5
 8002ea4:	d073      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea6:	680b      	ldr	r3, [r1, #0]
 8002ea8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eac:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eae:	f000 8090 	beq.w	8002fd2 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb2:	0319      	lsls	r1, r3, #12
 8002eb4:	f140 809b 	bpl.w	8002fee <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002eb8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002ebc:	b10b      	cbz	r3, 8002ec2 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002ec6:	b33b      	cbz	r3, 8002f18 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002ecc:	07da      	lsls	r2, r3, #31
 8002ece:	d51b      	bpl.n	8002f08 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002ed0:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed4:	494c      	ldr	r1, [pc, #304]	; (8003008 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002edc:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ede:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ee6:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e002      	b.n	8002ef2 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	07db      	lsls	r3, r3, #31
 8002ef0:	d504      	bpl.n	8002efc <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	42ab      	cmp	r3, r5
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	d9f7      	bls.n	8002eec <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8002efc:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002efe:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002f00:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002f04:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002f08:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002f0c:	b123      	cbz	r3, 8002f18 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8002f0e:	4640      	mov	r0, r8
}
 8002f10:	b002      	add	sp, #8
 8002f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8002f16:	4718      	bx	r3
}
 8002f18:	b002      	add	sp, #8
 8002f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f1e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	680a      	ldr	r2, [r1, #0]
 8002f22:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f26:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f28:	d12a      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2a:	05d7      	lsls	r7, r2, #23
 8002f2c:	d403      	bmi.n	8002f36 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2e:	680a      	ldr	r2, [r1, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002f36:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d0a5      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8002f3e:	4640      	mov	r0, r8
 8002f40:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f42:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8002f46:	e7a0      	b.n	8002e8a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f48:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f4a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002f4e:	f042 0204 	orr.w	r2, r2, #4
 8002f52:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002f56:	e78f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f58:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002f5e:	f042 0202 	orr.w	r2, r2, #2
 8002f62:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002f66:	e77e      	b.n	8002e66 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f68:	680f      	ldr	r7, [r1, #0]
 8002f6a:	f027 0704 	bic.w	r7, r7, #4
 8002f6e:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f70:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f72:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002f7e:	e769      	b.n	8002e54 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f80:	0312      	lsls	r2, r2, #12
 8002f82:	d5d8      	bpl.n	8002f36 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f84:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002f88:	2a00      	cmp	r2, #0
 8002f8a:	d1d8      	bne.n	8002f3e <HAL_DMA_IRQHandler+0x112>
 8002f8c:	e77d      	b.n	8002e8a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f8e:	680a      	ldr	r2, [r1, #0]
 8002f90:	f022 0216 	bic.w	r2, r2, #22
 8002f94:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f96:	694a      	ldr	r2, [r1, #20]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002fa2:	b352      	cbz	r2, 8002ffa <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa4:	680a      	ldr	r2, [r1, #0]
 8002fa6:	f022 0208 	bic.w	r2, r2, #8
 8002faa:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fac:	223f      	movs	r2, #63	; 0x3f
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002fb2:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8002fba:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002fc0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d0a7      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8002fc8:	4640      	mov	r0, r8
}
 8002fca:	b002      	add	sp, #8
 8002fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002fd0:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002fd6:	f47f af6f 	bne.w	8002eb8 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fda:	680a      	ldr	r2, [r1, #0]
 8002fdc:	f022 0210 	bic.w	r2, r2, #16
 8002fe0:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002fe8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8002fec:	e764      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002fee:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f47f af63 	bne.w	8002ebe <HAL_DMA_IRQHandler+0x92>
 8002ff8:	e763      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffa:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d1d0      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x178>
 8003002:	e7d3      	b.n	8002fac <HAL_DMA_IRQHandler+0x180>
 8003004:	20000048 	.word	0x20000048
 8003008:	1b4e81b5 	.word	0x1b4e81b5

0800300c <HAL_DMA_GetState>:
  return hdma->State;
 800300c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003018:	2200      	movs	r2, #0
 800301a:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301c:	4e70      	ldr	r6, [pc, #448]	; (80031e0 <HAL_GPIO_Init+0x1cc>)
{
 800301e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003020:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8003022:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	4689      	mov	r9, r1
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	3301      	adds	r3, #1
 800302c:	2b10      	cmp	r3, #16
 800302e:	f102 0202 	add.w	r2, r2, #2
 8003032:	d078      	beq.n	8003126 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8003034:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003038:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800303c:	43a1      	bics	r1, r4
 800303e:	d1f4      	bne.n	800302a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003040:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003044:	f00c 0103 	and.w	r1, ip, #3
 8003048:	1e4d      	subs	r5, r1, #1
 800304a:	2d01      	cmp	r5, #1
 800304c:	d96e      	bls.n	800312c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304e:	2903      	cmp	r1, #3
 8003050:	f040 80ae 	bne.w	80031b0 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	4091      	lsls	r1, r2
 8003056:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003058:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800305e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003062:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003064:	d0e1      	beq.n	800302a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4d5f      	ldr	r5, [pc, #380]	; (80031e4 <HAL_GPIO_Init+0x1d0>)
 8003068:	2100      	movs	r1, #0
 800306a:	9103      	str	r1, [sp, #12]
 800306c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800306e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003072:	6469      	str	r1, [r5, #68]	; 0x44
 8003074:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003076:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800307a:	9103      	str	r1, [sp, #12]
 800307c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	f023 0103 	bic.w	r1, r3, #3
 8003082:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003086:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003092:	00bf      	lsls	r7, r7, #2
 8003094:	250f      	movs	r5, #15
 8003096:	40bd      	lsls	r5, r7
 8003098:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309c:	4d52      	ldr	r5, [pc, #328]	; (80031e8 <HAL_GPIO_Init+0x1d4>)
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d017      	beq.n	80030d2 <HAL_GPIO_Init+0xbe>
 80030a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	f000 8086 	beq.w	80031b8 <HAL_GPIO_Init+0x1a4>
 80030ac:	4d4f      	ldr	r5, [pc, #316]	; (80031ec <HAL_GPIO_Init+0x1d8>)
 80030ae:	42a8      	cmp	r0, r5
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_GPIO_Init+0x1ae>
 80030b4:	4d4e      	ldr	r5, [pc, #312]	; (80031f0 <HAL_GPIO_Init+0x1dc>)
 80030b6:	42a8      	cmp	r0, r5
 80030b8:	f000 808a 	beq.w	80031d0 <HAL_GPIO_Init+0x1bc>
 80030bc:	4d4d      	ldr	r5, [pc, #308]	; (80031f4 <HAL_GPIO_Init+0x1e0>)
 80030be:	42a8      	cmp	r0, r5
 80030c0:	bf0c      	ite	eq
 80030c2:	f04f 0e04 	moveq.w	lr, #4
 80030c6:	f04f 0e07 	movne.w	lr, #7
 80030ca:	fa0e f707 	lsl.w	r7, lr, r7
 80030ce:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d2:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80030d6:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80030d8:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030dc:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80030e0:	bf0c      	ite	eq
 80030e2:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80030e4:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80030e8:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80030ea:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ec:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80030f0:	bf0c      	ite	eq
 80030f2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80030f4:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 80030f8:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 80030fa:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fc:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003100:	bf0c      	ite	eq
 8003102:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003104:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8003108:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003110:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003114:	bf0c      	ite	eq
 8003116:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003118:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311c:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800311e:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003120:	f102 0202 	add.w	r2, r2, #2
 8003124:	d186      	bne.n	8003034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003126:	b005      	add	sp, #20
 8003128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312c:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003130:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003132:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003136:	2503      	movs	r5, #3
 8003138:	fa05 fe02 	lsl.w	lr, r5, r2
 800313c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003140:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8003144:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003146:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800314c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003154:	409f      	lsls	r7, r3
 8003156:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800315a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800315c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003162:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003166:	4097      	lsls	r7, r2
 8003168:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800316e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003170:	fa01 f102 	lsl.w	r1, r1, r2
 8003174:	f47f af70 	bne.w	8003058 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8003178:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800317c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003180:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003184:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003188:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800318a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800318e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003192:	fa07 f708 	lsl.w	r7, r7, r8
 8003196:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003198:	270f      	movs	r7, #15
 800319a:	fa07 f808 	lsl.w	r8, r7, r8
 800319e:	9f00      	ldr	r7, [sp, #0]
 80031a0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a4:	9f01      	ldr	r7, [sp, #4]
 80031a6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80031aa:	f8ce 7020 	str.w	r7, [lr, #32]
 80031ae:	e753      	b.n	8003058 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b0:	2503      	movs	r5, #3
 80031b2:	4095      	lsls	r5, r2
 80031b4:	43ed      	mvns	r5, r5
 80031b6:	e7d1      	b.n	800315c <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b8:	fa0a f707 	lsl.w	r7, sl, r7
 80031bc:	ea48 0807 	orr.w	r8, r8, r7
 80031c0:	e787      	b.n	80030d2 <HAL_GPIO_Init+0xbe>
 80031c2:	f04f 0e02 	mov.w	lr, #2
 80031c6:	fa0e f707 	lsl.w	r7, lr, r7
 80031ca:	ea48 0807 	orr.w	r8, r8, r7
 80031ce:	e780      	b.n	80030d2 <HAL_GPIO_Init+0xbe>
 80031d0:	f04f 0e03 	mov.w	lr, #3
 80031d4:	fa0e f707 	lsl.w	r7, lr, r7
 80031d8:	ea48 0807 	orr.w	r8, r8, r7
 80031dc:	e779      	b.n	80030d2 <HAL_GPIO_Init+0xbe>
 80031de:	bf00      	nop
 80031e0:	40013c00 	.word	0x40013c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000

080031f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f8:	6903      	ldr	r3, [r0, #16]
 80031fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80031fc:	bf14      	ite	ne
 80031fe:	2001      	movne	r0, #1
 8003200:	2000      	moveq	r0, #0
 8003202:	4770      	bx	lr

08003204 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003204:	b902      	cbnz	r2, 8003208 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003206:	0409      	lsls	r1, r1, #16
 8003208:	6181      	str	r1, [r0, #24]
  }
}
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800320c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320e:	ea01 0203 	and.w	r2, r1, r3
 8003212:	ea21 0103 	bic.w	r1, r1, r3
 8003216:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800321a:	6181      	str	r1, [r0, #24]
}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003222:	6951      	ldr	r1, [r2, #20]
 8003224:	4201      	tst	r1, r0
 8003226:	d100      	bne.n	800322a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003228:	4770      	bx	lr
{
 800322a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800322c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800322e:	f7fe f931 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8003232:	bd08      	pop	{r3, pc}
 8003234:	40013c00 	.word	0x40013c00

08003238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323c:	6804      	ldr	r4, [r0, #0]
{
 800323e:	b083      	sub	sp, #12
 8003240:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003242:	6823      	ldr	r3, [r4, #0]
{
 8003244:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003248:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003250:	4606      	mov	r6, r0
 8003252:	468a      	mov	sl, r1
 8003254:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003258:	f1b9 3fff 	cmp.w	r9, #4294967295
 800325c:	d135      	bne.n	80032ca <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325e:	6965      	ldr	r5, [r4, #20]
 8003260:	07e8      	lsls	r0, r5, #31
 8003262:	d5fc      	bpl.n	800325e <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003264:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8003268:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800326a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800326e:	d003      	beq.n	8003278 <I2C_RequestMemoryWrite+0x40>
 8003270:	e04e      	b.n	8003310 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003272:	6961      	ldr	r1, [r4, #20]
 8003274:	054d      	lsls	r5, r1, #21
 8003276:	d45c      	bmi.n	8003332 <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003278:	6961      	ldr	r1, [r4, #20]
 800327a:	078b      	lsls	r3, r1, #30
 800327c:	d5f9      	bpl.n	8003272 <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	6963      	ldr	r3, [r4, #20]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	69a3      	ldr	r3, [r4, #24]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003290:	f040 8087 	bne.w	80033a2 <I2C_RequestMemoryWrite+0x16a>
 8003294:	6963      	ldr	r3, [r4, #20]
 8003296:	061a      	lsls	r2, r3, #24
 8003298:	d463      	bmi.n	8003362 <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329a:	6963      	ldr	r3, [r4, #20]
 800329c:	055b      	lsls	r3, r3, #21
 800329e:	d5f9      	bpl.n	8003294 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80032a8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b4:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d066      	beq.n	8003394 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
 80032c8:	e01f      	b.n	800330a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ca:	6963      	ldr	r3, [r4, #20]
 80032cc:	07d9      	lsls	r1, r3, #31
 80032ce:	d4c9      	bmi.n	8003264 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d0:	f7ff fc32 	bl	8002b38 <HAL_GetTick>
 80032d4:	eba0 000b 	sub.w	r0, r0, fp
 80032d8:	4581      	cmp	r9, r0
 80032da:	d304      	bcc.n	80032e6 <I2C_RequestMemoryWrite+0xae>
 80032dc:	f1b9 0f00 	cmp.w	r9, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e2:	6834      	ldr	r4, [r6, #0]
 80032e4:	e7b8      	b.n	8003258 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032ea:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ec:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032f0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f6:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 80032f8:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003302:	680b      	ldr	r3, [r1, #0]
 8003304:	05dc      	lsls	r4, r3, #23
 8003306:	d435      	bmi.n	8003374 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8003308:	2003      	movs	r0, #3
}
 800330a:	b003      	add	sp, #12
 800330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003310:	6963      	ldr	r3, [r4, #20]
 8003312:	0798      	lsls	r0, r3, #30
 8003314:	d4b3      	bmi.n	800327e <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	055a      	lsls	r2, r3, #21
 800331a:	d40a      	bmi.n	8003332 <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331c:	f7ff fc0c 	bl	8002b38 <HAL_GetTick>
 8003320:	eba0 000b 	sub.w	r0, r0, fp
 8003324:	4581      	cmp	r9, r0
 8003326:	d34e      	bcc.n	80033c6 <I2C_RequestMemoryWrite+0x18e>
 8003328:	f1b9 0f00 	cmp.w	r9, #0
 800332c:	d04b      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800332e:	6834      	ldr	r4, [r6, #0]
 8003330:	e79b      	b.n	800326a <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003338:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334e:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003350:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003354:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8003358:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335a:	6433      	str	r3, [r6, #64]	; 0x40
}
 800335c:	b003      	add	sp, #12
 800335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003362:	f1b8 0f01 	cmp.w	r8, #1
 8003366:	d109      	bne.n	800337c <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003368:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 800336a:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336c:	6127      	str	r7, [r4, #16]
}
 800336e:	b003      	add	sp, #12
 8003370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003378:	6433      	str	r3, [r6, #64]	; 0x40
 800337a:	e7c5      	b.n	8003308 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800337c:	0a3b      	lsrs	r3, r7, #8
 800337e:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003384:	d12e      	bne.n	80033e4 <I2C_RequestMemoryWrite+0x1ac>
 8003386:	6963      	ldr	r3, [r4, #20]
 8003388:	0619      	lsls	r1, r3, #24
 800338a:	d4ed      	bmi.n	8003368 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338c:	6963      	ldr	r3, [r4, #20]
 800338e:	055a      	lsls	r2, r3, #21
 8003390:	d5f9      	bpl.n	8003386 <I2C_RequestMemoryWrite+0x14e>
 8003392:	e785      	b.n	80032a0 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	6832      	ldr	r2, [r6, #0]
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e7b3      	b.n	800330a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a2:	6963      	ldr	r3, [r4, #20]
 80033a4:	061d      	lsls	r5, r3, #24
 80033a6:	d4dc      	bmi.n	8003362 <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a8:	6963      	ldr	r3, [r4, #20]
 80033aa:	0559      	lsls	r1, r3, #21
 80033ac:	f53f af78 	bmi.w	80032a0 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7ff fbc2 	bl	8002b38 <HAL_GetTick>
 80033b4:	eba0 000b 	sub.w	r0, r0, fp
 80033b8:	4581      	cmp	r9, r0
 80033ba:	d325      	bcc.n	8003408 <I2C_RequestMemoryWrite+0x1d0>
 80033bc:	f1b9 0f00 	cmp.w	r9, #0
 80033c0:	d022      	beq.n	8003408 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c2:	6834      	ldr	r4, [r6, #0]
 80033c4:	e762      	b.n	800328c <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033d6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	f043 0320 	orr.w	r3, r3, #32
 80033de:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80033e0:	2001      	movs	r0, #1
 80033e2:	e792      	b.n	800330a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e4:	6963      	ldr	r3, [r4, #20]
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	d4be      	bmi.n	8003368 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	0558      	lsls	r0, r3, #21
 80033ee:	f53f af57 	bmi.w	80032a0 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7ff fba1 	bl	8002b38 <HAL_GetTick>
 80033f6:	eba0 000b 	sub.w	r0, r0, fp
 80033fa:	4581      	cmp	r9, r0
 80033fc:	d304      	bcc.n	8003408 <I2C_RequestMemoryWrite+0x1d0>
 80033fe:	f1b9 0f00 	cmp.w	r9, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003404:	6834      	ldr	r4, [r6, #0]
 8003406:	e7bb      	b.n	8003380 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003408:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800340a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800340c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800340e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003412:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003418:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	f043 0320 	orr.w	r3, r3, #32
 8003420:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003422:	e74d      	b.n	80032c0 <I2C_RequestMemoryWrite+0x88>

08003424 <I2C_RequestMemoryRead>:
{
 8003424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003428:	6804      	ldr	r4, [r0, #0]
{
 800342a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003432:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	6823      	ldr	r3, [r4, #0]
{
 8003436:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800343c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003440:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003444:	6023      	str	r3, [r4, #0]
{
 8003446:	4606      	mov	r6, r0
 8003448:	468b      	mov	fp, r1
 800344a:	4617      	mov	r7, r2
 800344c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003450:	d139      	bne.n	80034c6 <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003452:	6965      	ldr	r5, [r4, #20]
 8003454:	07eb      	lsls	r3, r5, #31
 8003456:	d5fc      	bpl.n	8003452 <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003458:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	fa5f fb8b 	uxtb.w	fp, fp
 8003462:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003466:	d003      	beq.n	8003470 <I2C_RequestMemoryRead+0x4c>
 8003468:	e068      	b.n	800353c <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800346a:	6961      	ldr	r1, [r4, #20]
 800346c:	054a      	lsls	r2, r1, #21
 800346e:	d450      	bmi.n	8003512 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003470:	6961      	ldr	r1, [r4, #20]
 8003472:	0789      	lsls	r1, r1, #30
 8003474:	d5f9      	bpl.n	800346a <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	6963      	ldr	r3, [r4, #20]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	69a3      	ldr	r3, [r4, #24]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003484:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003488:	f040 80b8 	bne.w	80035fc <I2C_RequestMemoryRead+0x1d8>
 800348c:	6963      	ldr	r3, [r4, #20]
 800348e:	0618      	lsls	r0, r3, #24
 8003490:	d467      	bmi.n	8003562 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003492:	6963      	ldr	r3, [r4, #20]
 8003494:	0559      	lsls	r1, r3, #21
 8003496:	d5f9      	bpl.n	800348c <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003498:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80034a0:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80034ae:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d06c      	beq.n	8003598 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
}
 80034c0:	b003      	add	sp, #12
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c6:	6963      	ldr	r3, [r4, #20]
 80034c8:	07dd      	lsls	r5, r3, #31
 80034ca:	d4c5      	bmi.n	8003458 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7ff fb34 	bl	8002b38 <HAL_GetTick>
 80034d0:	eba0 0009 	sub.w	r0, r0, r9
 80034d4:	4582      	cmp	sl, r0
 80034d6:	d304      	bcc.n	80034e2 <I2C_RequestMemoryRead+0xbe>
 80034d8:	f1ba 0f00 	cmp.w	sl, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034de:	6834      	ldr	r4, [r6, #0]
 80034e0:	e7b4      	b.n	800344c <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034e2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80034e4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034e6:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034e8:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ec:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f2:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 80034f4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	f042 0220 	orr.w	r2, r2, #32
 80034fc:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034fe:	680b      	ldr	r3, [r1, #0]
 8003500:	05dc      	lsls	r4, r3, #23
 8003502:	d502      	bpl.n	800350a <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003508:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 800350a:	2003      	movs	r0, #3
}
 800350c:	b003      	add	sp, #12
 800350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003518:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003522:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352e:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003530:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003534:	f043 0304 	orr.w	r3, r3, #4
 8003538:	6433      	str	r3, [r6, #64]	; 0x40
 800353a:	e7c0      	b.n	80034be <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800353c:	6963      	ldr	r3, [r4, #20]
 800353e:	079b      	lsls	r3, r3, #30
 8003540:	d499      	bmi.n	8003476 <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003542:	6963      	ldr	r3, [r4, #20]
 8003544:	0558      	lsls	r0, r3, #21
 8003546:	d4e4      	bmi.n	8003512 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7ff faf6 	bl	8002b38 <HAL_GetTick>
 800354c:	eba0 0009 	sub.w	r0, r0, r9
 8003550:	4582      	cmp	sl, r0
 8003552:	f0c0 808b 	bcc.w	800366c <I2C_RequestMemoryRead+0x248>
 8003556:	f1ba 0f00 	cmp.w	sl, #0
 800355a:	f000 8087 	beq.w	800366c <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355e:	6834      	ldr	r4, [r6, #0]
 8003560:	e77f      	b.n	8003462 <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003562:	f1b8 0f01 	cmp.w	r8, #1
 8003566:	d10b      	bne.n	8003580 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003568:	b2ff      	uxtb	r7, r7
 800356a:	6127      	str	r7, [r4, #16]
 800356c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003570:	d16a      	bne.n	8003648 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003572:	6963      	ldr	r3, [r4, #20]
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	d416      	bmi.n	80035a6 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003578:	6963      	ldr	r3, [r4, #20]
 800357a:	055f      	lsls	r7, r3, #21
 800357c:	d5f9      	bpl.n	8003572 <I2C_RequestMemoryRead+0x14e>
 800357e:	e78b      	b.n	8003498 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003580:	0a3b      	lsrs	r3, r7, #8
 8003582:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003584:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003588:	d17f      	bne.n	800368a <I2C_RequestMemoryRead+0x266>
 800358a:	6963      	ldr	r3, [r4, #20]
 800358c:	061d      	lsls	r5, r3, #24
 800358e:	d4eb      	bmi.n	8003568 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003590:	6963      	ldr	r3, [r4, #20]
 8003592:	0558      	lsls	r0, r3, #21
 8003594:	d5f9      	bpl.n	800358a <I2C_RequestMemoryRead+0x166>
 8003596:	e77f      	b.n	8003498 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	6832      	ldr	r2, [r6, #0]
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e78c      	b.n	80034c0 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80035ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80035b2:	d113      	bne.n	80035dc <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b4:	6963      	ldr	r3, [r4, #20]
 80035b6:	07d8      	lsls	r0, r3, #31
 80035b8:	d5fc      	bpl.n	80035b4 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035ba:	f04b 0301 	orr.w	r3, fp, #1
 80035be:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80035c0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80035c4:	d003      	beq.n	80035ce <I2C_RequestMemoryRead+0x1aa>
 80035c6:	e02b      	b.n	8003620 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c8:	6963      	ldr	r3, [r4, #20]
 80035ca:	055b      	lsls	r3, r3, #21
 80035cc:	d4a1      	bmi.n	8003512 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ce:	6963      	ldr	r3, [r4, #20]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	f013 0302 	ands.w	r3, r3, #2
 80035d6:	d1f7      	bne.n	80035c8 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 80035d8:	4618      	mov	r0, r3
 80035da:	e771      	b.n	80034c0 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035dc:	6963      	ldr	r3, [r4, #20]
 80035de:	07d9      	lsls	r1, r3, #31
 80035e0:	d4eb      	bmi.n	80035ba <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7ff faa9 	bl	8002b38 <HAL_GetTick>
 80035e6:	eba0 0009 	sub.w	r0, r0, r9
 80035ea:	4582      	cmp	sl, r0
 80035ec:	f4ff af79 	bcc.w	80034e2 <I2C_RequestMemoryRead+0xbe>
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	f43f af75 	beq.w	80034e2 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f8:	6834      	ldr	r4, [r6, #0]
 80035fa:	e7d8      	b.n	80035ae <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fc:	6963      	ldr	r3, [r4, #20]
 80035fe:	061a      	lsls	r2, r3, #24
 8003600:	d4af      	bmi.n	8003562 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003602:	6963      	ldr	r3, [r4, #20]
 8003604:	055d      	lsls	r5, r3, #21
 8003606:	f53f af47 	bmi.w	8003498 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7ff fa95 	bl	8002b38 <HAL_GetTick>
 800360e:	eba0 0009 	sub.w	r0, r0, r9
 8003612:	4582      	cmp	sl, r0
 8003614:	d34c      	bcc.n	80036b0 <I2C_RequestMemoryRead+0x28c>
 8003616:	f1ba 0f00 	cmp.w	sl, #0
 800361a:	d049      	beq.n	80036b0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	6834      	ldr	r4, [r6, #0]
 800361e:	e731      	b.n	8003484 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003620:	6963      	ldr	r3, [r4, #20]
 8003622:	43db      	mvns	r3, r3
 8003624:	f013 0302 	ands.w	r3, r3, #2
 8003628:	d0d6      	beq.n	80035d8 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362a:	6963      	ldr	r3, [r4, #20]
 800362c:	055a      	lsls	r2, r3, #21
 800362e:	f53f af70 	bmi.w	8003512 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7ff fa81 	bl	8002b38 <HAL_GetTick>
 8003636:	eba0 0009 	sub.w	r0, r0, r9
 800363a:	4582      	cmp	sl, r0
 800363c:	d316      	bcc.n	800366c <I2C_RequestMemoryRead+0x248>
 800363e:	f1ba 0f00 	cmp.w	sl, #0
 8003642:	d013      	beq.n	800366c <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003644:	6834      	ldr	r4, [r6, #0]
 8003646:	e7bb      	b.n	80035c0 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003648:	6963      	ldr	r3, [r4, #20]
 800364a:	061d      	lsls	r5, r3, #24
 800364c:	d4ab      	bmi.n	80035a6 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364e:	6963      	ldr	r3, [r4, #20]
 8003650:	055a      	lsls	r2, r3, #21
 8003652:	f53f af21 	bmi.w	8003498 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7ff fa6f 	bl	8002b38 <HAL_GetTick>
 800365a:	eba0 0009 	sub.w	r0, r0, r9
 800365e:	4582      	cmp	sl, r0
 8003660:	d326      	bcc.n	80036b0 <I2C_RequestMemoryRead+0x28c>
 8003662:	f1ba 0f00 	cmp.w	sl, #0
 8003666:	d023      	beq.n	80036b0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	6834      	ldr	r4, [r6, #0]
 800366a:	e77f      	b.n	800356c <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003670:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800367c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	f043 0320 	orr.w	r3, r3, #32
 8003684:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003686:	2001      	movs	r0, #1
 8003688:	e71a      	b.n	80034c0 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368a:	6963      	ldr	r3, [r4, #20]
 800368c:	0619      	lsls	r1, r3, #24
 800368e:	f53f af6b 	bmi.w	8003568 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003692:	6963      	ldr	r3, [r4, #20]
 8003694:	055b      	lsls	r3, r3, #21
 8003696:	f53f aeff 	bmi.w	8003498 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7ff fa4d 	bl	8002b38 <HAL_GetTick>
 800369e:	eba0 0009 	sub.w	r0, r0, r9
 80036a2:	4582      	cmp	sl, r0
 80036a4:	d304      	bcc.n	80036b0 <I2C_RequestMemoryRead+0x28c>
 80036a6:	f1ba 0f00 	cmp.w	sl, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ac:	6834      	ldr	r4, [r6, #0]
 80036ae:	e769      	b.n	8003584 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80036b2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036b6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ba:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036be:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80036c0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	f043 0320 	orr.w	r3, r3, #32
 80036c8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80036ca:	e6f5      	b.n	80034b8 <I2C_RequestMemoryRead+0x94>

080036cc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f000 80b9 	beq.w	8003844 <HAL_I2C_Init+0x178>
{
 80036d2:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036d8:	4604      	mov	r4, r0
 80036da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8098 	beq.w	8003814 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 80036e4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003702:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003704:	f001 fd22 	bl	800514c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	494f      	ldr	r1, [pc, #316]	; (8003848 <HAL_I2C_Init+0x17c>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d84f      	bhi.n	80037b0 <HAL_I2C_Init+0xe4>
 8003710:	4a4e      	ldr	r2, [pc, #312]	; (800384c <HAL_I2C_Init+0x180>)
 8003712:	4290      	cmp	r0, r2
 8003714:	d97c      	bls.n	8003810 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003716:	4d4e      	ldr	r5, [pc, #312]	; (8003850 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003718:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800371a:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371e:	1e43      	subs	r3, r0, #1
 8003720:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6850      	ldr	r0, [r2, #4]
 8003728:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800372c:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003730:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003732:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003734:	f101 0c01 	add.w	ip, r1, #1
 8003738:	6a11      	ldr	r1, [r2, #32]
 800373a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800373e:	ea41 010c 	orr.w	r1, r1, ip
 8003742:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003744:	69d1      	ldr	r1, [r2, #28]
 8003746:	f640 7efc 	movw	lr, #4092	; 0xffc
 800374a:	3301      	adds	r3, #1
 800374c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003750:	ea13 0f0e 	tst.w	r3, lr
 8003754:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003758:	d161      	bne.n	800381e <HAL_I2C_Init+0x152>
 800375a:	2304      	movs	r3, #4
 800375c:	430b      	orrs	r3, r1
 800375e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003760:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	4303      	orrs	r3, r0
 8003768:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003770:	6891      	ldr	r1, [r2, #8]
 8003772:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003776:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800377a:	4303      	orrs	r3, r0
 800377c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003788:	68d1      	ldr	r1, [r2, #12]
 800378a:	4303      	orrs	r3, r0
 800378c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003790:	430b      	orrs	r3, r1
 8003792:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003794:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003796:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8003798:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800379c:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800379e:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80037ac:	4618      	mov	r0, r3
}
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <HAL_I2C_Init+0x188>)
 80037b2:	4290      	cmp	r0, r2
 80037b4:	d92c      	bls.n	8003810 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80037b6:	4d26      	ldr	r5, [pc, #152]	; (8003850 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b8:	4e27      	ldr	r6, [pc, #156]	; (8003858 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80037ba:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	6855      	ldr	r5, [r2, #4]
 80037c2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037c6:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80037ca:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80037cc:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d0:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80037d4:	fb05 f101 	mul.w	r1, r5, r1
 80037d8:	fba6 5101 	umull	r5, r1, r6, r1
 80037dc:	6a15      	ldr	r5, [r2, #32]
 80037de:	0989      	lsrs	r1, r1, #6
 80037e0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037e4:	3101      	adds	r1, #1
 80037e6:	4329      	orrs	r1, r5
 80037e8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ea:	69d1      	ldr	r1, [r2, #28]
 80037ec:	68a5      	ldr	r5, [r4, #8]
 80037ee:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80037f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80037f6:	b9ad      	cbnz	r5, 8003824 <HAL_I2C_Init+0x158>
 80037f8:	3801      	subs	r0, #1
 80037fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	b1d3      	cbz	r3, 8003840 <HAL_I2C_Init+0x174>
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	e7a5      	b.n	800375c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003810:	2001      	movs	r0, #1
}
 8003812:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003814:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003818:	f7fe ff3a 	bl	8002690 <HAL_I2C_MspInit>
 800381c:	e762      	b.n	80036e4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	e79b      	b.n	800375c <HAL_I2C_Init+0x90>
 8003824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003828:	3801      	subs	r0, #1
 800382a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	b113      	cbz	r3, 8003840 <HAL_I2C_Init+0x174>
 800383a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383e:	e78d      	b.n	800375c <HAL_I2C_Init+0x90>
 8003840:	2301      	movs	r3, #1
 8003842:	e78b      	b.n	800375c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003844:	2001      	movs	r0, #1
}
 8003846:	4770      	bx	lr
 8003848:	000186a0 	.word	0x000186a0
 800384c:	001e847f 	.word	0x001e847f
 8003850:	431bde83 	.word	0x431bde83
 8003854:	003d08ff 	.word	0x003d08ff
 8003858:	10624dd3 	.word	0x10624dd3

0800385c <HAL_I2C_Mem_Write>:
{
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	b083      	sub	sp, #12
 8003864:	4699      	mov	r9, r3
 8003866:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800386a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800386c:	460f      	mov	r7, r1
 800386e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff f962 	bl	8002b38 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003874:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003878:	2b20      	cmp	r3, #32
 800387a:	d004      	beq.n	8003886 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 800387c:	2702      	movs	r7, #2
}
 800387e:	4638      	mov	r0, r7
 8003880:	b003      	add	sp, #12
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003886:	4605      	mov	r5, r0
 8003888:	e005      	b.n	8003896 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7ff f955 	bl	8002b38 <HAL_GetTick>
 800388e:	1b40      	subs	r0, r0, r5
 8003890:	2819      	cmp	r0, #25
 8003892:	f200 80aa 	bhi.w	80039ea <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	6983      	ldr	r3, [r0, #24]
 800389a:	ea6f 0c03 	mvn.w	ip, r3
 800389e:	f01c 0b02 	ands.w	fp, ip, #2
 80038a2:	d0f2      	beq.n	800388a <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80038a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d0e7      	beq.n	800387c <HAL_I2C_Mem_Write+0x20>
 80038ac:	2301      	movs	r3, #1
 80038ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b2:	6803      	ldr	r3, [r0, #0]
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d571      	bpl.n	800399c <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038b8:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ba:	6807      	ldr	r7, [r0, #0]
 80038bc:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80038c0:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80038c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038c4:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038c6:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c8:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d0:	2040      	movs	r0, #64	; 0x40
 80038d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d6:	2000      	movs	r0, #0
 80038d8:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80038da:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038de:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80038e0:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e2:	4857      	ldr	r0, [pc, #348]	; (8003a40 <HAL_I2C_Mem_Write+0x1e4>)
 80038e4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e6:	464b      	mov	r3, r9
 80038e8:	4642      	mov	r2, r8
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff fca4 	bl	8003238 <I2C_RequestMemoryWrite>
 80038f0:	4607      	mov	r7, r0
 80038f2:	b9f8      	cbnz	r0, 8003934 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 80038f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80a0 	beq.w	8003a3c <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	1c72      	adds	r2, r6, #1
 8003900:	d158      	bne.n	80039b4 <HAL_I2C_Mem_Write+0x158>
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	0610      	lsls	r0, r2, #24
 8003906:	d41a      	bmi.n	800393e <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	0551      	lsls	r1, r2, #21
 800390c:	d5f9      	bpl.n	8003902 <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003918:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003922:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003924:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003930:	2b04      	cmp	r3, #4
 8003932:	d038      	beq.n	80039a6 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8003934:	2701      	movs	r7, #1
}
 8003936:	4638      	mov	r0, r7
 8003938:	b003      	add	sp, #12
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003942:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003946:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8003948:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003950:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003952:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003954:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003956:	3a01      	subs	r2, #1
 8003958:	b292      	uxth	r2, r2
 800395a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800395c:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395e:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8003960:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003962:	0740      	lsls	r0, r0, #29
 8003964:	d517      	bpl.n	8003996 <HAL_I2C_Mem_Write+0x13a>
 8003966:	b942      	cbnz	r2, 800397a <HAL_I2C_Mem_Write+0x11e>
 8003968:	1c72      	adds	r2, r6, #1
 800396a:	d159      	bne.n	8003a20 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	0750      	lsls	r0, r2, #29
 8003970:	d449      	bmi.n	8003a06 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	0551      	lsls	r1, r2, #21
 8003976:	d5f9      	bpl.n	800396c <HAL_I2C_Mem_Write+0x110>
 8003978:	e7c9      	b.n	800390e <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800397e:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8003980:	f10c 0102 	add.w	r1, ip, #2
 8003984:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003986:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003988:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 800398c:	3901      	subs	r1, #1
        hi2c->XferSize--;
 800398e:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8003990:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8003992:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003994:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003996:	2a00      	cmp	r2, #0
 8003998:	d1b1      	bne.n	80038fe <HAL_I2C_Mem_Write+0xa2>
 800399a:	e7e5      	b.n	8003968 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6003      	str	r3, [r0, #0]
 80039a4:	e788      	b.n	80038b8 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80039ae:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e764      	b.n	800387e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	0612      	lsls	r2, r2, #24
 80039b8:	d4c1      	bmi.n	800393e <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	0551      	lsls	r1, r2, #21
 80039be:	d4a6      	bmi.n	800390e <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7ff f8ba 	bl	8002b38 <HAL_GetTick>
 80039c4:	1b40      	subs	r0, r0, r5
 80039c6:	4286      	cmp	r6, r0
 80039c8:	d301      	bcc.n	80039ce <HAL_I2C_Mem_Write+0x172>
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d196      	bne.n	80038fc <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039ce:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039d2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039de:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80039e8:	e7a1      	b.n	800392e <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ea:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039ec:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039f4:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039fa:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	f043 0320 	orr.w	r3, r3, #32
 8003a02:	6423      	str	r3, [r4, #64]	; 0x40
 8003a04:	e73a      	b.n	800387c <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a06:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003a16:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8003a1e:	e72e      	b.n	800387e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	0752      	lsls	r2, r2, #29
 8003a24:	d4ef      	bmi.n	8003a06 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	0551      	lsls	r1, r2, #21
 8003a2a:	f53f af70 	bmi.w	800390e <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7ff f883 	bl	8002b38 <HAL_GetTick>
 8003a32:	1b40      	subs	r0, r0, r5
 8003a34:	4286      	cmp	r6, r0
 8003a36:	d3ca      	bcc.n	80039ce <HAL_I2C_Mem_Write+0x172>
 8003a38:	2e00      	cmp	r6, #0
 8003a3a:	d0c8      	beq.n	80039ce <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	e793      	b.n	8003968 <HAL_I2C_Mem_Write+0x10c>
 8003a40:	ffff0000 	.word	0xffff0000

08003a44 <HAL_I2C_Mem_Read>:
{
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	4604      	mov	r4, r0
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8003a52:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003a54:	460f      	mov	r7, r1
 8003a56:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff f86e 	bl	8002b38 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d004      	beq.n	8003a6e <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8003a64:	2702      	movs	r7, #2
}
 8003a66:	4638      	mov	r0, r7
 8003a68:	b007      	add	sp, #28
 8003a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6e:	4606      	mov	r6, r0
 8003a70:	e005      	b.n	8003a7e <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7ff f861 	bl	8002b38 <HAL_GetTick>
 8003a76:	1b80      	subs	r0, r0, r6
 8003a78:	2819      	cmp	r0, #25
 8003a7a:	f200 80d2 	bhi.w	8003c22 <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7e:	f8d4 c000 	ldr.w	ip, [r4]
 8003a82:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8003a86:	43c0      	mvns	r0, r0
 8003a88:	f010 0b02 	ands.w	fp, r0, #2
 8003a8c:	d0f1      	beq.n	8003a72 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8003a8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d0e6      	beq.n	8003a64 <HAL_I2C_Mem_Read+0x20>
 8003a96:	2301      	movs	r3, #1
 8003a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a9c:	f8dc 3000 	ldr.w	r3, [ip]
 8003aa0:	07d9      	lsls	r1, r3, #31
 8003aa2:	d537      	bpl.n	8003b14 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa4:	f8dc 0000 	ldr.w	r0, [ip]
 8003aa8:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003aac:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8003ab0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003ab2:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ab4:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab6:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aba:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003abe:	2040      	movs	r0, #64	; 0x40
 8003ac0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003ac8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003acc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003ace:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad0:	4893      	ldr	r0, [pc, #588]	; (8003d20 <HAL_I2C_Mem_Read+0x2dc>)
 8003ad2:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad4:	4639      	mov	r1, r7
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	4642      	mov	r2, r8
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff fca2 	bl	8003424 <I2C_RequestMemoryRead>
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	f040 80ab 	bne.w	8003c3e <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8003ae8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003aea:	b9d2      	cbnz	r2, 8003b22 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	9002      	str	r0, [sp, #8]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	9202      	str	r2, [sp, #8]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	2220      	movs	r2, #32
 8003b06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003b12:	e7a8      	b.n	8003a66 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8003b14:	f8dc 3000 	ldr.w	r3, [ip]
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8cc 3000 	str.w	r3, [ip]
 8003b20:	e7c0      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8003b22:	2a01      	cmp	r2, #1
 8003b24:	f000 812c 	beq.w	8003d80 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8003b28:	2a02      	cmp	r2, #2
 8003b2a:	f000 80bd 	beq.w	8003ca8 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	9005      	str	r0, [sp, #20]
 8003b32:	6959      	ldr	r1, [r3, #20]
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	9105      	str	r1, [sp, #20]
 8003b3a:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8003b3c:	2a03      	cmp	r2, #3
 8003b3e:	d849      	bhi.n	8003bd4 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8003b40:	2a01      	cmp	r2, #1
 8003b42:	f000 80eb 	beq.w	8003d1c <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8003b46:	2a02      	cmp	r2, #2
 8003b48:	f000 8089 	beq.w	8003c5e <HAL_I2C_Mem_Read+0x21a>
 8003b4c:	1c69      	adds	r1, r5, #1
 8003b4e:	f040 80bb 	bne.w	8003cc8 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	0752      	lsls	r2, r2, #29
 8003b56:	d5fc      	bpl.n	8003b52 <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b6c:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003b6e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003b70:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003b72:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003b74:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b76:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b78:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003b7a:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	f040 80af 	bne.w	8003ce0 <HAL_I2C_Mem_Read+0x29c>
 8003b82:	6953      	ldr	r3, [r2, #20]
 8003b84:	075b      	lsls	r3, r3, #29
 8003b86:	d5fc      	bpl.n	8003b82 <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b90:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	6913      	ldr	r3, [r2, #16]
 8003b94:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003b98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8003ba6:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8003ba8:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8003bac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003bae:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb2:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8003bb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003bb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003bba:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003bbc:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003bbe:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003bc0:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003bc2:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003bc4:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003bc6:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d099      	beq.n	8003b02 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8003bce:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd0:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8003bd2:	d9b5      	bls.n	8003b40 <HAL_I2C_Mem_Read+0xfc>
 8003bd4:	b95d      	cbnz	r5, 8003bee <HAL_I2C_Mem_Read+0x1aa>
 8003bd6:	e0c5      	b.n	8003d64 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	06d0      	lsls	r0, r2, #27
 8003bdc:	f100 80b2 	bmi.w	8003d44 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be0:	f7fe ffaa 	bl	8002b38 <HAL_GetTick>
 8003be4:	1b80      	subs	r0, r0, r6
 8003be6:	4285      	cmp	r5, r0
 8003be8:	f0c0 8086 	bcc.w	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	0652      	lsls	r2, r2, #25
 8003bf2:	d5f1      	bpl.n	8003bd8 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8003bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bfc:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8003bfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c08:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003c0e:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c12:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8003c14:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003c16:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c1a:	d5d6      	bpl.n	8003bca <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	6903      	ldr	r3, [r0, #16]
 8003c1e:	704b      	strb	r3, [r1, #1]
 8003c20:	e036      	b.n	8003c90 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c22:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c24:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c2c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c32:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	6423      	str	r3, [r4, #64]	; 0x40
 8003c3c:	e712      	b.n	8003a64 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8003c3e:	2701      	movs	r7, #1
}
 8003c40:	4638      	mov	r0, r7
 8003c42:	b007      	add	sp, #28
 8003c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	0750      	lsls	r0, r2, #29
 8003c4c:	d40c      	bmi.n	8003c68 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe ff73 	bl	8002b38 <HAL_GetTick>
 8003c52:	1b80      	subs	r0, r0, r6
 8003c54:	4285      	cmp	r5, r0
 8003c56:	d34f      	bcc.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
 8003c58:	2d00      	cmp	r5, #0
 8003c5a:	d04d      	beq.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	1c69      	adds	r1, r5, #1
 8003c60:	d1f2      	bne.n	8003c48 <HAL_I2C_Mem_Read+0x204>
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	0752      	lsls	r2, r2, #29
 8003c66:	d5fc      	bpl.n	8003c62 <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c74:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003c76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003c78:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003c80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c86:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003c88:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8003c8c:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003c94:	3301      	adds	r3, #1
 8003c96:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003c9a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003c9c:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003c9e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003ca0:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8003ca2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ca4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003ca6:	e790      	b.n	8003bca <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003cb0:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003cb8:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	9004      	str	r0, [sp, #16]
 8003cbc:	6959      	ldr	r1, [r3, #20]
 8003cbe:	9104      	str	r1, [sp, #16]
 8003cc0:	6999      	ldr	r1, [r3, #24]
 8003cc2:	9104      	str	r1, [sp, #16]
 8003cc4:	9904      	ldr	r1, [sp, #16]
 8003cc6:	e739      	b.n	8003b3c <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	0750      	lsls	r0, r2, #29
 8003ccc:	f53f af44 	bmi.w	8003b58 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fe ff32 	bl	8002b38 <HAL_GetTick>
 8003cd4:	1b80      	subs	r0, r0, r6
 8003cd6:	4285      	cmp	r5, r0
 8003cd8:	d30e      	bcc.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
 8003cda:	b16d      	cbz	r5, 8003cf8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	e735      	b.n	8003b4c <HAL_I2C_Mem_Read+0x108>
 8003ce0:	6953      	ldr	r3, [r2, #20]
 8003ce2:	0758      	lsls	r0, r3, #29
 8003ce4:	f53f af50 	bmi.w	8003b88 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce8:	f7fe ff26 	bl	8002b38 <HAL_GetTick>
 8003cec:	1b80      	subs	r0, r0, r6
 8003cee:	4285      	cmp	r5, r0
 8003cf0:	d302      	bcc.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	f47f af41 	bne.w	8003b7a <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cfa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cfc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d02:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003d0c:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	f043 0320 	orr.w	r3, r3, #32
}
 8003d12:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003d16:	b007      	add	sp, #28
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1c:	b95d      	cbnz	r5, 8003d36 <HAL_I2C_Mem_Read+0x2f2>
 8003d1e:	e02b      	b.n	8003d78 <HAL_I2C_Mem_Read+0x334>
 8003d20:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	06d2      	lsls	r2, r2, #27
 8003d28:	d40c      	bmi.n	8003d44 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fe ff05 	bl	8002b38 <HAL_GetTick>
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	4285      	cmp	r5, r0
 8003d32:	d3e1      	bcc.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	0651      	lsls	r1, r2, #25
 8003d3a:	d5f3      	bpl.n	8003d24 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d40:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d42:	e7a5      	b.n	8003c90 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d44:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d46:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4a:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d5a:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003d60:	2701      	movs	r7, #1
 8003d62:	e680      	b.n	8003a66 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	0652      	lsls	r2, r2, #25
 8003d68:	f53f af44 	bmi.w	8003bf4 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	06d1      	lsls	r1, r2, #27
 8003d70:	d4e8      	bmi.n	8003d44 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe fee1 	bl	8002b38 <HAL_GetTick>
 8003d76:	e7bf      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	0650      	lsls	r0, r2, #25
 8003d7c:	d5f6      	bpl.n	8003d6c <HAL_I2C_Mem_Read+0x328>
 8003d7e:	e7dd      	b.n	8003d3c <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d88:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	9003      	str	r0, [sp, #12]
 8003d8c:	6959      	ldr	r1, [r3, #20]
 8003d8e:	9103      	str	r1, [sp, #12]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	9103      	str	r1, [sp, #12]
 8003d94:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003d9c:	6019      	str	r1, [r3, #0]
 8003d9e:	e6cd      	b.n	8003b3c <HAL_I2C_Mem_Read+0xf8>

08003da0 <HAL_I2C_MasterTxCpltCallback>:
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <HAL_I2C_MasterRxCpltCallback>:
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_I2C_SlaveTxCpltCallback>:
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_I2C_SlaveRxCpltCallback>:
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <HAL_I2C_AddrCallback>:
}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop

08003db4 <HAL_I2C_ListenCpltCallback>:
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <HAL_I2C_MemTxCpltCallback>:
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8003dc0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003dc2:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003dc4:	b959      	cbnz	r1, 8003dde <I2C_MemoryTransmit_TXE_BTF+0x22>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dc8:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dca:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dcc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	d00d      	beq.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x30>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003dd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003dd4:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8003dd6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003dd8:	3201      	adds	r2, #1
 8003dda:	6502      	str	r2, [r0, #80]	; 0x50
 8003ddc:	4770      	bx	lr
  else if (hi2c->EventCount == 1U)
 8003dde:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003de0:	2901      	cmp	r1, #1
 8003de2:	d009      	beq.n	8003df8 <I2C_MemoryTransmit_TXE_BTF+0x3c>
  else if (hi2c->EventCount == 2U)
 8003de4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003de6:	2902      	cmp	r1, #2
 8003de8:	d00e      	beq.n	8003e08 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 8003dea:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8003df0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003df2:	3202      	adds	r2, #2
 8003df4:	6502      	str	r2, [r0, #80]	; 0x50
 8003df6:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003df8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003dfa:	6801      	ldr	r1, [r0, #0]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8003e00:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e02:	3201      	adds	r2, #1
 8003e04:	6502      	str	r2, [r0, #80]	; 0x50
 8003e06:	4770      	bx	lr
 8003e08:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e0a:	2a22      	cmp	r2, #34	; 0x22
 8003e0c:	d01f      	beq.n	8003e4e <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e0e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003e10:	b289      	uxth	r1, r1
 8003e12:	b9c1      	cbnz	r1, 8003e46 <I2C_MemoryTransmit_TXE_BTF+0x8a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e14:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003e16:	b289      	uxth	r1, r1
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d1e6      	bne.n	8003dea <I2C_MemoryTransmit_TXE_BTF+0x2e>
 8003e1c:	2a21      	cmp	r2, #33	; 0x21
 8003e1e:	d1e4      	bne.n	8003dea <I2C_MemoryTransmit_TXE_BTF+0x2e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e20:	6802      	ldr	r2, [r0, #0]
{
 8003e22:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e24:	6854      	ldr	r4, [r2, #4]
 8003e26:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003e2a:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	6814      	ldr	r4, [r2, #0]
 8003e2e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8003e32:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e40:	f7ff ffba 	bl	8003db8 <HAL_I2C_MemTxCpltCallback>
}
 8003e44:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e46:	2a21      	cmp	r2, #33	; 0x21
 8003e48:	d00a      	beq.n	8003e60 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e4e:	6801      	ldr	r1, [r0, #0]
 8003e50:	680a      	ldr	r2, [r1, #0]
 8003e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e56:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8003e58:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e5a:	3201      	adds	r2, #1
 8003e5c:	6502      	str	r2, [r0, #80]	; 0x50
 8003e5e:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e60:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003e62:	6802      	ldr	r2, [r0, #0]
 8003e64:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003e68:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003e6a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003e6c:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	b292      	uxth	r2, r2
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <HAL_I2C_MemRxCpltCallback>:
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <HAL_I2C_ErrorCallback>:
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <HAL_I2C_AbortCpltCallback>:
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop

08003e84 <I2C_DMAAbort>:
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e86:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <I2C_DMAAbort+0xec>)
 8003e88:	493a      	ldr	r1, [pc, #232]	; (8003f74 <I2C_DMAAbort+0xf0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003e8e:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e90:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 8003e92:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e94:	fba1 1303 	umull	r1, r3, r1, r3
  __IO uint32_t count = 0U;
 8003e98:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e9a:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e9c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ea0:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ea6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eaa:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	e005      	b.n	8003ebc <I2C_DMAAbort+0x38>
    count--;
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	059b      	lsls	r3, r3, #22
 8003eba:	d506      	bpl.n	8003eca <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f6      	bne.n	8003eb0 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ec4:	f043 0320 	orr.w	r3, r3, #32
 8003ec8:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003eca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ecc:	b34c      	cbz	r4, 8003f22 <I2C_DMAAbort+0x9e>
  if (hi2c->hdmarx != NULL)
 8003ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8003ed4:	b1f3      	cbz	r3, 8003f14 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed6:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ed8:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003ede:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8003ee0:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ee2:	6525      	str	r5, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	651c      	str	r4, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8003ee8:	6813      	ldr	r3, [r2, #0]
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ef0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ef4:	2b60      	cmp	r3, #96	; 0x60
 8003ef6:	d02a      	beq.n	8003f4e <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ef8:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003efc:	2928      	cmp	r1, #40	; 0x28
 8003efe:	d019      	beq.n	8003f34 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f0c:	f7ff ffb6 	bl	8003e7c <HAL_I2C_ErrorCallback>
}
 8003f10:	b002      	add	sp, #8
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	6815      	ldr	r5, [r2, #0]
 8003f16:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003f1a:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003f1c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f1e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8003f20:	e7e2      	b.n	8003ee8 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8003f22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f24:	b1f3      	cbz	r3, 8003f64 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f28:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003f2e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003f30:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003f32:	e7d7      	b.n	8003ee4 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3c:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f44:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f48:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003f4c:	e7de      	b.n	8003f0c <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f4e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f50:	2220      	movs	r2, #32
 8003f52:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f56:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f5a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f5c:	f7ff ff90 	bl	8003e80 <HAL_I2C_AbortCpltCallback>
}
 8003f60:	b002      	add	sp, #8
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	6814      	ldr	r4, [r2, #0]
 8003f66:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003f6a:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003f6c:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003f6e:	e7bb      	b.n	8003ee8 <I2C_DMAAbort+0x64>
 8003f70:	20000048 	.word	0x20000048
 8003f74:	14f8b589 	.word	0x14f8b589

08003f78 <I2C_ITError>:
{
 8003f78:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f7a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f7e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f82:	2b10      	cmp	r3, #16
{
 8003f84:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f86:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f88:	d039      	beq.n	8003ffe <I2C_ITError+0x86>
 8003f8a:	b2d9      	uxtb	r1, r3
 8003f8c:	2940      	cmp	r1, #64	; 0x40
 8003f8e:	d036      	beq.n	8003ffe <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f90:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003f94:	2928      	cmp	r1, #40	; 0x28
 8003f96:	d03d      	beq.n	8004014 <I2C_ITError+0x9c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f98:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	0508      	lsls	r0, r1, #20
 8003f9e:	d407      	bmi.n	8003fb0 <I2C_ITError+0x38>
 8003fa0:	2a60      	cmp	r2, #96	; 0x60
 8003fa2:	d005      	beq.n	8003fb0 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003fba:	d134      	bne.n	8004026 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fbc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003fc0:	2960      	cmp	r1, #96	; 0x60
 8003fc2:	d075      	beq.n	80040b0 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	0650      	lsls	r0, r2, #25
 8003fc8:	d505      	bpl.n	8003fd6 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff ff50 	bl	8003e7c <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fde:	0719      	lsls	r1, r3, #28
 8003fe0:	d004      	beq.n	8003fec <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	6853      	ldr	r3, [r2, #4]
 8003fe6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fea:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003fec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ff0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ff2:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8003ff4:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ff6:	d501      	bpl.n	8003ffc <I2C_ITError+0x84>
 8003ff8:	2b28      	cmp	r3, #40	; 0x28
 8003ffa:	d02f      	beq.n	800405c <I2C_ITError+0xe4>
}
 8003ffc:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ffe:	2a22      	cmp	r2, #34	; 0x22
 8004000:	d1c6      	bne.n	8003f90 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400a:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	0512      	lsls	r2, r2, #20
 8004010:	d5c8      	bpl.n	8003fa4 <I2C_ITError+0x2c>
 8004012:	e7cd      	b.n	8003fb0 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	2300      	movs	r3, #0
 8004016:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004018:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800401a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8004024:	d0ca      	beq.n	8003fbc <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004026:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004028:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800402a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004030:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004034:	2b01      	cmp	r3, #1
 8004036:	d01e      	beq.n	8004076 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004038:	4b28      	ldr	r3, [pc, #160]	; (80040dc <I2C_ITError+0x164>)
 800403a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800403c:	f7fe fee4 	bl	8002e08 <HAL_DMA_Abort_IT>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0cb      	beq.n	8003fdc <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8004044:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004046:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8004048:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800404a:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004052:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004056:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004058:	4798      	blx	r3
 800405a:	e7bf      	b.n	8003fdc <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800405e:	4920      	ldr	r1, [pc, #128]	; (80040e0 <I2C_ITError+0x168>)
 8004060:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8004062:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8004066:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004068:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004070:	f7ff fea0 	bl	8003db4 <HAL_I2C_ListenCpltCallback>
}
 8004074:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004076:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <I2C_ITError+0x164>)
 800407a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800407c:	f7fe fec4 	bl	8002e08 <HAL_DMA_Abort_IT>
 8004080:	2800      	cmp	r0, #0
 8004082:	d0ab      	beq.n	8003fdc <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	0651      	lsls	r1, r2, #25
 800408a:	d506      	bpl.n	800409a <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8004092:	6a62      	ldr	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004094:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8004096:	3201      	adds	r2, #1
 8004098:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800409a:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800409c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800409e:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80040a4:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040ac:	4798      	blx	r3
 80040ae:	e795      	b.n	8003fdc <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	2120      	movs	r1, #32
 80040b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b6:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	0652      	lsls	r2, r2, #25
 80040bc:	d506      	bpl.n	80040cc <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80040c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80040c6:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80040c8:	3201      	adds	r2, #1
 80040ca:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d2:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80040d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d6:	f7ff fed3 	bl	8003e80 <HAL_I2C_AbortCpltCallback>
 80040da:	e77f      	b.n	8003fdc <I2C_ITError+0x64>
 80040dc:	08003e85 	.word	0x08003e85
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <HAL_I2C_EV_IRQHandler>:
{
 80040e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040e6:	6803      	ldr	r3, [r0, #0]
{
 80040e8:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040ea:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040ee:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040f6:	2910      	cmp	r1, #16
{
 80040f8:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fa:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040fc:	fa5f fc81 	uxtb.w	ip, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004100:	d024      	beq.n	800414c <HAL_I2C_EV_IRQHandler+0x68>
 8004102:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8004106:	d021      	beq.n	800414c <HAL_I2C_EV_IRQHandler+0x68>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004108:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800410a:	2900      	cmp	r1, #0
 800410c:	f000 8096 	beq.w	800423c <HAL_I2C_EV_IRQHandler+0x158>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004110:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8004112:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004114:	f011 0f02 	tst.w	r1, #2
 8004118:	f3c1 0640 	ubfx	r6, r1, #1, #1
 800411c:	d059      	beq.n	80041d2 <HAL_I2C_EV_IRQHandler+0xee>
 800411e:	0586      	lsls	r6, r0, #22
 8004120:	d559      	bpl.n	80041d6 <HAL_I2C_EV_IRQHandler+0xf2>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004122:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004124:	b102      	cbz	r2, 8004128 <HAL_I2C_EV_IRQHandler+0x44>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004126:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004128:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800412c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004130:	2a28      	cmp	r2, #40	; 0x28
 8004132:	f000 821f 	beq.w	8004574 <HAL_I2C_EV_IRQHandler+0x490>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2200      	movs	r2, #0
 8004138:	920c      	str	r2, [sp, #48]	; 0x30
 800413a:	6959      	ldr	r1, [r3, #20]
 800413c:	910c      	str	r1, [sp, #48]	; 0x30
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	930c      	str	r3, [sp, #48]	; 0x30
 8004142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004144:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004148:	b00e      	add	sp, #56	; 0x38
 800414a:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800414c:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800414e:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004150:	f011 0f01 	tst.w	r1, #1
 8004154:	d11a      	bne.n	800418c <HAL_I2C_EV_IRQHandler+0xa8>
 8004156:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 800415a:	d0f5      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 800415c:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8004160:	d0f2      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004162:	070d      	lsls	r5, r1, #28
 8004164:	d56d      	bpl.n	8004242 <HAL_I2C_EV_IRQHandler+0x15e>
 8004166:	0585      	lsls	r5, r0, #22
 8004168:	f140 8083 	bpl.w	8004272 <HAL_I2C_EV_IRQHandler+0x18e>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800416c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800416e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004170:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004172:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004174:	2900      	cmp	r1, #0
 8004176:	f000 81e4 	beq.w	8004542 <HAL_I2C_EV_IRQHandler+0x45e>
 800417a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800417c:	2a00      	cmp	r2, #0
 800417e:	f000 81e0 	beq.w	8004542 <HAL_I2C_EV_IRQHandler+0x45e>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	e7dd      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418c:	0585      	lsls	r5, r0, #22
 800418e:	d56e      	bpl.n	800426e <HAL_I2C_EV_IRQHandler+0x18a>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004190:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004192:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004196:	f000 81ea 	beq.w	800456e <HAL_I2C_EV_IRQHandler+0x48a>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800419a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800419c:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041a0:	bf04      	itt	eq
 80041a2:	2208      	moveq	r2, #8
 80041a4:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80041aa:	2a40      	cmp	r2, #64	; 0x40
 80041ac:	f000 81d8 	beq.w	8004560 <HAL_I2C_EV_IRQHandler+0x47c>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80041b6:	f000 81b3 	beq.w	8004520 <HAL_I2C_EV_IRQHandler+0x43c>
      if (hi2c->EventCount == 0U)
 80041ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041bc:	2a00      	cmp	r2, #0
 80041be:	f040 81ef 	bne.w	80045a0 <HAL_I2C_EV_IRQHandler+0x4bc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041c4:	11d2      	asrs	r2, r2, #7
 80041c6:	f002 0206 	and.w	r2, r2, #6
 80041ca:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	e7ba      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d2:	06cd      	lsls	r5, r1, #27
 80041d4:	d47c      	bmi.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1ec>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041d6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80041da:	2a21      	cmp	r2, #33	; 0x21
 80041dc:	f000 80f5 	beq.w	80043ca <HAL_I2C_EV_IRQHandler+0x2e6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041e0:	064e      	lsls	r6, r1, #25
 80041e2:	f140 8132 	bpl.w	800444a <HAL_I2C_EV_IRQHandler+0x366>
 80041e6:	0545      	lsls	r5, r0, #21
 80041e8:	f140 812f 	bpl.w	800444a <HAL_I2C_EV_IRQHandler+0x366>
 80041ec:	0749      	lsls	r1, r1, #29
 80041ee:	f100 812f 	bmi.w	8004450 <HAL_I2C_EV_IRQHandler+0x36c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80041f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041f8:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041fa:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	d0a3      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8004206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004208:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800420a:	3b01      	subs	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004212:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004214:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8004216:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004218:	2b00      	cmp	r3, #0
 800421a:	d195      	bne.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 800421c:	292a      	cmp	r1, #42	; 0x2a
 800421e:	d193      	bne.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004224:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004226:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800422c:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800422e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004230:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004232:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004236:	f7ff fdb9 	bl	8003dac <HAL_I2C_SlaveRxCpltCallback>
 800423a:	e785      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800423c:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800423e:	6959      	ldr	r1, [r3, #20]
 8004240:	e768      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x30>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004242:	078d      	lsls	r5, r1, #30
 8004244:	d515      	bpl.n	8004272 <HAL_I2C_EV_IRQHandler+0x18e>
 8004246:	0585      	lsls	r5, r0, #22
 8004248:	d513      	bpl.n	8004272 <HAL_I2C_EV_IRQHandler+0x18e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800424a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800424e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004250:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004252:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004256:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004258:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800425a:	f000 81b3 	beq.w	80045c4 <HAL_I2C_EV_IRQHandler+0x4e0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2200      	movs	r2, #0
 8004260:	920a      	str	r2, [sp, #40]	; 0x28
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	920a      	str	r2, [sp, #40]	; 0x28
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	930a      	str	r3, [sp, #40]	; 0x28
 800426a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426c:	e76c      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800426e:	070d      	lsls	r5, r1, #28
 8004270:	d5e7      	bpl.n	8004242 <HAL_I2C_EV_IRQHandler+0x15e>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004272:	0775      	lsls	r5, r6, #29
 8004274:	f140 80f5 	bpl.w	8004462 <HAL_I2C_EV_IRQHandler+0x37e>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004278:	685d      	ldr	r5, [r3, #4]
 800427a:	052e      	lsls	r6, r5, #20
 800427c:	f53f af64 	bmi.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004280:	060d      	lsls	r5, r1, #24
 8004282:	f140 8115 	bpl.w	80044b0 <HAL_I2C_EV_IRQHandler+0x3cc>
 8004286:	0546      	lsls	r6, r0, #21
 8004288:	f140 8112 	bpl.w	80044b0 <HAL_I2C_EV_IRQHandler+0x3cc>
 800428c:	074d      	lsls	r5, r1, #29
 800428e:	f100 8112 	bmi.w	80044b6 <HAL_I2C_EV_IRQHandler+0x3d2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004292:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004296:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004298:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800429c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800429e:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042a0:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f040 823b 	bne.w	800471e <HAL_I2C_EV_IRQHandler+0x63a>
 80042a8:	2a21      	cmp	r2, #33	; 0x21
 80042aa:	f000 8341 	beq.w	8004930 <HAL_I2C_EV_IRQHandler+0x84c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042ae:	2940      	cmp	r1, #64	; 0x40
 80042b0:	f47f af4a 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042b4:	2a22      	cmp	r2, #34	; 0x22
 80042b6:	f47f af47 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount == 0U)
 80042ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042bc:	b292      	uxth	r2, r2
 80042be:	2a00      	cmp	r2, #0
 80042c0:	f000 8270 	beq.w	80047a4 <HAL_I2C_EV_IRQHandler+0x6c0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80042c8:	2a40      	cmp	r2, #64	; 0x40
 80042ca:	f040 80b4 	bne.w	8004436 <HAL_I2C_EV_IRQHandler+0x352>
 80042ce:	e0fc      	b.n	80044ca <HAL_I2C_EV_IRQHandler+0x3e6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	0585      	lsls	r5, r0, #22
 80042d2:	d580      	bpl.n	80041d6 <HAL_I2C_EV_IRQHandler+0xf2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042de:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042e0:	960d      	str	r6, [sp, #52]	; 0x34
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	920d      	str	r2, [sp, #52]	; 0x34
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042fc:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042fe:	d521      	bpl.n	8004344 <HAL_I2C_EV_IRQHandler+0x260>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004300:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8004304:	2a22      	cmp	r2, #34	; 0x22
 8004306:	f000 817a 	beq.w	80045fe <HAL_I2C_EV_IRQHandler+0x51a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800430a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800430c:	6802      	ldr	r2, [r0, #0]
 800430e:	6852      	ldr	r2, [r2, #4]
 8004310:	b292      	uxth	r2, r2
 8004312:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004314:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004316:	b292      	uxth	r2, r2
 8004318:	b11a      	cbz	r2, 8004322 <HAL_I2C_EV_IRQHandler+0x23e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800431a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800431c:	f042 0204 	orr.w	r2, r2, #4
 8004320:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004328:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800432a:	f7fe fe6f 	bl	800300c <HAL_DMA_GetState>
 800432e:	2801      	cmp	r0, #1
 8004330:	d008      	beq.n	8004344 <HAL_I2C_EV_IRQHandler+0x260>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004332:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004334:	4b99      	ldr	r3, [pc, #612]	; (800459c <HAL_I2C_EV_IRQHandler+0x4b8>)
 8004336:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004338:	f7fe fd66 	bl	8002e08 <HAL_DMA_Abort_IT>
 800433c:	b110      	cbz	r0, 8004344 <HAL_I2C_EV_IRQHandler+0x260>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800433e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004340:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004342:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	b313      	cbz	r3, 8004390 <HAL_I2C_EV_IRQHandler+0x2ac>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	0752      	lsls	r2, r2, #29
 8004350:	d50a      	bpl.n	8004368 <HAL_I2C_EV_IRQHandler+0x284>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8004358:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800435a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800435c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800435e:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8004360:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004362:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8004364:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004366:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	0656      	lsls	r6, r2, #25
 800436c:	d509      	bpl.n	8004382 <HAL_I2C_EV_IRQHandler+0x29e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8004374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004376:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004378:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800437a:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800437c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800437e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004380:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8004382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	b11b      	cbz	r3, 8004390 <HAL_I2C_EV_IRQHandler+0x2ac>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 80de 	bne.w	8004554 <HAL_I2C_EV_IRQHandler+0x470>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004398:	2d2a      	cmp	r5, #42	; 0x2a
 800439a:	f000 8151 	beq.w	8004640 <HAL_I2C_EV_IRQHandler+0x55c>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800439e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80043a2:	2b28      	cmp	r3, #40	; 0x28
 80043a4:	f000 8154 	beq.w	8004650 <HAL_I2C_EV_IRQHandler+0x56c>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	d002      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d0>
 80043ae:	2d22      	cmp	r5, #34	; 0x22
 80043b0:	f47f aeca 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043b4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ba:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043c4:	f7ff fcf2 	bl	8003dac <HAL_I2C_SlaveRxCpltCallback>
 80043c8:	e6be      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ca:	060d      	lsls	r5, r1, #24
 80043cc:	d528      	bpl.n	8004420 <HAL_I2C_EV_IRQHandler+0x33c>
 80043ce:	0546      	lsls	r6, r0, #21
 80043d0:	d526      	bpl.n	8004420 <HAL_I2C_EV_IRQHandler+0x33c>
 80043d2:	074d      	lsls	r5, r1, #29
 80043d4:	d427      	bmi.n	8004426 <HAL_I2C_EV_IRQHandler+0x342>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043d6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80043da:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80043dc:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043de:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 80043e0:	2900      	cmp	r1, #0
 80043e2:	f43f aeb1 	beq.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043e8:	f811 5b01 	ldrb.w	r5, [r1], #1
 80043ec:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80043ee:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80043f0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80043f2:	3901      	subs	r1, #1
 80043f4:	b289      	uxth	r1, r1
 80043f6:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80043fa:	b289      	uxth	r1, r1
 80043fc:	2900      	cmp	r1, #0
 80043fe:	f47f aea3 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004402:	2829      	cmp	r0, #41	; 0x29
 8004404:	f47f aea0 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004408:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800440a:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800440c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004410:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004412:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004414:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004416:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800441a:	f7ff fcc5 	bl	8003da8 <HAL_I2C_SlaveTxCpltCallback>
 800441e:	e693      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004420:	0749      	lsls	r1, r1, #29
 8004422:	f57f ae91 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004426:	0582      	lsls	r2, r0, #22
 8004428:	f57f ae8e 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 800442c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800442e:	b292      	uxth	r2, r2
 8004430:	2a00      	cmp	r2, #0
 8004432:	f43f ae89 	beq.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004438:	f812 1b01 	ldrb.w	r1, [r2], #1
 800443c:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 800443e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004440:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004448:	e67e      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444a:	074a      	lsls	r2, r1, #29
 800444c:	f57f ae7c 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004450:	0586      	lsls	r6, r0, #22
 8004452:	f57f ae79 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 8004456:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004458:	b292      	uxth	r2, r2
 800445a:	2a00      	cmp	r2, #0
 800445c:	f43f ae74 	beq.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004460:	e01b      	b.n	800449a <HAL_I2C_EV_IRQHandler+0x3b6>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	0515      	lsls	r5, r2, #20
 8004466:	f53f ae6f 	bmi.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800446a:	064a      	lsls	r2, r1, #25
 800446c:	d433      	bmi.n	80044d6 <HAL_I2C_EV_IRQHandler+0x3f2>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446e:	0749      	lsls	r1, r1, #29
 8004470:	f57f ae6a 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004474:	0582      	lsls	r2, r0, #22
 8004476:	f57f ae67 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800447a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800447c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800447e:	b292      	uxth	r2, r2
 8004480:	2a04      	cmp	r2, #4
 8004482:	f000 8119 	beq.w	80046b8 <HAL_I2C_EV_IRQHandler+0x5d4>
  else if (hi2c->XferCount == 3U)
 8004486:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004488:	b292      	uxth	r2, r2
 800448a:	2a03      	cmp	r2, #3
 800448c:	f000 8159 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x65e>
  else if (hi2c->XferCount == 2U)
 8004490:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004492:	b292      	uxth	r2, r2
 8004494:	2a02      	cmp	r2, #2
 8004496:	f000 818a 	beq.w	80047ae <HAL_I2C_EV_IRQHandler+0x6ca>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80044a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80044a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80044a4:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 80044a6:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80044a8:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80044aa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80044ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80044ae:	e64b      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b0:	0749      	lsls	r1, r1, #29
 80044b2:	f57f ae49 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 80044b6:	0586      	lsls	r6, r0, #22
 80044b8:	f57f ae46 	bpl.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044bc:	2a21      	cmp	r2, #33	; 0x21
 80044be:	f000 8103 	beq.w	80046c8 <HAL_I2C_EV_IRQHandler+0x5e4>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80044c2:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 80044c6:	f47f ae3f 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044ca:	4620      	mov	r0, r4
}
 80044cc:	b00e      	add	sp, #56	; 0x38
 80044ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044d2:	f7ff bc73 	b.w	8003dbc <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d6:	0546      	lsls	r6, r0, #21
 80044d8:	d5c9      	bpl.n	800446e <HAL_I2C_EV_IRQHandler+0x38a>
 80044da:	074d      	lsls	r5, r1, #29
 80044dc:	f3c1 0280 	ubfx	r2, r1, #2, #1
 80044e0:	d4c8      	bmi.n	8004474 <HAL_I2C_EV_IRQHandler+0x390>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80044e6:	2922      	cmp	r1, #34	; 0x22
 80044e8:	f47f ae2e 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    tmp = hi2c->XferCount;
 80044ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80044ee:	b289      	uxth	r1, r1
    if (tmp > 3U)
 80044f0:	2903      	cmp	r1, #3
 80044f2:	f240 81cc 	bls.w	800488e <HAL_I2C_EV_IRQHandler+0x7aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80044fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80044fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004500:	3b01      	subs	r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800450a:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 800450c:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 800450e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8004510:	f47f ae1a 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	6853      	ldr	r3, [r2, #4]
 8004518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	e613      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004520:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004524:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004526:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004528:	bf16      	itet	ne
 800452a:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800452e:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004532:	b2d2      	uxtbne	r2, r2
 8004534:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004536:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004538:	b11a      	cbz	r2, 8004542 <HAL_I2C_EV_IRQHandler+0x45e>
 800453a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800453c:	2a00      	cmp	r2, #0
 800453e:	f47f ae20 	bne.w	8004182 <HAL_I2C_EV_IRQHandler+0x9e>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004542:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004544:	2a00      	cmp	r2, #0
 8004546:	f43f adff 	beq.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 800454a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800454c:	2a00      	cmp	r2, #0
 800454e:	f47f ae18 	bne.w	8004182 <HAL_I2C_EV_IRQHandler+0x9e>
 8004552:	e5f9      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    I2C_ITError(hi2c);
 8004554:	4620      	mov	r0, r4
}
 8004556:	b00e      	add	sp, #56	; 0x38
 8004558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 800455c:	f7ff bd0c 	b.w	8003f78 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8004560:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004562:	bb4a      	cbnz	r2, 80045b8 <HAL_I2C_EV_IRQHandler+0x4d4>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004564:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004566:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800456a:	611a      	str	r2, [r3, #16]
 800456c:	e5ec      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800456e:	2201      	movs	r2, #1
 8004570:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004572:	e618      	b.n	80041a6 <HAL_I2C_EV_IRQHandler+0xc2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800457c:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800457e:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 8004582:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004586:	bf54      	ite	pl
 8004588:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800458a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 800458c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004590:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004594:	4620      	mov	r0, r4
 8004596:	f7ff fc0b 	bl	8003db0 <HAL_I2C_AddrCallback>
 800459a:	e5d5      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 800459c:	08003e85 	.word	0x08003e85
      else if (hi2c->EventCount == 1U)
 80045a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80045a2:	2a01      	cmp	r2, #1
 80045a4:	f47f add0 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80045aa:	11d2      	asrs	r2, r2, #7
 80045ac:	f002 0206 	and.w	r2, r2, #6
 80045b0:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80045b4:	611a      	str	r2, [r3, #16]
 80045b6:	e5c7      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	e5c1      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80045c6:	b911      	cbnz	r1, 80045ce <HAL_I2C_EV_IRQHandler+0x4ea>
 80045c8:	2a40      	cmp	r2, #64	; 0x40
 80045ca:	f000 80a1 	beq.w	8004710 <HAL_I2C_EV_IRQHandler+0x62c>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80045ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80045d0:	b922      	cbnz	r2, 80045dc <HAL_I2C_EV_IRQHandler+0x4f8>
 80045d2:	6921      	ldr	r1, [r4, #16]
 80045d4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80045d8:	f000 80a5 	beq.w	8004726 <HAL_I2C_EV_IRQHandler+0x642>
      if (hi2c->XferCount == 0U)
 80045dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045de:	b292      	uxth	r2, r2
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	d142      	bne.n	800466a <HAL_I2C_EV_IRQHandler+0x586>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e4:	9203      	str	r2, [sp, #12]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	9203      	str	r2, [sp, #12]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	9203      	str	r2, [sp, #12]
 80045ee:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	6523      	str	r3, [r4, #80]	; 0x50
 80045fc:	e5a4      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004600:	6802      	ldr	r2, [r0, #0]
 8004602:	6852      	ldr	r2, [r2, #4]
 8004604:	b292      	uxth	r2, r2
 8004606:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004608:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800460a:	b292      	uxth	r2, r2
 800460c:	b11a      	cbz	r2, 8004616 <HAL_I2C_EV_IRQHandler+0x532>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800460e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004610:	f042 0204 	orr.w	r2, r2, #4
 8004614:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800461e:	f7fe fcf5 	bl	800300c <HAL_DMA_GetState>
 8004622:	2801      	cmp	r0, #1
 8004624:	f43f ae8e 	beq.w	8004344 <HAL_I2C_EV_IRQHandler+0x260>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004628:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800462a:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_I2C_EV_IRQHandler+0x7cc>)
 800462c:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800462e:	f7fe fbeb 	bl	8002e08 <HAL_DMA_Abort_IT>
 8004632:	2800      	cmp	r0, #0
 8004634:	f43f ae86 	beq.w	8004344 <HAL_I2C_EV_IRQHandler+0x260>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004638:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800463a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800463c:	4798      	blx	r3
 800463e:	e681      	b.n	8004344 <HAL_I2C_EV_IRQHandler+0x260>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004640:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8004642:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004644:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004646:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800464a:	f7ff fbaf 	bl	8003dac <HAL_I2C_SlaveRxCpltCallback>
 800464e:	e6a6      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x2ba>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004650:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004652:	4998      	ldr	r1, [pc, #608]	; (80048b4 <HAL_I2C_EV_IRQHandler+0x7d0>)
 8004654:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8004656:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8004658:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 800465a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 800465c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004664:	f7ff fba6 	bl	8003db4 <HAL_I2C_ListenCpltCallback>
 8004668:	e56e      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      else if (hi2c->XferCount == 1U)
 800466a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800466c:	b292      	uxth	r2, r2
 800466e:	2a01      	cmp	r2, #1
 8004670:	d076      	beq.n	8004760 <HAL_I2C_EV_IRQHandler+0x67c>
      else if (hi2c->XferCount == 2U)
 8004672:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004674:	b292      	uxth	r2, r2
 8004676:	2a02      	cmp	r2, #2
 8004678:	f000 80eb 	beq.w	8004852 <HAL_I2C_EV_IRQHandler+0x76e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	0512      	lsls	r2, r2, #20
 8004688:	d50e      	bpl.n	80046a8 <HAL_I2C_EV_IRQHandler+0x5c4>
 800468a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800468e:	d007      	beq.n	80046a0 <HAL_I2C_EV_IRQHandler+0x5bc>
 8004690:	3801      	subs	r0, #1
 8004692:	281f      	cmp	r0, #31
 8004694:	d808      	bhi.n	80046a8 <HAL_I2C_EV_IRQHandler+0x5c4>
 8004696:	4a88      	ldr	r2, [pc, #544]	; (80048b8 <HAL_I2C_EV_IRQHandler+0x7d4>)
 8004698:	fa22 f000 	lsr.w	r0, r2, r0
 800469c:	07c6      	lsls	r6, r0, #31
 800469e:	d503      	bpl.n	80046a8 <HAL_I2C_EV_IRQHandler+0x5c4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046a6:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a8:	2200      	movs	r2, #0
 80046aa:	9209      	str	r2, [sp, #36]	; 0x24
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	9209      	str	r2, [sp, #36]	; 0x24
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
 80046b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b6:	e79f      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b8:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80046c6:	e6eb      	b.n	80044a0 <HAL_I2C_EV_IRQHandler+0x3bc>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046ca:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80046ce:	2a21      	cmp	r2, #33	; 0x21
 80046d0:	f47f ad3a 	bne.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount != 0U)
 80046d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046d6:	b292      	uxth	r2, r2
 80046d8:	2a00      	cmp	r2, #0
 80046da:	f47f aeac 	bne.w	8004436 <HAL_I2C_EV_IRQHandler+0x352>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046de:	2908      	cmp	r1, #8
 80046e0:	f000 809f 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
 80046e4:	2920      	cmp	r1, #32
 80046e6:	f000 809c 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
 80046ea:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80046ee:	f000 8098 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80046f8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fa:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fe:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004704:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8004706:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800470a:	f7ff fb49 	bl	8003da0 <HAL_I2C_MasterTxCpltCallback>
 800470e:	e51b      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004710:	9101      	str	r1, [sp, #4]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	9201      	str	r2, [sp, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	e514      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800471e:	2a21      	cmp	r2, #33	; 0x21
 8004720:	f43f adcb 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x1d6>
 8004724:	e5c3      	b.n	80042ae <HAL_I2C_EV_IRQHandler+0x1ca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	9202      	str	r2, [sp, #8]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	9202      	str	r2, [sp, #8]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	9202      	str	r2, [sp, #8]
 8004730:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800473a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800473c:	3301      	adds	r3, #1
 800473e:	6523      	str	r3, [r4, #80]	; 0x50
 8004740:	e502      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004742:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004744:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800474c:	f43f aea5 	beq.w	800449a <HAL_I2C_EV_IRQHandler+0x3b6>
 8004750:	2902      	cmp	r1, #2
 8004752:	f43f aea2 	beq.w	800449a <HAL_I2C_EV_IRQHandler+0x3b6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e69c      	b.n	800449a <HAL_I2C_EV_IRQHandler+0x3b6>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004760:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004764:	f000 8103 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x88a>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004768:	2808      	cmp	r0, #8
 800476a:	f000 80d1 	beq.w	8004910 <HAL_I2C_EV_IRQHandler+0x82c>
 800476e:	2820      	cmp	r0, #32
 8004770:	f000 80ce 	beq.w	8004910 <HAL_I2C_EV_IRQHandler+0x82c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004774:	2d12      	cmp	r5, #18
 8004776:	f000 813d 	beq.w	80049f4 <HAL_I2C_EV_IRQHandler+0x910>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800477a:	2810      	cmp	r0, #16
 800477c:	f200 813c 	bhi.w	80049f8 <HAL_I2C_EV_IRQHandler+0x914>
 8004780:	4a4e      	ldr	r2, [pc, #312]	; (80048bc <HAL_I2C_EV_IRQHandler+0x7d8>)
 8004782:	fa22 f000 	lsr.w	r0, r2, r0
 8004786:	07c1      	lsls	r1, r0, #31
 8004788:	f140 8136 	bpl.w	80049f8 <HAL_I2C_EV_IRQHandler+0x914>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004792:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2200      	movs	r2, #0
 8004796:	9206      	str	r2, [sp, #24]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	9206      	str	r2, [sp, #24]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	9306      	str	r3, [sp, #24]
 80047a0:	9b06      	ldr	r3, [sp, #24]
 80047a2:	e729      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e4cc      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047ae:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b0:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047b2:	f000 80d8 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x882>
 80047b6:	2910      	cmp	r1, #16
 80047b8:	f000 80d5 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x882>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047bc:	2904      	cmp	r1, #4
 80047be:	f000 810a 	beq.w	80049d6 <HAL_I2C_EV_IRQHandler+0x8f2>
 80047c2:	2902      	cmp	r1, #2
 80047c4:	f000 8107 	beq.w	80049d6 <HAL_I2C_EV_IRQHandler+0x8f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80047d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80047d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e0:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 80047e2:	1c51      	adds	r1, r2, #1
 80047e4:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 80047e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ea:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80047ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047f4:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 80047f6:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 80047fe:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004800:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004806:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	f000 80c3 	beq.w	8004996 <HAL_I2C_EV_IRQHandler+0x8b2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004812:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004814:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004818:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800481a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800481c:	f7ff fac2 	bl	8003da4 <HAL_I2C_MasterRxCpltCallback>
 8004820:	e492      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004828:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800482c:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800482e:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004834:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004838:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800483c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004844:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004846:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004848:	f47f af5f 	bne.w	800470a <HAL_I2C_EV_IRQHandler+0x626>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800484c:	f7ff fab4 	bl	8003db8 <HAL_I2C_MemTxCpltCallback>
 8004850:	e47a      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004852:	2810      	cmp	r0, #16
 8004854:	f240 80a8 	bls.w	80049a8 <HAL_I2C_EV_IRQHandler+0x8c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004866:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	0516      	lsls	r6, r2, #20
 800486c:	d507      	bpl.n	800487e <HAL_I2C_EV_IRQHandler+0x79a>
 800486e:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004872:	f040 80a6 	bne.w	80049c2 <HAL_I2C_EV_IRQHandler+0x8de>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800487c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2200      	movs	r2, #0
 8004880:	9208      	str	r2, [sp, #32]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	9208      	str	r2, [sp, #32]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	9308      	str	r3, [sp, #32]
 800488a:	9b08      	ldr	r3, [sp, #32]
 800488c:	e6b4      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800488e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004890:	2802      	cmp	r0, #2
 8004892:	d087      	beq.n	80047a4 <HAL_I2C_EV_IRQHandler+0x6c0>
 8004894:	2901      	cmp	r1, #1
 8004896:	d885      	bhi.n	80047a4 <HAL_I2C_EV_IRQHandler+0x6c0>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004898:	4909      	ldr	r1, [pc, #36]	; (80048c0 <HAL_I2C_EV_IRQHandler+0x7dc>)
  __IO uint32_t count = 0U;
 800489a:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800489c:	6809      	ldr	r1, [r1, #0]
 800489e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80048a2:	fbb1 f1f0 	udiv	r1, r1, r0
 80048a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80048aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80048ac:	e00f      	b.n	80048ce <HAL_I2C_EV_IRQHandler+0x7ea>
 80048ae:	bf00      	nop
 80048b0:	08003e85 	.word	0x08003e85
 80048b4:	ffff0000 	.word	0xffff0000
 80048b8:	80008081 	.word	0x80008081
 80048bc:	00010014 	.word	0x00010014
 80048c0:	20000048 	.word	0x20000048
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80048ca:	f000 809a 	beq.w	8004a02 <HAL_I2C_EV_IRQHandler+0x91e>
    count--;
 80048ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048d0:	3a01      	subs	r2, #1
 80048d2:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80048d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d1f4      	bne.n	80048c4 <HAL_I2C_EV_IRQHandler+0x7e0>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048de:	f042 0220 	orr.w	r2, r2, #32
 80048e2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80048f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80048f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80048f4:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80048f6:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80048f8:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80048fc:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80048fe:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8004900:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8004904:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800490a:	f7ff fab7 	bl	8003e7c <HAL_I2C_ErrorCallback>
 800490e:	e41b      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x64>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	9107      	str	r1, [sp, #28]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	9207      	str	r2, [sp, #28]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	9207      	str	r2, [sp, #28]
 8004924:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e663      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004930:	2d08      	cmp	r5, #8
 8004932:	f43f af76 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
 8004936:	2d20      	cmp	r5, #32
 8004938:	f43f af73 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
 800493c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004940:	f43f af6f 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x73e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800494c:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800494e:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004950:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004952:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004958:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 800495a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800495e:	f7ff fa1f 	bl	8003da0 <HAL_I2C_MasterTxCpltCallback>
 8004962:	f7ff bbf1 	b.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e72f      	b.n	80047ce <HAL_I2C_EV_IRQHandler+0x6ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800497c:	d02f      	beq.n	80049de <HAL_I2C_EV_IRQHandler+0x8fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497e:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004986:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004988:	9104      	str	r1, [sp, #16]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	9204      	str	r2, [sp, #16]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	e630      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	2300      	movs	r3, #0
 8004998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 800499c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800499e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049a0:	f7ff fa6a 	bl	8003e78 <HAL_I2C_MemRxCpltCallback>
 80049a4:	f7ff bbd0 	b.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049a8:	4a27      	ldr	r2, [pc, #156]	; (8004a48 <HAL_I2C_EV_IRQHandler+0x964>)
 80049aa:	40c2      	lsrs	r2, r0
 80049ac:	07d2      	lsls	r2, r2, #31
 80049ae:	f57f af53 	bpl.w	8004858 <HAL_I2C_EV_IRQHandler+0x774>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b8:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	0515      	lsls	r5, r2, #20
 80049be:	f57f af5e 	bpl.w	800487e <HAL_I2C_EV_IRQHandler+0x79a>
 80049c2:	3801      	subs	r0, #1
 80049c4:	281f      	cmp	r0, #31
 80049c6:	f63f af5a 	bhi.w	800487e <HAL_I2C_EV_IRQHandler+0x79a>
 80049ca:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <HAL_I2C_EV_IRQHandler+0x968>)
 80049cc:	40c2      	lsrs	r2, r0
 80049ce:	07d1      	lsls	r1, r2, #31
 80049d0:	f57f af55 	bpl.w	800487e <HAL_I2C_EV_IRQHandler+0x79a>
 80049d4:	e74f      	b.n	8004876 <HAL_I2C_EV_IRQHandler+0x792>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e6f7      	b.n	80047ce <HAL_I2C_EV_IRQHandler+0x6ea>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	9205      	str	r2, [sp, #20]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	9205      	str	r2, [sp, #20]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	9205      	str	r2, [sp, #20]
 80049e8:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e601      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x514>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049f4:	2801      	cmp	r0, #1
 80049f6:	d18b      	bne.n	8004910 <HAL_I2C_EV_IRQHandler+0x82c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e6c8      	b.n	8004794 <HAL_I2C_EV_IRQHandler+0x6b0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a04:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a0a:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004a12:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8004a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a1a:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	2120      	movs	r1, #32
        hi2c->XferCount--;
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->pBuffPtr++;
 8004a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a28:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8004a2c:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a2e:	2940      	cmp	r1, #64	; 0x40
        hi2c->pBuffPtr++;
 8004a30:	6263      	str	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a32:	f47f aeee 	bne.w	8004812 <HAL_I2C_EV_IRQHandler+0x72e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a3a:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a3e:	f7ff fa1b 	bl	8003e78 <HAL_I2C_MemRxCpltCallback>
 8004a42:	f7ff bb81 	b.w	8004148 <HAL_I2C_EV_IRQHandler+0x64>
 8004a46:	bf00      	nop
 8004a48:	00010014 	.word	0x00010014
 8004a4c:	80008081 	.word	0x80008081

08004a50 <HAL_I2C_ER_IRQHandler>:
{
 8004a50:	b530      	push	{r4, r5, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a52:	6803      	ldr	r3, [r0, #0]
 8004a54:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a56:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a58:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a5c:	05e5      	lsls	r5, r4, #23
{
 8004a5e:	b083      	sub	sp, #12
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a60:	fa5f fc81 	uxtb.w	ip, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a64:	d533      	bpl.n	8004ace <HAL_I2C_ER_IRQHandler+0x7e>
 8004a66:	05d1      	lsls	r1, r2, #23
 8004a68:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8004a6c:	d52f      	bpl.n	8004ace <HAL_I2C_ER_IRQHandler+0x7e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a72:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a74:	05a2      	lsls	r2, r4, #22
 8004a76:	d43c      	bmi.n	8004af2 <HAL_I2C_ER_IRQHandler+0xa2>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a78:	0562      	lsls	r2, r4, #21
 8004a7a:	d572      	bpl.n	8004b62 <HAL_I2C_ER_IRQHandler+0x112>
    error |= HAL_I2C_ERROR_BERR;
 8004a7c:	2101      	movs	r1, #1
    tmp2 = hi2c->XferCount;
 8004a7e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    tmp3 = hi2c->State;
 8004a80:	f890 e03d 	ldrb.w	lr, [r0, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8004a84:	6b05      	ldr	r5, [r0, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a86:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 8004a8a:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8004a8c:	fa5f fe8e 	uxtb.w	lr, lr
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a90:	d03d      	beq.n	8004b0e <HAL_I2C_ER_IRQHandler+0xbe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a96:	f1bc 0f10 	cmp.w	ip, #16
      error |= HAL_I2C_ERROR_AF;
 8004a9a:	f041 0104 	orr.w	r1, r1, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9e:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aa0:	d002      	beq.n	8004aa8 <HAL_I2C_ER_IRQHandler+0x58>
 8004aa2:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8004aa6:	d103      	bne.n	8004ab0 <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ab0:	0522      	lsls	r2, r4, #20
 8004ab2:	d504      	bpl.n	8004abe <HAL_I2C_ER_IRQHandler+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ab4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8004ab8:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004abc:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8004abe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	6401      	str	r1, [r0, #64]	; 0x40
}
 8004ac4:	b003      	add	sp, #12
 8004ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 8004aca:	f7ff ba55 	b.w	8003f78 <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ace:	05a5      	lsls	r5, r4, #22
 8004ad0:	d503      	bpl.n	8004ada <HAL_I2C_ER_IRQHandler+0x8a>
 8004ad2:	05d1      	lsls	r1, r2, #23
 8004ad4:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8004ad8:	d417      	bmi.n	8004b0a <HAL_I2C_ER_IRQHandler+0xba>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ada:	0565      	lsls	r5, r4, #21
 8004adc:	f3c4 2180 	ubfx	r1, r4, #10, #1
 8004ae0:	d403      	bmi.n	8004aea <HAL_I2C_ER_IRQHandler+0x9a>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ae2:	0524      	lsls	r4, r4, #20
 8004ae4:	d434      	bmi.n	8004b50 <HAL_I2C_ER_IRQHandler+0x100>
}
 8004ae6:	b003      	add	sp, #12
 8004ae8:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aea:	05d1      	lsls	r1, r2, #23
 8004aec:	d5fb      	bpl.n	8004ae6 <HAL_I2C_ER_IRQHandler+0x96>
 8004aee:	2100      	movs	r1, #0
 8004af0:	e7c5      	b.n	8004a7e <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004af2:	2103      	movs	r1, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004af4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004af8:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004afa:	0562      	lsls	r2, r4, #21
 8004afc:	d4bf      	bmi.n	8004a7e <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004afe:	0524      	lsls	r4, r4, #20
 8004b00:	d5dd      	bpl.n	8004abe <HAL_I2C_ER_IRQHandler+0x6e>
 8004b02:	f01e 0f01 	tst.w	lr, #1
 8004b06:	d1d5      	bne.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x64>
 8004b08:	e7d9      	b.n	8004abe <HAL_I2C_ER_IRQHandler+0x6e>
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	e7f2      	b.n	8004af4 <HAL_I2C_ER_IRQHandler+0xa4>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b0e:	b9ca      	cbnz	r2, 8004b44 <HAL_I2C_ER_IRQHandler+0xf4>
 8004b10:	f00e 02f7 	and.w	r2, lr, #247	; 0xf7
 8004b14:	2a21      	cmp	r2, #33	; 0x21
 8004b16:	d004      	beq.n	8004b22 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b18:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8004b1c:	d112      	bne.n	8004b44 <HAL_I2C_ER_IRQHandler+0xf4>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b1e:	2d21      	cmp	r5, #33	; 0x21
 8004b20:	d110      	bne.n	8004b44 <HAL_I2C_ER_IRQHandler+0xf4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b22:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b26:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b28:	2d08      	cmp	r5, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b2a:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b2c:	d01e      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0x11c>
 8004b2e:	2d20      	cmp	r5, #32
 8004b30:	d01c      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0x11c>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b32:	2a21      	cmp	r2, #33	; 0x21
 8004b34:	d037      	beq.n	8004ba6 <HAL_I2C_ER_IRQHandler+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3a:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b3c:	0525      	lsls	r5, r4, #20
 8004b3e:	d50c      	bpl.n	8004b5a <HAL_I2C_ER_IRQHandler+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b40:	6803      	ldr	r3, [r0, #0]
 8004b42:	e7b7      	b.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x64>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b48:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004b4a:	f041 0104 	orr.w	r1, r1, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b4e:	e7af      	b.n	8004ab0 <HAL_I2C_ER_IRQHandler+0x60>
 8004b50:	ea4f 2e12 	mov.w	lr, r2, lsr #8
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b54:	f01e 0f01 	tst.w	lr, #1
 8004b58:	d1ac      	bne.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x64>
  if (error != HAL_I2C_ERROR_NONE)
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d1af      	bne.n	8004abe <HAL_I2C_ER_IRQHandler+0x6e>
}
 8004b5e:	b003      	add	sp, #12
 8004b60:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b62:	0525      	lsls	r5, r4, #20
    error |= HAL_I2C_ERROR_BERR;
 8004b64:	f04f 0101 	mov.w	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b68:	d4f4      	bmi.n	8004b54 <HAL_I2C_ER_IRQHandler+0x104>
 8004b6a:	e7a8      	b.n	8004abe <HAL_I2C_ER_IRQHandler+0x6e>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b6c:	2a28      	cmp	r2, #40	; 0x28
 8004b6e:	d1e0      	bne.n	8004b32 <HAL_I2C_ER_IRQHandler+0xe2>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b70:	4a1a      	ldr	r2, [pc, #104]	; (8004bdc <HAL_I2C_ER_IRQHandler+0x18c>)
 8004b72:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	9101      	str	r1, [sp, #4]
 8004b78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b7c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b82:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b84:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b86:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b90:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b92:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b94:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b98:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b9c:	f7ff f90a 	bl	8003db4 <HAL_I2C_ListenCpltCallback>
 8004ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ba4:	e7ca      	b.n	8004b3c <HAL_I2C_ER_IRQHandler+0xec>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ba6:	4d0d      	ldr	r5, [pc, #52]	; (8004bdc <HAL_I2C_ER_IRQHandler+0x18c>)
 8004ba8:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004baa:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bac:	2220      	movs	r2, #32
 8004bae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	9101      	str	r1, [sp, #4]
 8004bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bc0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc6:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc8:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bca:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bd2:	f7ff f8e9 	bl	8003da8 <HAL_I2C_SlaveTxCpltCallback>
 8004bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bda:	e7af      	b.n	8004b3c <HAL_I2C_ER_IRQHandler+0xec>
 8004bdc:	ffff0000 	.word	0xffff0000

08004be0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be0:	2800      	cmp	r0, #0
 8004be2:	f000 81a2 	beq.w	8004f2a <HAL_RCC_OscConfig+0x34a>
{
 8004be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bea:	6803      	ldr	r3, [r0, #0]
 8004bec:	07dd      	lsls	r5, r3, #31
{
 8004bee:	b082      	sub	sp, #8
 8004bf0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf2:	d52f      	bpl.n	8004c54 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf4:	499e      	ldr	r1, [pc, #632]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004bf6:	688a      	ldr	r2, [r1, #8]
 8004bf8:	f002 020c 	and.w	r2, r2, #12
 8004bfc:	2a04      	cmp	r2, #4
 8004bfe:	f000 80ed 	beq.w	8004ddc <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c02:	688a      	ldr	r2, [r1, #8]
 8004c04:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c08:	2a08      	cmp	r2, #8
 8004c0a:	f000 80e3 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c14:	f000 80ec 	beq.w	8004df0 <HAL_RCC_OscConfig+0x210>
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	f000 8175 	beq.w	8004f0a <HAL_RCC_OscConfig+0x32a>
 8004c20:	4d93      	ldr	r5, [pc, #588]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004c22:	682a      	ldr	r2, [r5, #0]
 8004c24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	682a      	ldr	r2, [r5, #0]
 8004c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c30:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f040 80e1 	bne.w	8004dfa <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd ff7e 	bl	8002b38 <HAL_GetTick>
 8004c3c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e005      	b.n	8004c4c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd ff7a 	bl	8002b38 <HAL_GetTick>
 8004c44:	1b80      	subs	r0, r0, r6
 8004c46:	2864      	cmp	r0, #100	; 0x64
 8004c48:	f200 8101 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	039b      	lsls	r3, r3, #14
 8004c50:	d4f6      	bmi.n	8004c40 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	079f      	lsls	r7, r3, #30
 8004c56:	d528      	bpl.n	8004caa <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c58:	4a85      	ldr	r2, [pc, #532]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004c5a:	6891      	ldr	r1, [r2, #8]
 8004c5c:	f011 0f0c 	tst.w	r1, #12
 8004c60:	f000 8090 	beq.w	8004d84 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c64:	6891      	ldr	r1, [r2, #8]
 8004c66:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c6a:	2908      	cmp	r1, #8
 8004c6c:	f000 8086 	beq.w	8004d7c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 810e 	beq.w	8004e94 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c78:	4b7e      	ldr	r3, [pc, #504]	; (8004e74 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7a:	4e7d      	ldr	r6, [pc, #500]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c80:	f7fd ff5a 	bl	8002b38 <HAL_GetTick>
 8004c84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fd ff56 	bl	8002b38 <HAL_GetTick>
 8004c8c:	1b40      	subs	r0, r0, r5
 8004c8e:	2802      	cmp	r0, #2
 8004c90:	f200 80dd 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	0798      	lsls	r0, r3, #30
 8004c98:	d5f6      	bpl.n	8004c88 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	6833      	ldr	r3, [r6, #0]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ca2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004ca6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	071a      	lsls	r2, r3, #28
 8004cac:	d451      	bmi.n	8004d52 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cae:	0758      	lsls	r0, r3, #29
 8004cb0:	d52f      	bpl.n	8004d12 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4a6f      	ldr	r2, [pc, #444]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004cb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cb6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004cba:	d07f      	beq.n	8004dbc <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004cbc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbe:	4e6e      	ldr	r6, [pc, #440]	; (8004e78 <HAL_RCC_OscConfig+0x298>)
 8004cc0:	6833      	ldr	r3, [r6, #0]
 8004cc2:	05d9      	lsls	r1, r3, #23
 8004cc4:	f140 80b3 	bpl.w	8004e2e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc8:	68a3      	ldr	r3, [r4, #8]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f000 80c3 	beq.w	8004e56 <HAL_RCC_OscConfig+0x276>
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	f000 812c 	beq.w	8004f2e <HAL_RCC_OscConfig+0x34e>
 8004cd6:	4e66      	ldr	r6, [pc, #408]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004cd8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	6732      	str	r2, [r6, #112]	; 0x70
 8004ce0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 80b9 	bne.w	8004e60 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fd ff23 	bl	8002b38 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004cf6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf8:	e005      	b.n	8004d06 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fd ff1d 	bl	8002b38 <HAL_GetTick>
 8004cfe:	1bc0      	subs	r0, r0, r7
 8004d00:	4540      	cmp	r0, r8
 8004d02:	f200 80a4 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004d08:	0798      	lsls	r0, r3, #30
 8004d0a:	d4f6      	bmi.n	8004cfa <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	f040 8106 	bne.w	8004f1e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d12:	69a0      	ldr	r0, [r4, #24]
 8004d14:	b1c8      	cbz	r0, 8004d4a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d16:	4d56      	ldr	r5, [pc, #344]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004d18:	68ab      	ldr	r3, [r5, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	f000 80c9 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_OscConfig+0x294>)
 8004d26:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d28:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2c:	f000 8109 	beq.w	8004f42 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fd ff02 	bl	8002b38 <HAL_GetTick>
 8004d34:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d36:	e005      	b.n	8004d44 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fd fefe 	bl	8002b38 <HAL_GetTick>
 8004d3c:	1b00      	subs	r0, r0, r4
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	f200 8085 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	d4f6      	bmi.n	8004d38 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2000      	movs	r0, #0
}
 8004d4c:	b002      	add	sp, #8
 8004d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d52:	6963      	ldr	r3, [r4, #20]
 8004d54:	b30b      	cbz	r3, 8004d9a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d58:	4e45      	ldr	r6, [pc, #276]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004d60:	f7fd feea 	bl	8002b38 <HAL_GetTick>
 8004d64:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	e004      	b.n	8004d72 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fd fee6 	bl	8002b38 <HAL_GetTick>
 8004d6c:	1b40      	subs	r0, r0, r5
 8004d6e:	2802      	cmp	r0, #2
 8004d70:	d86d      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004d74:	079b      	lsls	r3, r3, #30
 8004d76:	d5f7      	bpl.n	8004d68 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	e798      	b.n	8004cae <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7c:	6852      	ldr	r2, [r2, #4]
 8004d7e:	0256      	lsls	r6, r2, #9
 8004d80:	f53f af76 	bmi.w	8004c70 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d84:	4a3a      	ldr	r2, [pc, #232]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	0795      	lsls	r5, r2, #30
 8004d8a:	d544      	bpl.n	8004e16 <HAL_RCC_OscConfig+0x236>
 8004d8c:	68e2      	ldr	r2, [r4, #12]
 8004d8e:	2a01      	cmp	r2, #1
 8004d90:	d041      	beq.n	8004e16 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
}
 8004d94:	b002      	add	sp, #8
 8004d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004d9a:	4a36      	ldr	r2, [pc, #216]	; (8004e74 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9c:	4e34      	ldr	r6, [pc, #208]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004d9e:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004da2:	f7fd fec9 	bl	8002b38 <HAL_GetTick>
 8004da6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da8:	e004      	b.n	8004db4 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fd fec5 	bl	8002b38 <HAL_GetTick>
 8004dae:	1b40      	subs	r0, r0, r5
 8004db0:	2802      	cmp	r0, #2
 8004db2:	d84c      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004db6:	079f      	lsls	r7, r3, #30
 8004db8:	d4f7      	bmi.n	8004daa <HAL_RCC_OscConfig+0x1ca>
 8004dba:	e7dd      	b.n	8004d78 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004dd0:	2501      	movs	r5, #1
 8004dd2:	e774      	b.n	8004cbe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd4:	684a      	ldr	r2, [r1, #4]
 8004dd6:	0250      	lsls	r0, r2, #9
 8004dd8:	f57f af19 	bpl.w	8004c0e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	0391      	lsls	r1, r2, #14
 8004de2:	f57f af37 	bpl.w	8004c54 <HAL_RCC_OscConfig+0x74>
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	f47f af33 	bne.w	8004c54 <HAL_RCC_OscConfig+0x74>
 8004dee:	e7d0      	b.n	8004d92 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dfa:	f7fd fe9d 	bl	8002b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4e1c      	ldr	r6, [pc, #112]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004e00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e02:	e004      	b.n	8004e0e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fd fe98 	bl	8002b38 <HAL_GetTick>
 8004e08:	1b40      	subs	r0, r0, r5
 8004e0a:	2864      	cmp	r0, #100	; 0x64
 8004e0c:	d81f      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	6833      	ldr	r3, [r6, #0]
 8004e10:	039a      	lsls	r2, r3, #14
 8004e12:	d5f7      	bpl.n	8004e04 <HAL_RCC_OscConfig+0x224>
 8004e14:	e71d      	b.n	8004c52 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4916      	ldr	r1, [pc, #88]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004e18:	6920      	ldr	r0, [r4, #16]
 8004e1a:	680a      	ldr	r2, [r1, #0]
 8004e1c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004e20:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004e24:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e26:	071a      	lsls	r2, r3, #28
 8004e28:	f57f af41 	bpl.w	8004cae <HAL_RCC_OscConfig+0xce>
 8004e2c:	e791      	b.n	8004d52 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2e:	6833      	ldr	r3, [r6, #0]
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004e36:	f7fd fe7f 	bl	8002b38 <HAL_GetTick>
 8004e3a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	05da      	lsls	r2, r3, #23
 8004e40:	f53f af42 	bmi.w	8004cc8 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e44:	f7fd fe78 	bl	8002b38 <HAL_GetTick>
 8004e48:	1bc0      	subs	r0, r0, r7
 8004e4a:	2802      	cmp	r0, #2
 8004e4c:	d9f6      	bls.n	8004e3c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004e4e:	2003      	movs	r0, #3
}
 8004e50:	b002      	add	sp, #8
 8004e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e56:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
 8004e58:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004e60:	f7fd fe6a 	bl	8002b38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e64:	4f02      	ldr	r7, [pc, #8]	; (8004e70 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004e66:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6c:	e00b      	b.n	8004e86 <HAL_RCC_OscConfig+0x2a6>
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	42470000 	.word	0x42470000
 8004e78:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fd fe5c 	bl	8002b38 <HAL_GetTick>
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	4540      	cmp	r0, r8
 8004e84:	d8e3      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e88:	079b      	lsls	r3, r3, #30
 8004e8a:	d5f7      	bpl.n	8004e7c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	f43f af40 	beq.w	8004d12 <HAL_RCC_OscConfig+0x132>
 8004e92:	e044      	b.n	8004f1e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004e94:	4a42      	ldr	r2, [pc, #264]	; (8004fa0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4e43      	ldr	r6, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004e98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fe4d 	bl	8002b38 <HAL_GetTick>
 8004e9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea0:	e004      	b.n	8004eac <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fd fe49 	bl	8002b38 <HAL_GetTick>
 8004ea6:	1b40      	subs	r0, r0, r5
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d8d0      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eac:	6833      	ldr	r3, [r6, #0]
 8004eae:	0799      	lsls	r1, r3, #30
 8004eb0:	d4f7      	bmi.n	8004ea2 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	e6f9      	b.n	8004caa <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb6:	2801      	cmp	r0, #1
 8004eb8:	f43f af48 	beq.w	8004d4c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004ebc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec4:	4291      	cmp	r1, r2
 8004ec6:	f47f af64 	bne.w	8004d92 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ecc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	4291      	cmp	r1, r2
 8004ed2:	f47f af5e 	bne.w	8004d92 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ed8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004edc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ede:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004ee2:	f47f af56 	bne.w	8004d92 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004eee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004ef4:	f47f af4d 	bne.w	8004d92 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004efa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efe:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004f02:	bf14      	ite	ne
 8004f04:	2001      	movne	r0, #1
 8004f06:	2000      	moveq	r0, #0
 8004f08:	e720      	b.n	8004d4c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f0a:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <HAL_RCC_OscConfig+0x3c4>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f1a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f1c:	e76d      	b.n	8004dfa <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_RCC_OscConfig+0x3c4>)
 8004f20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6413      	str	r3, [r2, #64]	; 0x40
 8004f28:	e6f3      	b.n	8004d12 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004f2a:	2001      	movs	r0, #1
}
 8004f2c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <HAL_RCC_OscConfig+0x3c4>)
 8004f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f32:	f042 0204 	orr.w	r2, r2, #4
 8004f36:	671a      	str	r2, [r3, #112]	; 0x70
 8004f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f40:	e78e      	b.n	8004e60 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8004f42:	f7fd fdf9 	bl	8002b38 <HAL_GetTick>
 8004f46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	e005      	b.n	8004f56 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fd fdf5 	bl	8002b38 <HAL_GetTick>
 8004f4e:	1b80      	subs	r0, r0, r6
 8004f50:	2802      	cmp	r0, #2
 8004f52:	f63f af7c 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	0199      	lsls	r1, r3, #6
 8004f5a:	d4f6      	bmi.n	8004f4a <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f5c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004f60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f62:	430b      	orrs	r3, r1
 8004f64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004f68:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004f6c:	0852      	lsrs	r2, r2, #1
 8004f6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004f72:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004f74:	490a      	ldr	r1, [pc, #40]	; (8004fa0 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004f7a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004f7e:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004f80:	f7fd fdda 	bl	8002b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f84:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8004f86:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f88:	e005      	b.n	8004f96 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fd fdd5 	bl	8002b38 <HAL_GetTick>
 8004f8e:	1b00      	subs	r0, r0, r4
 8004f90:	2802      	cmp	r0, #2
 8004f92:	f63f af5c 	bhi.w	8004e4e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	019a      	lsls	r2, r3, #6
 8004f9a:	d5f6      	bpl.n	8004f8a <HAL_RCC_OscConfig+0x3aa>
 8004f9c:	e6d5      	b.n	8004d4a <HAL_RCC_OscConfig+0x16a>
 8004f9e:	bf00      	nop
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa8:	4916      	ldr	r1, [pc, #88]	; (8005004 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004faa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fac:	688b      	ldr	r3, [r1, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d01b      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x46>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d117      	bne.n	8004fea <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fbc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fc8:	d113      	bne.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fca:	480f      	ldr	r0, [pc, #60]	; (8005008 <HAL_RCC_GetSysClockFreq+0x60>)
 8004fcc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004fd0:	fba1 0100 	umull	r0, r1, r1, r0
 8004fd4:	f7fb fd12 	bl	80009fc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004fe4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004fe8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004fea:	4807      	ldr	r0, [pc, #28]	; (8005008 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004fec:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fee:	4807      	ldr	r0, [pc, #28]	; (800500c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004ff0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4806      	ldr	r0, [pc, #24]	; (800500c <HAL_RCC_GetSysClockFreq+0x64>)
 8004ff4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	fba1 0100 	umull	r0, r1, r1, r0
 8004ffe:	f7fb fcfd 	bl	80009fc <__aeabi_uldivmod>
 8005002:	e7e9      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8005004:	40023800 	.word	0x40023800
 8005008:	00f42400 	.word	0x00f42400
 800500c:	007a1200 	.word	0x007a1200

08005010 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005010:	2800      	cmp	r0, #0
 8005012:	f000 8087 	beq.w	8005124 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005016:	4a48      	ldr	r2, [pc, #288]	; (8005138 <HAL_RCC_ClockConfig+0x128>)
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	428b      	cmp	r3, r1
{
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	460d      	mov	r5, r1
 8005026:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	d209      	bcs.n	800503e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	b2cb      	uxtb	r3, r1
 800502c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	428b      	cmp	r3, r1
 8005036:	d002      	beq.n	800503e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
}
 800503a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0798      	lsls	r0, r3, #30
 8005042:	d514      	bpl.n	800506e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	0759      	lsls	r1, r3, #29
 8005046:	d504      	bpl.n	8005052 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	493c      	ldr	r1, [pc, #240]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 800504a:	688a      	ldr	r2, [r1, #8]
 800504c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005050:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005052:	071a      	lsls	r2, r3, #28
 8005054:	d504      	bpl.n	8005060 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005056:	4939      	ldr	r1, [pc, #228]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800505e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4936      	ldr	r1, [pc, #216]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 8005062:	68a0      	ldr	r0, [r4, #8]
 8005064:	688a      	ldr	r2, [r1, #8]
 8005066:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800506a:	4302      	orrs	r2, r0
 800506c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	07df      	lsls	r7, r3, #31
 8005070:	d521      	bpl.n	80050b6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	6862      	ldr	r2, [r4, #4]
 8005074:	2a01      	cmp	r2, #1
 8005076:	d057      	beq.n	8005128 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005078:	1e93      	subs	r3, r2, #2
 800507a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507c:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 800507e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005080:	d94d      	bls.n	800511e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005082:	0799      	lsls	r1, r3, #30
 8005084:	d5d8      	bpl.n	8005038 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005086:	4e2d      	ldr	r6, [pc, #180]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 8005088:	68b3      	ldr	r3, [r6, #8]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	4313      	orrs	r3, r2
 8005090:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005092:	f7fd fd51 	bl	8002b38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800509a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509c:	e004      	b.n	80050a8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509e:	f7fd fd4b 	bl	8002b38 <HAL_GetTick>
 80050a2:	1bc0      	subs	r0, r0, r7
 80050a4:	4540      	cmp	r0, r8
 80050a6:	d844      	bhi.n	8005132 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a8:	68b3      	ldr	r3, [r6, #8]
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050b4:	d1f3      	bne.n	800509e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050b6:	4a20      	ldr	r2, [pc, #128]	; (8005138 <HAL_RCC_ClockConfig+0x128>)
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	42ab      	cmp	r3, r5
 80050c0:	d906      	bls.n	80050d0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	b2eb      	uxtb	r3, r5
 80050c4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	d1b3      	bne.n	8005038 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	075a      	lsls	r2, r3, #29
 80050d4:	d506      	bpl.n	80050e4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d6:	4919      	ldr	r1, [pc, #100]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 80050d8:	68e0      	ldr	r0, [r4, #12]
 80050da:	688a      	ldr	r2, [r1, #8]
 80050dc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80050e0:	4302      	orrs	r2, r0
 80050e2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	071b      	lsls	r3, r3, #28
 80050e6:	d507      	bpl.n	80050f8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 80050ea:	6921      	ldr	r1, [r4, #16]
 80050ec:	6893      	ldr	r3, [r2, #8]
 80050ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80050f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80050f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050f8:	f7ff ff56 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 80050fc:	4a0f      	ldr	r2, [pc, #60]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 80050fe:	4c10      	ldr	r4, [pc, #64]	; (8005140 <HAL_RCC_ClockConfig+0x130>)
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	4910      	ldr	r1, [pc, #64]	; (8005144 <HAL_RCC_ClockConfig+0x134>)
 8005104:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005108:	4603      	mov	r3, r0
 800510a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800510c:	480e      	ldr	r0, [pc, #56]	; (8005148 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800510e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005110:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005114:	f7fd fcc6 	bl	8002aa4 <HAL_InitTick>
  return HAL_OK;
 8005118:	2000      	movs	r0, #0
}
 800511a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	0198      	lsls	r0, r3, #6
 8005120:	d4b1      	bmi.n	8005086 <HAL_RCC_ClockConfig+0x76>
 8005122:	e789      	b.n	8005038 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005124:	2001      	movs	r0, #1
}
 8005126:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <HAL_RCC_ClockConfig+0x12c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	039e      	lsls	r6, r3, #14
 800512e:	d4aa      	bmi.n	8005086 <HAL_RCC_ClockConfig+0x76>
 8005130:	e782      	b.n	8005038 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8005132:	2003      	movs	r0, #3
 8005134:	e781      	b.n	800503a <HAL_RCC_ClockConfig+0x2a>
 8005136:	bf00      	nop
 8005138:	40023c00 	.word	0x40023c00
 800513c:	40023800 	.word	0x40023800
 8005140:	08007738 	.word	0x08007738
 8005144:	20000048 	.word	0x20000048
 8005148:	20000050 	.word	0x20000050

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800514e:	4905      	ldr	r1, [pc, #20]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4a05      	ldr	r2, [pc, #20]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800515a:	5cd3      	ldrb	r3, [r2, r3]
}
 800515c:	40d8      	lsrs	r0, r3
 800515e:	4770      	bx	lr
 8005160:	40023800 	.word	0x40023800
 8005164:	20000048 	.word	0x20000048
 8005168:	08007748 	.word	0x08007748

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800516e:	4905      	ldr	r1, [pc, #20]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a05      	ldr	r2, [pc, #20]	; (8005188 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005174:	6808      	ldr	r0, [r1, #0]
 8005176:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800517a:	5cd3      	ldrb	r3, [r2, r3]
}
 800517c:	40d8      	lsrs	r0, r3
 800517e:	4770      	bx	lr
 8005180:	40023800 	.word	0x40023800
 8005184:	20000048 	.word	0x20000048
 8005188:	08007748 	.word	0x08007748

0800518c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	2800      	cmp	r0, #0
 800518e:	d076      	beq.n	800527e <HAL_TIM_Base_Init+0xf2>
{
 8005190:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005196:	4604      	mov	r4, r0
 8005198:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800519c:	2b00      	cmp	r3, #0
 800519e:	d055      	beq.n	800524c <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a2:	4938      	ldr	r1, [pc, #224]	; (8005284 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	2302      	movs	r3, #2
 80051a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051aa:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80051ac:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ae:	d052      	beq.n	8005256 <HAL_TIM_Base_Init+0xca>
 80051b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051b4:	d021      	beq.n	80051fa <HAL_TIM_Base_Init+0x6e>
 80051b6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80051ba:	428a      	cmp	r2, r1
 80051bc:	d01d      	beq.n	80051fa <HAL_TIM_Base_Init+0x6e>
 80051be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051c2:	428a      	cmp	r2, r1
 80051c4:	d019      	beq.n	80051fa <HAL_TIM_Base_Init+0x6e>
 80051c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ca:	428a      	cmp	r2, r1
 80051cc:	d015      	beq.n	80051fa <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ce:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80051d2:	428a      	cmp	r2, r1
 80051d4:	d015      	beq.n	8005202 <HAL_TIM_Base_Init+0x76>
 80051d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051da:	428a      	cmp	r2, r1
 80051dc:	d011      	beq.n	8005202 <HAL_TIM_Base_Init+0x76>
 80051de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051e2:	428a      	cmp	r2, r1
 80051e4:	d00d      	beq.n	8005202 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e6:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ee:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80051f0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f8:	e010      	b.n	800521c <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80051fa:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005200:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005202:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005212:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005214:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005216:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800521a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	2301      	movs	r3, #1
 800521e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005228:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800522c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005230:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005244:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005248:	2000      	movs	r0, #0
}
 800524a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800524c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005250:	f7fd fa66 	bl	8002720 <HAL_TIM_Base_MspInit>
 8005254:	e7a4      	b.n	80051a0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005256:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005258:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800525e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005264:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005266:	69a1      	ldr	r1, [r4, #24]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800526e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005270:	68e3      	ldr	r3, [r4, #12]
 8005272:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	6963      	ldr	r3, [r4, #20]
 800527a:	6313      	str	r3, [r2, #48]	; 0x30
 800527c:	e7ce      	b.n	800521c <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 800527e:	2001      	movs	r0, #1
}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000

08005288 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800528c:	2b01      	cmp	r3, #1
 800528e:	d124      	bne.n	80052da <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005290:	6803      	ldr	r3, [r0, #0]
 8005292:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529c:	d012      	beq.n	80052c4 <HAL_TIM_Base_Start+0x3c>
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d00f      	beq.n	80052c4 <HAL_TIM_Base_Start+0x3c>
 80052a4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <HAL_TIM_Base_Start+0x3c>
 80052ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_Base_Start+0x3c>
 80052b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <HAL_TIM_Base_Start+0x3c>
 80052bc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	2a06      	cmp	r2, #6
 80052cc:	d007      	beq.n	80052de <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80052d4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	4770      	bx	lr
    return HAL_ERROR;
 80052da:	2001      	movs	r0, #1
 80052dc:	4770      	bx	lr
  return HAL_OK;
 80052de:	2000      	movs	r0, #0
}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000

080052e8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80052e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d127      	bne.n	8005340 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	4915      	ldr	r1, [pc, #84]	; (8005348 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	2202      	movs	r2, #2
 80052f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fa:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	d011      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x42>
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d00e      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x42>
 800530c:	4a0f      	ldr	r2, [pc, #60]	; (800534c <HAL_TIM_Base_Start_IT+0x64>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00b      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x42>
 8005312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x42>
 800531a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x42>
 8005322:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005326:	4293      	cmp	r3, r2
 8005328:	d104      	bne.n	8005334 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	2a06      	cmp	r2, #6
 8005332:	d007      	beq.n	8005344 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800533a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	4770      	bx	lr
    return HAL_ERROR;
 8005340:	2001      	movs	r0, #1
 8005342:	4770      	bx	lr
  return HAL_OK;
 8005344:	2000      	movs	r0, #0
}
 8005346:	4770      	bx	lr
 8005348:	40010000 	.word	0x40010000
 800534c:	40000400 	.word	0x40000400

08005350 <HAL_TIM_PWM_MspInit>:
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop

08005354 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005354:	2800      	cmp	r0, #0
 8005356:	d076      	beq.n	8005446 <HAL_TIM_PWM_Init+0xf2>
{
 8005358:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800535e:	4604      	mov	r4, r0
 8005360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005364:	2b00      	cmp	r3, #0
 8005366:	d055      	beq.n	8005414 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536a:	4938      	ldr	r1, [pc, #224]	; (800544c <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	2302      	movs	r3, #2
 800536e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005372:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005374:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005376:	d052      	beq.n	800541e <HAL_TIM_PWM_Init+0xca>
 8005378:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800537c:	d021      	beq.n	80053c2 <HAL_TIM_PWM_Init+0x6e>
 800537e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005382:	428a      	cmp	r2, r1
 8005384:	d01d      	beq.n	80053c2 <HAL_TIM_PWM_Init+0x6e>
 8005386:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800538a:	428a      	cmp	r2, r1
 800538c:	d019      	beq.n	80053c2 <HAL_TIM_PWM_Init+0x6e>
 800538e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005392:	428a      	cmp	r2, r1
 8005394:	d015      	beq.n	80053c2 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005396:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800539a:	428a      	cmp	r2, r1
 800539c:	d015      	beq.n	80053ca <HAL_TIM_PWM_Init+0x76>
 800539e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053a2:	428a      	cmp	r2, r1
 80053a4:	d011      	beq.n	80053ca <HAL_TIM_PWM_Init+0x76>
 80053a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053aa:	428a      	cmp	r2, r1
 80053ac:	d00d      	beq.n	80053ca <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ae:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80053b8:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80053ba:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053be:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	e010      	b.n	80053e4 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80053c2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053c8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053da:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80053dc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80053de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053e2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80053e4:	2301      	movs	r3, #1
 80053e6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80053f0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80053f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80053f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800540c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005410:	2000      	movs	r0, #0
}
 8005412:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005414:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005418:	f7ff ff9a 	bl	8005350 <HAL_TIM_PWM_MspInit>
 800541c:	e7a4      	b.n	8005368 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800541e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005420:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005426:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542e:	69a1      	ldr	r1, [r4, #24]
 8005430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005434:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005436:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	68e3      	ldr	r3, [r4, #12]
 800543a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800543c:	6863      	ldr	r3, [r4, #4]
 800543e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	6313      	str	r3, [r2, #48]	; 0x30
 8005444:	e7ce      	b.n	80053e4 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000

08005450 <HAL_TIM_PWM_Start>:
 8005450:	bb99      	cbnz	r1, 80054ba <HAL_TIM_PWM_Start+0x6a>
 8005452:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005456:	2b01      	cmp	r3, #1
 8005458:	d143      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x92>
 800545a:	2302      	movs	r3, #2
 800545c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005460:	6803      	ldr	r3, [r0, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	6a18      	ldr	r0, [r3, #32]
 8005466:	f001 011f 	and.w	r1, r1, #31
 800546a:	fa02 f101 	lsl.w	r1, r2, r1
 800546e:	ea20 0001 	bic.w	r0, r0, r1
 8005472:	6218      	str	r0, [r3, #32]
 8005474:	6a18      	ldr	r0, [r3, #32]
 8005476:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_TIM_PWM_Start+0xbc>)
 8005478:	4301      	orrs	r1, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	6219      	str	r1, [r3, #32]
 800547e:	d040      	beq.n	8005502 <HAL_TIM_PWM_Start+0xb2>
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d00e      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x54>
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_TIM_PWM_Start+0xc0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x54>
 800548c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x54>
 8005494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x54>
 800549c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0x5e>
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	f002 0207 	and.w	r2, r2, #7
 80054aa:	2a06      	cmp	r2, #6
 80054ac:	d027      	beq.n	80054fe <HAL_TIM_PWM_Start+0xae>
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	2000      	movs	r0, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	4770      	bx	lr
 80054ba:	2904      	cmp	r1, #4
 80054bc:	d013      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x96>
 80054be:	2908      	cmp	r1, #8
 80054c0:	d00b      	beq.n	80054da <HAL_TIM_PWM_Start+0x8a>
 80054c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10b      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x92>
 80054ca:	2904      	cmp	r1, #4
 80054cc:	d00f      	beq.n	80054ee <HAL_TIM_PWM_Start+0x9e>
 80054ce:	2908      	cmp	r1, #8
 80054d0:	d011      	beq.n	80054f6 <HAL_TIM_PWM_Start+0xa6>
 80054d2:	2302      	movs	r3, #2
 80054d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80054d8:	e7c2      	b.n	8005460 <HAL_TIM_PWM_Start+0x10>
 80054da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d009      	beq.n	80054f6 <HAL_TIM_PWM_Start+0xa6>
 80054e2:	2001      	movs	r0, #1
 80054e4:	4770      	bx	lr
 80054e6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d1f9      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x92>
 80054ee:	2302      	movs	r3, #2
 80054f0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80054f4:	e7b4      	b.n	8005460 <HAL_TIM_PWM_Start+0x10>
 80054f6:	2302      	movs	r3, #2
 80054f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80054fc:	e7b0      	b.n	8005460 <HAL_TIM_PWM_Start+0x10>
 80054fe:	2000      	movs	r0, #0
 8005500:	4770      	bx	lr
 8005502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
 800550a:	e7cb      	b.n	80054a4 <HAL_TIM_PWM_Start+0x54>
 800550c:	40010000 	.word	0x40010000
 8005510:	40000400 	.word	0x40000400

08005514 <HAL_TIM_IC_MspInit>:
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop

08005518 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005518:	2800      	cmp	r0, #0
 800551a:	d076      	beq.n	800560a <HAL_TIM_IC_Init+0xf2>
{
 800551c:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800551e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005522:	4604      	mov	r4, r0
 8005524:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005528:	2b00      	cmp	r3, #0
 800552a:	d055      	beq.n	80055d8 <HAL_TIM_IC_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552e:	4938      	ldr	r1, [pc, #224]	; (8005610 <HAL_TIM_IC_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	2302      	movs	r3, #2
 8005532:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005536:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005538:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553a:	d052      	beq.n	80055e2 <HAL_TIM_IC_Init+0xca>
 800553c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005540:	d021      	beq.n	8005586 <HAL_TIM_IC_Init+0x6e>
 8005542:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005546:	428a      	cmp	r2, r1
 8005548:	d01d      	beq.n	8005586 <HAL_TIM_IC_Init+0x6e>
 800554a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800554e:	428a      	cmp	r2, r1
 8005550:	d019      	beq.n	8005586 <HAL_TIM_IC_Init+0x6e>
 8005552:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005556:	428a      	cmp	r2, r1
 8005558:	d015      	beq.n	8005586 <HAL_TIM_IC_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800555e:	428a      	cmp	r2, r1
 8005560:	d015      	beq.n	800558e <HAL_TIM_IC_Init+0x76>
 8005562:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005566:	428a      	cmp	r2, r1
 8005568:	d011      	beq.n	800558e <HAL_TIM_IC_Init+0x76>
 800556a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800556e:	428a      	cmp	r2, r1
 8005570:	d00d      	beq.n	800558e <HAL_TIM_IC_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005572:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800557c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800557e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005580:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005582:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005584:	e010      	b.n	80055a8 <HAL_TIM_IC_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005586:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800558c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005590:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005596:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800559c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80055a0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80055a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055a6:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80055a8:	2301      	movs	r3, #1
 80055aa:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80055b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80055b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80055cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80055d4:	2000      	movs	r0, #0
}
 80055d6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80055d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80055dc:	f7ff ff9a 	bl	8005514 <HAL_TIM_IC_MspInit>
 80055e0:	e7a4      	b.n	800552c <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80055e2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055ea:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f2:	69a1      	ldr	r1, [r4, #24]
 80055f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80055fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055fc:	68e3      	ldr	r3, [r4, #12]
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	6963      	ldr	r3, [r4, #20]
 8005606:	6313      	str	r3, [r2, #48]	; 0x30
 8005608:	e7ce      	b.n	80055a8 <HAL_TIM_IC_Init+0x90>
    return HAL_ERROR;
 800560a:	2001      	movs	r0, #1
}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000

08005614 <HAL_TIM_IC_Start_DMA>:
{
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005618:	2900      	cmp	r1, #0
 800561a:	d156      	bne.n	80056ca <HAL_TIM_IC_Start_DMA+0xb6>
 800561c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005620:	f894 c042 	ldrb.w	ip, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005624:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005626:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800562a:	2802      	cmp	r0, #2
 800562c:	d048      	beq.n	80056c0 <HAL_TIM_IC_Start_DMA+0xac>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800562e:	f1bc 0f02 	cmp.w	ip, #2
 8005632:	d066      	beq.n	8005702 <HAL_TIM_IC_Start_DMA+0xee>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005634:	2801      	cmp	r0, #1
 8005636:	d146      	bne.n	80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005638:	f1bc 0f01 	cmp.w	ip, #1
 800563c:	d143      	bne.n	80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
    if ((pData == NULL) && (Length > 0U))
 800563e:	2a00      	cmp	r2, #0
 8005640:	d03f      	beq.n	80056c2 <HAL_TIM_IC_Start_DMA+0xae>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005642:	2900      	cmp	r1, #0
 8005644:	d15f      	bne.n	8005706 <HAL_TIM_IC_Start_DMA+0xf2>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005646:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005648:	4d6b      	ldr	r5, [pc, #428]	; (80057f8 <HAL_TIM_IC_Start_DMA+0x1e4>)
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564a:	2002      	movs	r0, #2
 800564c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005650:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005654:	6a08      	ldr	r0, [r1, #32]
 8005656:	f020 0001 	bic.w	r0, r0, #1
 800565a:	6208      	str	r0, [r1, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800565c:	6a08      	ldr	r0, [r1, #32]
 800565e:	f040 0001 	orr.w	r0, r0, #1
 8005662:	6208      	str	r0, [r1, #32]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005664:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005666:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005668:	4d64      	ldr	r5, [pc, #400]	; (80057fc <HAL_TIM_IC_Start_DMA+0x1e8>)
 800566a:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800566c:	4d64      	ldr	r5, [pc, #400]	; (8005800 <HAL_TIM_IC_Start_DMA+0x1ec>)
 800566e:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005670:	3134      	adds	r1, #52	; 0x34
 8005672:	f7fd fb89 	bl	8002d88 <HAL_DMA_Start_IT>
 8005676:	bb30      	cbnz	r0, 80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	68eb      	ldr	r3, [r5, #12]
 800567c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005680:	60eb      	str	r3, [r5, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005682:	4b60      	ldr	r3, [pc, #384]	; (8005804 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8005684:	429d      	cmp	r5, r3
 8005686:	d012      	beq.n	80056ae <HAL_TIM_IC_Start_DMA+0x9a>
 8005688:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800568c:	d00f      	beq.n	80056ae <HAL_TIM_IC_Start_DMA+0x9a>
 800568e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005692:	429d      	cmp	r5, r3
 8005694:	d00b      	beq.n	80056ae <HAL_TIM_IC_Start_DMA+0x9a>
 8005696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800569a:	429d      	cmp	r5, r3
 800569c:	d007      	beq.n	80056ae <HAL_TIM_IC_Start_DMA+0x9a>
 800569e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a2:	429d      	cmp	r5, r3
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IC_Start_DMA+0x9a>
 80056a6:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80056aa:	429d      	cmp	r5, r3
 80056ac:	d104      	bne.n	80056b8 <HAL_TIM_IC_Start_DMA+0xa4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ae:	68ab      	ldr	r3, [r5, #8]
 80056b0:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d003      	beq.n	80056c0 <HAL_TIM_IC_Start_DMA+0xac>
    __HAL_TIM_ENABLE(htim);
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	602b      	str	r3, [r5, #0]
}
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) && (Length > 0U))
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0bd      	beq.n	8005642 <HAL_TIM_IC_Start_DMA+0x2e>
    return HAL_ERROR;
 80056c6:	2001      	movs	r0, #1
}
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056ca:	2904      	cmp	r1, #4
 80056cc:	d009      	beq.n	80056e2 <HAL_TIM_IC_Start_DMA+0xce>
 80056ce:	2908      	cmp	r1, #8
 80056d0:	d00f      	beq.n	80056f2 <HAL_TIM_IC_Start_DMA+0xde>
 80056d2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056d6:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056da:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056dc:	fa5f fc8c 	uxtb.w	ip, ip
 80056e0:	e7a3      	b.n	800562a <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056e2:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056e6:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056ea:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056ec:	fa5f fc8c 	uxtb.w	ip, ip
 80056f0:	e79b      	b.n	800562a <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056f2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056f6:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056fa:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056fc:	fa5f fc8c 	uxtb.w	ip, ip
 8005700:	e793      	b.n	800562a <HAL_TIM_IC_Start_DMA+0x16>
    return HAL_BUSY;
 8005702:	4660      	mov	r0, ip
}
 8005704:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	2904      	cmp	r1, #4
 8005708:	d040      	beq.n	800578c <HAL_TIM_IC_Start_DMA+0x178>
 800570a:	2908      	cmp	r1, #8
 800570c:	d01d      	beq.n	800574a <HAL_TIM_IC_Start_DMA+0x136>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570e:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005710:	2002      	movs	r0, #2
 8005712:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800571a:	6a2e      	ldr	r6, [r5, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800571c:	f001 0c1f 	and.w	ip, r1, #31
 8005720:	2001      	movs	r0, #1
 8005722:	fa00 f00c 	lsl.w	r0, r0, ip
  TIMx->CCER &= ~tmp;
 8005726:	ea26 0600 	bic.w	r6, r6, r0
 800572a:	622e      	str	r6, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800572c:	6a2e      	ldr	r6, [r5, #32]
  switch (Channel)
 800572e:	3904      	subs	r1, #4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005730:	4330      	orrs	r0, r6
 8005732:	6228      	str	r0, [r5, #32]
  switch (Channel)
 8005734:	2908      	cmp	r1, #8
 8005736:	d806      	bhi.n	8005746 <HAL_TIM_IC_Start_DMA+0x132>
 8005738:	e8df f001 	tbb	[pc, r1]
 800573c:	05050536 	.word	0x05050536
 8005740:	05050515 	.word	0x05050515
 8005744:	49          	.byte	0x49
 8005745:	00          	.byte	0x00
 8005746:	2001      	movs	r0, #1
 8005748:	e79b      	b.n	8005682 <HAL_TIM_IC_Start_DMA+0x6e>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800574a:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574c:	2102      	movs	r1, #2
 800574e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  TIMx->CCER &= ~tmp;
 8005756:	6a29      	ldr	r1, [r5, #32]
 8005758:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800575c:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800575e:	6a29      	ldr	r1, [r5, #32]
 8005760:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005764:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005766:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005768:	f105 013c 	add.w	r1, r5, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800576c:	4d22      	ldr	r5, [pc, #136]	; (80057f8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800576e:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005770:	4d22      	ldr	r5, [pc, #136]	; (80057fc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8005772:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005774:	4d22      	ldr	r5, [pc, #136]	; (8005800 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8005776:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005778:	f7fd fb06 	bl	8002d88 <HAL_DMA_Start_IT>
 800577c:	2800      	cmp	r0, #0
 800577e:	d1a2      	bne.n	80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	68eb      	ldr	r3, [r5, #12]
 8005784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005788:	60eb      	str	r3, [r5, #12]
      break;
 800578a:	e77a      	b.n	8005682 <HAL_TIM_IC_Start_DMA+0x6e>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578c:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	2102      	movs	r1, #2
 8005790:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005794:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8005798:	6a29      	ldr	r1, [r5, #32]
 800579a:	f021 0110 	bic.w	r1, r1, #16
 800579e:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a0:	6a29      	ldr	r1, [r5, #32]
 80057a2:	f041 0110 	orr.w	r1, r1, #16
 80057a6:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80057a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80057aa:	f105 0138 	add.w	r1, r5, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80057ae:	4d12      	ldr	r5, [pc, #72]	; (80057f8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 80057b0:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80057b2:	4d12      	ldr	r5, [pc, #72]	; (80057fc <HAL_TIM_IC_Start_DMA+0x1e8>)
 80057b4:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80057b6:	4d12      	ldr	r5, [pc, #72]	; (8005800 <HAL_TIM_IC_Start_DMA+0x1ec>)
 80057b8:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80057ba:	f7fd fae5 	bl	8002d88 <HAL_DMA_Start_IT>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d181      	bne.n	80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80057c2:	6825      	ldr	r5, [r4, #0]
 80057c4:	68eb      	ldr	r3, [r5, #12]
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ca:	60eb      	str	r3, [r5, #12]
      break;
 80057cc:	e759      	b.n	8005682 <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80057ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80057d0:	f105 0140 	add.w	r1, r5, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80057d4:	4d08      	ldr	r5, [pc, #32]	; (80057f8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 80057d6:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80057d8:	4d08      	ldr	r5, [pc, #32]	; (80057fc <HAL_TIM_IC_Start_DMA+0x1e8>)
 80057da:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80057dc:	4d08      	ldr	r5, [pc, #32]	; (8005800 <HAL_TIM_IC_Start_DMA+0x1ec>)
 80057de:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80057e0:	f7fd fad2 	bl	8002d88 <HAL_DMA_Start_IT>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f47f af6e 	bne.w	80056c6 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	68eb      	ldr	r3, [r5, #12]
 80057ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f2:	60eb      	str	r3, [r5, #12]
      break;
 80057f4:	e745      	b.n	8005682 <HAL_TIM_IC_Start_DMA+0x6e>
 80057f6:	bf00      	nop
 80057f8:	08005d29 	.word	0x08005d29
 80057fc:	08005dc1 	.word	0x08005dc1
 8005800:	08005f7d 	.word	0x08005f7d
 8005804:	40010000 	.word	0x40010000

08005808 <HAL_TIM_IC_ConfigChannel>:
{
 8005808:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800580a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800580e:	2801      	cmp	r0, #1
 8005810:	f000 80cc 	beq.w	80059ac <HAL_TIM_IC_ConfigChannel+0x1a4>
 8005814:	2001      	movs	r0, #1
{
 8005816:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005818:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800581c:	b15a      	cbz	r2, 8005836 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 800581e:	2a04      	cmp	r2, #4
 8005820:	d04c      	beq.n	80058bc <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 8005822:	2a08      	cmp	r2, #8
 8005824:	f000 809a 	beq.w	800595c <HAL_TIM_IC_ConfigChannel+0x154>
  else if (Channel == TIM_CHANNEL_4)
 8005828:	2a0c      	cmp	r2, #12
 800582a:	d071      	beq.n	8005910 <HAL_TIM_IC_ConfigChannel+0x108>
  __HAL_UNLOCK(htim);
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005832:	bcf0      	pop	{r4, r5, r6, r7}
 8005834:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8005836:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005838:	f8df c174 	ldr.w	ip, [pc, #372]	; 80059b0 <HAL_TIM_IC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583c:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 800583e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005840:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 8005844:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005848:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584c:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 800584e:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005850:	d015      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
 8005852:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005856:	d012      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
 8005858:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 800585c:	4562      	cmp	r2, ip
 800585e:	d00e      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
 8005860:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8005864:	4562      	cmp	r2, ip
 8005866:	d00a      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
 8005868:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800586c:	4562      	cmp	r2, ip
 800586e:	d006      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
 8005870:	f50c 3c9a 	add.w	ip, ip, #78848	; 0x13400
 8005874:	4562      	cmp	r2, ip
 8005876:	d002      	beq.n	800587e <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005878:	f047 0c01 	orr.w	ip, r7, #1
 800587c:	e003      	b.n	8005886 <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800587e:	f027 0c03 	bic.w	ip, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8005882:	ea45 0c0c 	orr.w	ip, r5, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005886:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005888:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800588c:	b2c0      	uxtb	r0, r0
 800588e:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 8005892:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005894:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005898:	f004 000a 	and.w	r0, r4, #10
 800589c:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 800589e:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058a0:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058a2:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058a4:	f020 000c 	bic.w	r0, r0, #12
 80058a8:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058aa:	6991      	ldr	r1, [r2, #24]
 80058ac:	4321      	orrs	r1, r4
 80058ae:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2000      	movs	r0, #0
}
 80058b8:	bcf0      	pop	{r4, r5, r6, r7}
 80058ba:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c2:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058c4:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058ca:	f000 04a0 	and.w	r4, r0, #160	; 0xa0
    TIM_TI2_SetConfig(htim->Instance,
 80058ce:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d0:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058d2:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 80058d4:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058d6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058da:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058de:	0300      	lsls	r0, r0, #12
 80058e0:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058e6:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80058e8:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80058ea:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ec:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058f0:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer;
 80058f2:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058f4:	6994      	ldr	r4, [r2, #24]
 80058f6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80058fa:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058fc:	6991      	ldr	r1, [r2, #24]
 80058fe:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005902:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2000      	movs	r0, #0
}
 800590c:	bcf0      	pop	{r4, r5, r6, r7}
 800590e:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005916:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005918:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800591e:	f400 4420 	and.w	r4, r0, #40960	; 0xa000
    TIM_TI4_SetConfig(htim->Instance,
 8005922:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005924:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005926:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8005928:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800592a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800592e:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005930:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005934:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005936:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800593a:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800593c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 800593e:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005940:	f420 4020 	bic.w	r0, r0, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005944:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer ;
 8005946:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005948:	69d4      	ldr	r4, [r2, #28]
 800594a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800594e:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005950:	69d1      	ldr	r1, [r2, #28]
 8005952:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005958:	61d1      	str	r1, [r2, #28]
 800595a:	e767      	b.n	800582c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	e9d1 0400 	ldrd	r0, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005962:	6a16      	ldr	r6, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005964:	0200      	lsls	r0, r0, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800596a:	f400 6520 	and.w	r5, r0, #2560	; 0xa00
    TIM_TI3_SetConfig(htim->Instance,
 800596e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005970:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005972:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8005974:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005976:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 800597a:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800597c:	0100      	lsls	r0, r0, #4
 800597e:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005980:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005984:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8005986:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8005988:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800598a:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800598e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8005990:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005992:	69d4      	ldr	r4, [r2, #28]
 8005994:	f024 040c 	bic.w	r4, r4, #12
 8005998:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800599a:	69d1      	ldr	r1, [r2, #28]
 800599c:	4331      	orrs	r1, r6
 800599e:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2000      	movs	r0, #0
}
 80059a8:	bcf0      	pop	{r4, r5, r6, r7}
 80059aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80059ac:	2002      	movs	r0, #2
}
 80059ae:	4770      	bx	lr
 80059b0:	40010000 	.word	0x40010000

080059b4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80059b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f000 80ca 	beq.w	8005b52 <HAL_TIM_PWM_ConfigChannel+0x19e>
 80059be:	2301      	movs	r3, #1
{
 80059c0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80059c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80059c6:	2a0c      	cmp	r2, #12
 80059c8:	d808      	bhi.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x28>
 80059ca:	e8df f002 	tbb	[pc, r2]
 80059ce:	073d      	.short	0x073d
 80059d0:	07680707 	.word	0x07680707
 80059d4:	07960707 	.word	0x07960707
 80059d8:	0707      	.short	0x0707
 80059da:	0e          	.byte	0x0e
 80059db:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80059dc:	2300      	movs	r3, #0
 80059de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80059e2:	2201      	movs	r2, #1
}
 80059e4:	4610      	mov	r0, r2
 80059e6:	bcf0      	pop	{r4, r5, r6, r7}
 80059e8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ea:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ec:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80059f6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80059f8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80059fa:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059fc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a04:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a0a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	4e6b      	ldr	r6, [pc, #428]	; (8005bbc <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005a10:	42b3      	cmp	r3, r6
 8005a12:	f000 80bd 	beq.w	8005b90 <HAL_TIM_PWM_ConfigChannel+0x1dc>
  TIMx->CR2 = tmpcr2;
 8005a16:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005a18:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1a:	684c      	ldr	r4, [r1, #4]
 8005a1c:	641c      	str	r4, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005a1e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a20:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a22:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2a:	69dc      	ldr	r4, [r3, #28]
 8005a2c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005a30:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005a38:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2200      	movs	r2, #0
}
 8005a42:	4610      	mov	r0, r2
 8005a44:	bcf0      	pop	{r4, r5, r6, r7}
 8005a46:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a48:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005a4a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005a54:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005a56:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a58:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a5a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a5e:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8005a60:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005a62:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8005a66:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a68:	4e54      	ldr	r6, [pc, #336]	; (8005bbc <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005a6a:	42b3      	cmp	r3, r6
 8005a6c:	d074      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8005a6e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005a72:	684c      	ldr	r4, [r1, #4]
 8005a74:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005a76:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a78:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7c:	f042 0208 	orr.w	r2, r2, #8
 8005a80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a82:	699c      	ldr	r4, [r3, #24]
 8005a84:	f024 0404 	bic.w	r4, r4, #4
 8005a88:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a8a:	6999      	ldr	r1, [r3, #24]
 8005a8c:	4329      	orrs	r1, r5
 8005a8e:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005a90:	2300      	movs	r3, #0
 8005a92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2200      	movs	r2, #0
}
 8005a98:	4610      	mov	r0, r2
 8005a9a:	bcf0      	pop	{r4, r5, r6, r7}
 8005a9c:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a9e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	f022 0210 	bic.w	r2, r2, #16
 8005aa8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005aaa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005aac:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005aae:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005aba:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005abe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac2:	4e3e      	ldr	r6, [pc, #248]	; (8005bbc <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005ac4:	42b3      	cmp	r3, r6
 8005ac6:	d054      	beq.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8005ac8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005aca:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005acc:	684c      	ldr	r4, [r1, #4]
 8005ace:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005ad0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad2:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005adc:	699c      	ldr	r4, [r3, #24]
 8005ade:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005ae2:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005aea:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005aec:	2300      	movs	r3, #0
 8005aee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2200      	movs	r2, #0
}
 8005af4:	4610      	mov	r0, r2
 8005af6:	bcf0      	pop	{r4, r5, r6, r7}
 8005af8:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005afa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005afc:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b04:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b06:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005b08:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b0c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b12:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b18:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b1c:	4e27      	ldr	r6, [pc, #156]	; (8005bbc <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005b1e:	42b3      	cmp	r3, r6
 8005b20:	d03c      	beq.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 8005b22:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005b24:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005b26:	684c      	ldr	r4, [r1, #4]
 8005b28:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005b2a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b2c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b2e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	69dc      	ldr	r4, [r3, #28]
 8005b38:	f024 0404 	bic.w	r4, r4, #4
 8005b3c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	4329      	orrs	r1, r5
 8005b42:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005b44:	2300      	movs	r3, #0
 8005b46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2200      	movs	r2, #0
}
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8005b50:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b52:	2202      	movs	r2, #2
}
 8005b54:	4610      	mov	r0, r2
 8005b56:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005b58:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005b5e:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b60:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b64:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b68:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6e:	4335      	orrs	r5, r6
 8005b70:	e77d      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b72:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b78:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b7c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b84:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b8a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8005b8e:	e79b      	b.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b92:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b96:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005b9a:	e73c      	b.n	8005a16 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005baa:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bb4:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8005bb8:	e7b3      	b.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x16e>
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000

08005bc0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005bc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d075      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0xf4>
 8005bc8:	4602      	mov	r2, r0
{
 8005bca:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005bce:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005bda:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005be4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005be6:	680b      	ldr	r3, [r1, #0]
 8005be8:	2b60      	cmp	r3, #96	; 0x60
 8005bea:	d065      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0xf8>
 8005bec:	d824      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x78>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d07c      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x12c>
 8005bf2:	d94b      	bls.n	8005c8c <HAL_TIM_ConfigClockSource+0xcc>
 8005bf4:	2b50      	cmp	r3, #80	; 0x50
 8005bf6:	d117      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf8:	6848      	ldr	r0, [r1, #4]
 8005bfa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005bfc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfe:	6a23      	ldr	r3, [r4, #32]
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c08:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005c10:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c12:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005c16:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005c18:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005c1a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c20:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005c26:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005c2a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c30:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005c34:	bc30      	pop	{r4, r5}
 8005c36:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	d038      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xf0>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d110      	bne.n	8005c66 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c44:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005c48:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4a:	432b      	orrs	r3, r5
 8005c4c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c56:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c58:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c62:	60a3      	str	r3, [r4, #8]
      break;
 8005c64:	e7e0      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005c66:	2b70      	cmp	r3, #112	; 0x70
 8005c68:	d1de      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c6a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005c6e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c70:	432b      	orrs	r3, r5
 8005c72:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c78:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c7c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c7e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005c80:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8005c88:	60a3      	str	r3, [r4, #8]
      break;
 8005c8a:	e7cd      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d002      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0xd6>
 8005c90:	d90a      	bls.n	8005ca8 <HAL_TIM_ConfigClockSource+0xe8>
 8005c92:	2b30      	cmp	r3, #48	; 0x30
 8005c94:	d1c8      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005c96:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c98:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005ca4:	60a3      	str	r3, [r4, #8]
}
 8005ca6:	e7bf      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005ca8:	f033 0110 	bics.w	r1, r3, #16
 8005cac:	d1bc      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
 8005cae:	e7f2      	b.n	8005c96 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e7b9      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8005cb4:	2002      	movs	r0, #2
}
 8005cb6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	68cb      	ldr	r3, [r1, #12]
 8005cbc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cbe:	f020 0010 	bic.w	r0, r0, #16
 8005cc2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cca:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8005cce:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd0:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8005cda:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005cdc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ce2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005ce8:	60a3      	str	r3, [r4, #8]
}
 8005cea:	e79d      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cec:	6848      	ldr	r0, [r1, #4]
 8005cee:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005cf0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	6a23      	ldr	r3, [r4, #32]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005d04:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005d0a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d0c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d0e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d14:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005d1a:	60a3      	str	r3, [r4, #8]
}
 8005d1c:	e784      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x68>
 8005d1e:	bf00      	nop

08005d20 <HAL_TIM_OC_DelayElapsedCallback>:
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop

08005d24 <HAL_TIM_IC_CaptureCallback>:
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <TIM_DMACaptureCplt>:
{
 8005d28:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2e:	4283      	cmp	r3, r0
 8005d30:	d01e      	beq.n	8005d70 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d34:	4283      	cmp	r3, r0
 8005d36:	d00b      	beq.n	8005d50 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	d027      	beq.n	8005d8e <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d40:	4283      	cmp	r3, r0
 8005d42:	d02f      	beq.n	8005da4 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff ffed 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	7723      	strb	r3, [r4, #28]
}
 8005d4e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d50:	2202      	movs	r2, #2
 8005d52:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f4      	bne.n	8005d44 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_IC_CaptureCallback(htim);
 8005d60:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	f7ff ffdd 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	7723      	strb	r3, [r4, #28]
}
 8005d6e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d70:	2201      	movs	r2, #1
 8005d72:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e4      	bne.n	8005d44 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_IC_CaptureCallback(htim);
 8005d84:	f7ff ffce 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	7723      	strb	r3, [r4, #28]
}
 8005d8c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d8e:	2204      	movs	r2, #4
 8005d90:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1d5      	bne.n	8005d44 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005da2:	e7cf      	b.n	8005d44 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da4:	2208      	movs	r2, #8
 8005da6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ca      	bne.n	8005d44 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	2301      	movs	r3, #1
 8005db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db8:	e7c4      	b.n	8005d44 <TIM_DMACaptureCplt+0x1c>
 8005dba:	bf00      	nop

08005dbc <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <TIM_DMACaptureHalfCplt>:
{
 8005dc0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	d018      	beq.n	8005dfc <TIM_DMACaptureHalfCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dcc:	4283      	cmp	r3, r0
 8005dce:	d00d      	beq.n	8005dec <TIM_DMACaptureHalfCplt+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dd2:	4283      	cmp	r3, r0
 8005dd4:	d01a      	beq.n	8005e0c <TIM_DMACaptureHalfCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dd8:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dda:	bf04      	itt	eq
 8005ddc:	2308      	moveq	r3, #8
 8005dde:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff ffeb 	bl	8005dbc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	2300      	movs	r3, #0
 8005de8:	7723      	strb	r3, [r4, #28]
}
 8005dea:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff ffe3 	bl	8005dbc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	2300      	movs	r3, #0
 8005df8:	7723      	strb	r3, [r4, #28]
}
 8005dfa:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff ffdb 	bl	8005dbc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	2300      	movs	r3, #0
 8005e08:	7723      	strb	r3, [r4, #28]
}
 8005e0a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff ffd3 	bl	8005dbc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	2300      	movs	r3, #0
 8005e18:	7723      	strb	r3, [r4, #28]
}
 8005e1a:	bd10      	pop	{r4, pc}

08005e1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <HAL_TIM_TriggerCallback>:
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e24:	6803      	ldr	r3, [r0, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	0791      	lsls	r1, r2, #30
{
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e2e:	d502      	bpl.n	8005e36 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	0792      	lsls	r2, r2, #30
 8005e34:	d45f      	bmi.n	8005ef6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	0750      	lsls	r0, r2, #29
 8005e3a:	d502      	bpl.n	8005e42 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	0751      	lsls	r1, r2, #29
 8005e40:	d446      	bmi.n	8005ed0 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	0712      	lsls	r2, r2, #28
 8005e46:	d502      	bpl.n	8005e4e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	0710      	lsls	r0, r2, #28
 8005e4c:	d42e      	bmi.n	8005eac <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	06d2      	lsls	r2, r2, #27
 8005e52:	d502      	bpl.n	8005e5a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	06d0      	lsls	r0, r2, #27
 8005e58:	d418      	bmi.n	8005e8c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	07d1      	lsls	r1, r2, #31
 8005e5e:	d502      	bpl.n	8005e66 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	07d2      	lsls	r2, r2, #31
 8005e64:	d45d      	bmi.n	8005f22 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	0610      	lsls	r0, r2, #24
 8005e6a:	d502      	bpl.n	8005e72 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	0611      	lsls	r1, r2, #24
 8005e70:	d45f      	bmi.n	8005f32 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	0652      	lsls	r2, r2, #25
 8005e76:	d502      	bpl.n	8005e7e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	0650      	lsls	r0, r2, #25
 8005e7c:	d461      	bmi.n	8005f42 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	0691      	lsls	r1, r2, #26
 8005e82:	d502      	bpl.n	8005e8a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	0692      	lsls	r2, r2, #26
 8005e88:	d443      	bmi.n	8005f12 <HAL_TIM_IRQHandler+0xee>
}
 8005e8a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e8c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e90:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e92:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e9e:	d064      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea0:	f7ff ff40 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea8:	7722      	strb	r2, [r4, #28]
 8005eaa:	e7d6      	b.n	8005e5a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eac:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eb2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebc:	d152      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	f7ff ff2f 	bl	8005d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7ff ffaa 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ecc:	7722      	strb	r2, [r4, #28]
 8005ece:	e7be      	b.n	8005e4e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed0:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed4:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee2:	d13c      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee4:	f7ff ff1c 	bl	8005d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff ff97 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	7722      	strb	r2, [r4, #28]
 8005ef4:	e7a5      	b.n	8005e42 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ef6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efa:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005efc:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	079b      	lsls	r3, r3, #30
 8005f04:	d025      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	f7ff ff0d 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f0c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	7722      	strb	r2, [r4, #28]
 8005f10:	e791      	b.n	8005e36 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f12:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005f16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f18:	611a      	str	r2, [r3, #16]
}
 8005f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005f1e:	f000 b8a7 	b.w	8006070 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f22:	f06f 0201 	mvn.w	r2, #1
 8005f26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7fb faf5 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	e799      	b.n	8005e66 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f89b 	bl	8006074 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	e797      	b.n	8005e72 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff ff69 	bl	8005e20 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	e795      	b.n	8005e7e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	f7ff fee5 	bl	8005d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff ff60 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
 8005f5c:	e7d5      	b.n	8005f0a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	f7ff fee1 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 8005f62:	e7c4      	b.n	8005eee <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	f7ff fede 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e7ae      	b.n	8005ec8 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	f7ff fed9 	bl	8005d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff ff54 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
 8005f74:	e796      	b.n	8005ea4 <HAL_TIM_IRQHandler+0x80>
 8005f76:	bf00      	nop

08005f78 <HAL_TIM_ErrorCallback>:
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <TIM_DMAError>:
{
 8005f7c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f82:	4283      	cmp	r3, r0
 8005f84:	d01c      	beq.n	8005fc0 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f88:	4283      	cmp	r3, r0
 8005f8a:	d00e      	beq.n	8005faa <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f8e:	4283      	cmp	r3, r0
 8005f90:	d020      	beq.n	8005fd4 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f94:	4283      	cmp	r3, r0
 8005f96:	d028      	beq.n	8005fea <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7ff ffea 	bl	8005f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	7723      	strb	r3, [r4, #28]
}
 8005fa8:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fac:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff ffdf 	bl	8005f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	7723      	strb	r3, [r4, #28]
}
 8005fbe:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff ffd5 	bl	8005f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	7723      	strb	r3, [r4, #28]
}
 8005fd2:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd6:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fdc:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff ffca 	bl	8005f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	7723      	strb	r3, [r4, #28]
}
 8005fe8:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fec:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ff2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff ffbf 	bl	8005f78 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	7723      	strb	r3, [r4, #28]
}
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006000:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d02f      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006008:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800600a:	2202      	movs	r2, #2
{
 800600c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800600e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006012:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006014:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006016:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006018:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	4a12      	ldr	r2, [pc, #72]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d012      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d00f      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800602c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800603c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006044:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006048:	4293      	cmp	r3, r2
 800604a:	d104      	bne.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800604c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800604e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006052:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006054:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006056:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006058:	2201      	movs	r2, #1
 800605a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800605e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006062:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006064:	4618      	mov	r0, r3
}
 8006066:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006068:	2002      	movs	r0, #2
}
 800606a:	4770      	bx	lr
 800606c:	40010000 	.word	0x40010000

08006070 <HAL_TIMEx_CommutCallback>:
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop

08006074 <HAL_TIMEx_BreakCallback>:
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop

08006078 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	2800      	cmp	r0, #0
 800607a:	f000 808f 	beq.w	800619c <HAL_UART_Init+0x124>
{
 800607e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006080:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006084:	4604      	mov	r4, r0
 8006086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8081 	beq.w	8006192 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006090:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006092:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8006094:	2224      	movs	r2, #36	; 0x24
 8006096:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060a4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80060aa:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ac:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ae:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060b0:	4302      	orrs	r2, r0
 80060b2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060b6:	4302      	orrs	r2, r0
 80060b8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80060ba:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80060be:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060c2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80060c4:	430a      	orrs	r2, r1
 80060c6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060cc:	4934      	ldr	r1, [pc, #208]	; (80061a0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80060d2:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d6:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d8:	d035      	beq.n	8006146 <HAL_UART_Init+0xce>
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <HAL_UART_Init+0x12c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d032      	beq.n	8006146 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060e0:	f7ff f834 	bl	800514c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e4:	69e3      	ldr	r3, [r4, #28]
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ea:	d032      	beq.n	8006152 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	2119      	movs	r1, #25
 80060f0:	009a      	lsls	r2, r3, #2
 80060f2:	fba0 0101 	umull	r0, r1, r0, r1
 80060f6:	0f9b      	lsrs	r3, r3, #30
 80060f8:	f7fa fc80 	bl	80009fc <__aeabi_uldivmod>
 80060fc:	492a      	ldr	r1, [pc, #168]	; (80061a8 <HAL_UART_Init+0x130>)
 80060fe:	fba1 3200 	umull	r3, r2, r1, r0
 8006102:	0952      	lsrs	r2, r2, #5
 8006104:	2564      	movs	r5, #100	; 0x64
 8006106:	fb05 0012 	mls	r0, r5, r2, r0
 800610a:	0100      	lsls	r0, r0, #4
 800610c:	3032      	adds	r0, #50	; 0x32
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	fba1 1000 	umull	r1, r0, r1, r0
 8006114:	0112      	lsls	r2, r2, #4
 8006116:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800611a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800612a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800612c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006130:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006136:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800613a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800613e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006142:	4628      	mov	r0, r5
}
 8006144:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006146:	f7ff f811 	bl	800516c <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800614a:	69e3      	ldr	r3, [r4, #28]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006150:	d1cc      	bne.n	80060ec <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	2119      	movs	r1, #25
 8006156:	1892      	adds	r2, r2, r2
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	415b      	adcs	r3, r3
 800615e:	fba0 0101 	umull	r0, r1, r0, r1
 8006162:	f7fa fc4b 	bl	80009fc <__aeabi_uldivmod>
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <HAL_UART_Init+0x130>)
 8006168:	fba3 2100 	umull	r2, r1, r3, r0
 800616c:	094d      	lsrs	r5, r1, #5
 800616e:	2264      	movs	r2, #100	; 0x64
 8006170:	fb02 0215 	mls	r2, r2, r5, r0
 8006174:	00d2      	lsls	r2, r2, #3
 8006176:	3232      	adds	r2, #50	; 0x32
 8006178:	fba3 3202 	umull	r3, r2, r3, r2
 800617c:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006180:	0912      	lsrs	r2, r2, #4
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006188:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800618c:	440a      	add	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	e7c4      	b.n	800611c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006192:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006196:	f7fc fb7b 	bl	8002890 <HAL_UART_MspInit>
 800619a:	e779      	b.n	8006090 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800619c:	2001      	movs	r0, #1
}
 800619e:	4770      	bx	lr
 80061a0:	40011000 	.word	0x40011000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	51eb851f 	.word	0x51eb851f

080061ac <__assert_func>:
 80061ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ae:	4614      	mov	r4, r2
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <__assert_func+0x2c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4605      	mov	r5, r0
 80061b8:	68d8      	ldr	r0, [r3, #12]
 80061ba:	b14c      	cbz	r4, 80061d0 <__assert_func+0x24>
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <__assert_func+0x30>)
 80061be:	9100      	str	r1, [sp, #0]
 80061c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061c4:	4906      	ldr	r1, [pc, #24]	; (80061e0 <__assert_func+0x34>)
 80061c6:	462b      	mov	r3, r5
 80061c8:	f000 f814 	bl	80061f4 <fiprintf>
 80061cc:	f000 fbfe 	bl	80069cc <abort>
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__assert_func+0x38>)
 80061d2:	461c      	mov	r4, r3
 80061d4:	e7f3      	b.n	80061be <__assert_func+0x12>
 80061d6:	bf00      	nop
 80061d8:	20000054 	.word	0x20000054
 80061dc:	08007758 	.word	0x08007758
 80061e0:	08007765 	.word	0x08007765
 80061e4:	08007793 	.word	0x08007793

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000054 	.word	0x20000054

080061f4 <fiprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	b503      	push	{r0, r1, lr}
 80061f8:	4601      	mov	r1, r0
 80061fa:	ab03      	add	r3, sp, #12
 80061fc:	4805      	ldr	r0, [pc, #20]	; (8006214 <fiprintf+0x20>)
 80061fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006202:	6800      	ldr	r0, [r0, #0]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f000 f85d 	bl	80062c4 <_vfiprintf_r>
 800620a:	b002      	add	sp, #8
 800620c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006210:	b003      	add	sp, #12
 8006212:	4770      	bx	lr
 8006214:	20000054 	.word	0x20000054

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4d0d      	ldr	r5, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2600      	movs	r6, #0
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4d0b      	ldr	r5, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f000 ffe2 	bl	80071f4 <_init>
 8006230:	1b64      	subs	r4, r4, r5
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2600      	movs	r6, #0
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	08007834 	.word	0x08007834
 8006254:	08007834 	.word	0x08007834
 8006258:	08007834 	.word	0x08007834
 800625c:	08007838 	.word	0x08007838

08006260 <memset>:
 8006260:	4402      	add	r2, r0
 8006262:	4603      	mov	r3, r0
 8006264:	4293      	cmp	r3, r2
 8006266:	d100      	bne.n	800626a <memset+0xa>
 8006268:	4770      	bx	lr
 800626a:	f803 1b01 	strb.w	r1, [r3], #1
 800626e:	e7f9      	b.n	8006264 <memset+0x4>

08006270 <__sfputc_r>:
 8006270:	6893      	ldr	r3, [r2, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	b410      	push	{r4}
 8006278:	6093      	str	r3, [r2, #8]
 800627a:	da08      	bge.n	800628e <__sfputc_r+0x1e>
 800627c:	6994      	ldr	r4, [r2, #24]
 800627e:	42a3      	cmp	r3, r4
 8006280:	db01      	blt.n	8006286 <__sfputc_r+0x16>
 8006282:	290a      	cmp	r1, #10
 8006284:	d103      	bne.n	800628e <__sfputc_r+0x1e>
 8006286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628a:	f000 badf 	b.w	800684c <__swbuf_r>
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	1c58      	adds	r0, r3, #1
 8006292:	6010      	str	r0, [r2, #0]
 8006294:	7019      	strb	r1, [r3, #0]
 8006296:	4608      	mov	r0, r1
 8006298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629c:	4770      	bx	lr

0800629e <__sfputs_r>:
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	18d5      	adds	r5, r2, r3
 80062a8:	42ac      	cmp	r4, r5
 80062aa:	d101      	bne.n	80062b0 <__sfputs_r+0x12>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e007      	b.n	80062c0 <__sfputs_r+0x22>
 80062b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b4:	463a      	mov	r2, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ffda 	bl	8006270 <__sfputc_r>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d1f3      	bne.n	80062a8 <__sfputs_r+0xa>
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c4 <_vfiprintf_r>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	460d      	mov	r5, r1
 80062ca:	b09d      	sub	sp, #116	; 0x74
 80062cc:	4614      	mov	r4, r2
 80062ce:	4698      	mov	r8, r3
 80062d0:	4606      	mov	r6, r0
 80062d2:	b118      	cbz	r0, 80062dc <_vfiprintf_r+0x18>
 80062d4:	6983      	ldr	r3, [r0, #24]
 80062d6:	b90b      	cbnz	r3, 80062dc <_vfiprintf_r+0x18>
 80062d8:	f000 fc9a 	bl	8006c10 <__sinit>
 80062dc:	4b89      	ldr	r3, [pc, #548]	; (8006504 <_vfiprintf_r+0x240>)
 80062de:	429d      	cmp	r5, r3
 80062e0:	d11b      	bne.n	800631a <_vfiprintf_r+0x56>
 80062e2:	6875      	ldr	r5, [r6, #4]
 80062e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e6:	07d9      	lsls	r1, r3, #31
 80062e8:	d405      	bmi.n	80062f6 <_vfiprintf_r+0x32>
 80062ea:	89ab      	ldrh	r3, [r5, #12]
 80062ec:	059a      	lsls	r2, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_vfiprintf_r+0x32>
 80062f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062f2:	f000 fd2b 	bl	8006d4c <__retarget_lock_acquire_recursive>
 80062f6:	89ab      	ldrh	r3, [r5, #12]
 80062f8:	071b      	lsls	r3, r3, #28
 80062fa:	d501      	bpl.n	8006300 <_vfiprintf_r+0x3c>
 80062fc:	692b      	ldr	r3, [r5, #16]
 80062fe:	b9eb      	cbnz	r3, 800633c <_vfiprintf_r+0x78>
 8006300:	4629      	mov	r1, r5
 8006302:	4630      	mov	r0, r6
 8006304:	f000 faf4 	bl	80068f0 <__swsetup_r>
 8006308:	b1c0      	cbz	r0, 800633c <_vfiprintf_r+0x78>
 800630a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800630c:	07dc      	lsls	r4, r3, #31
 800630e:	d50e      	bpl.n	800632e <_vfiprintf_r+0x6a>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	b01d      	add	sp, #116	; 0x74
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	4b7b      	ldr	r3, [pc, #492]	; (8006508 <_vfiprintf_r+0x244>)
 800631c:	429d      	cmp	r5, r3
 800631e:	d101      	bne.n	8006324 <_vfiprintf_r+0x60>
 8006320:	68b5      	ldr	r5, [r6, #8]
 8006322:	e7df      	b.n	80062e4 <_vfiprintf_r+0x20>
 8006324:	4b79      	ldr	r3, [pc, #484]	; (800650c <_vfiprintf_r+0x248>)
 8006326:	429d      	cmp	r5, r3
 8006328:	bf08      	it	eq
 800632a:	68f5      	ldreq	r5, [r6, #12]
 800632c:	e7da      	b.n	80062e4 <_vfiprintf_r+0x20>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	0598      	lsls	r0, r3, #22
 8006332:	d4ed      	bmi.n	8006310 <_vfiprintf_r+0x4c>
 8006334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006336:	f000 fd0a 	bl	8006d4e <__retarget_lock_release_recursive>
 800633a:	e7e9      	b.n	8006310 <_vfiprintf_r+0x4c>
 800633c:	2300      	movs	r3, #0
 800633e:	9309      	str	r3, [sp, #36]	; 0x24
 8006340:	2320      	movs	r3, #32
 8006342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006346:	f8cd 800c 	str.w	r8, [sp, #12]
 800634a:	2330      	movs	r3, #48	; 0x30
 800634c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006510 <_vfiprintf_r+0x24c>
 8006350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006354:	f04f 0901 	mov.w	r9, #1
 8006358:	4623      	mov	r3, r4
 800635a:	469a      	mov	sl, r3
 800635c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006360:	b10a      	cbz	r2, 8006366 <_vfiprintf_r+0xa2>
 8006362:	2a25      	cmp	r2, #37	; 0x25
 8006364:	d1f9      	bne.n	800635a <_vfiprintf_r+0x96>
 8006366:	ebba 0b04 	subs.w	fp, sl, r4
 800636a:	d00b      	beq.n	8006384 <_vfiprintf_r+0xc0>
 800636c:	465b      	mov	r3, fp
 800636e:	4622      	mov	r2, r4
 8006370:	4629      	mov	r1, r5
 8006372:	4630      	mov	r0, r6
 8006374:	f7ff ff93 	bl	800629e <__sfputs_r>
 8006378:	3001      	adds	r0, #1
 800637a:	f000 80aa 	beq.w	80064d2 <_vfiprintf_r+0x20e>
 800637e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006380:	445a      	add	r2, fp
 8006382:	9209      	str	r2, [sp, #36]	; 0x24
 8006384:	f89a 3000 	ldrb.w	r3, [sl]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a2 	beq.w	80064d2 <_vfiprintf_r+0x20e>
 800638e:	2300      	movs	r3, #0
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006398:	f10a 0a01 	add.w	sl, sl, #1
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a4:	931a      	str	r3, [sp, #104]	; 0x68
 80063a6:	4654      	mov	r4, sl
 80063a8:	2205      	movs	r2, #5
 80063aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ae:	4858      	ldr	r0, [pc, #352]	; (8006510 <_vfiprintf_r+0x24c>)
 80063b0:	f7f9 ff16 	bl	80001e0 <memchr>
 80063b4:	9a04      	ldr	r2, [sp, #16]
 80063b6:	b9d8      	cbnz	r0, 80063f0 <_vfiprintf_r+0x12c>
 80063b8:	06d1      	lsls	r1, r2, #27
 80063ba:	bf44      	itt	mi
 80063bc:	2320      	movmi	r3, #32
 80063be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c2:	0713      	lsls	r3, r2, #28
 80063c4:	bf44      	itt	mi
 80063c6:	232b      	movmi	r3, #43	; 0x2b
 80063c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063cc:	f89a 3000 	ldrb.w	r3, [sl]
 80063d0:	2b2a      	cmp	r3, #42	; 0x2a
 80063d2:	d015      	beq.n	8006400 <_vfiprintf_r+0x13c>
 80063d4:	9a07      	ldr	r2, [sp, #28]
 80063d6:	4654      	mov	r4, sl
 80063d8:	2000      	movs	r0, #0
 80063da:	f04f 0c0a 	mov.w	ip, #10
 80063de:	4621      	mov	r1, r4
 80063e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e4:	3b30      	subs	r3, #48	; 0x30
 80063e6:	2b09      	cmp	r3, #9
 80063e8:	d94e      	bls.n	8006488 <_vfiprintf_r+0x1c4>
 80063ea:	b1b0      	cbz	r0, 800641a <_vfiprintf_r+0x156>
 80063ec:	9207      	str	r2, [sp, #28]
 80063ee:	e014      	b.n	800641a <_vfiprintf_r+0x156>
 80063f0:	eba0 0308 	sub.w	r3, r0, r8
 80063f4:	fa09 f303 	lsl.w	r3, r9, r3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	46a2      	mov	sl, r4
 80063fe:	e7d2      	b.n	80063a6 <_vfiprintf_r+0xe2>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	1d19      	adds	r1, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	9103      	str	r1, [sp, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	bfbb      	ittet	lt
 800640c:	425b      	neglt	r3, r3
 800640e:	f042 0202 	orrlt.w	r2, r2, #2
 8006412:	9307      	strge	r3, [sp, #28]
 8006414:	9307      	strlt	r3, [sp, #28]
 8006416:	bfb8      	it	lt
 8006418:	9204      	strlt	r2, [sp, #16]
 800641a:	7823      	ldrb	r3, [r4, #0]
 800641c:	2b2e      	cmp	r3, #46	; 0x2e
 800641e:	d10c      	bne.n	800643a <_vfiprintf_r+0x176>
 8006420:	7863      	ldrb	r3, [r4, #1]
 8006422:	2b2a      	cmp	r3, #42	; 0x2a
 8006424:	d135      	bne.n	8006492 <_vfiprintf_r+0x1ce>
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	9203      	str	r2, [sp, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfb8      	it	lt
 8006432:	f04f 33ff 	movlt.w	r3, #4294967295
 8006436:	3402      	adds	r4, #2
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006520 <_vfiprintf_r+0x25c>
 800643e:	7821      	ldrb	r1, [r4, #0]
 8006440:	2203      	movs	r2, #3
 8006442:	4650      	mov	r0, sl
 8006444:	f7f9 fecc 	bl	80001e0 <memchr>
 8006448:	b140      	cbz	r0, 800645c <_vfiprintf_r+0x198>
 800644a:	2340      	movs	r3, #64	; 0x40
 800644c:	eba0 000a 	sub.w	r0, r0, sl
 8006450:	fa03 f000 	lsl.w	r0, r3, r0
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	4303      	orrs	r3, r0
 8006458:	3401      	adds	r4, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	482c      	ldr	r0, [pc, #176]	; (8006514 <_vfiprintf_r+0x250>)
 8006462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006466:	2206      	movs	r2, #6
 8006468:	f7f9 feba 	bl	80001e0 <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d03f      	beq.n	80064f0 <_vfiprintf_r+0x22c>
 8006470:	4b29      	ldr	r3, [pc, #164]	; (8006518 <_vfiprintf_r+0x254>)
 8006472:	bb1b      	cbnz	r3, 80064bc <_vfiprintf_r+0x1f8>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	3308      	adds	r3, #8
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006482:	443b      	add	r3, r7
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	e767      	b.n	8006358 <_vfiprintf_r+0x94>
 8006488:	fb0c 3202 	mla	r2, ip, r2, r3
 800648c:	460c      	mov	r4, r1
 800648e:	2001      	movs	r0, #1
 8006490:	e7a5      	b.n	80063de <_vfiprintf_r+0x11a>
 8006492:	2300      	movs	r3, #0
 8006494:	3401      	adds	r4, #1
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	4619      	mov	r1, r3
 800649a:	f04f 0c0a 	mov.w	ip, #10
 800649e:	4620      	mov	r0, r4
 80064a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a4:	3a30      	subs	r2, #48	; 0x30
 80064a6:	2a09      	cmp	r2, #9
 80064a8:	d903      	bls.n	80064b2 <_vfiprintf_r+0x1ee>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0c5      	beq.n	800643a <_vfiprintf_r+0x176>
 80064ae:	9105      	str	r1, [sp, #20]
 80064b0:	e7c3      	b.n	800643a <_vfiprintf_r+0x176>
 80064b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b6:	4604      	mov	r4, r0
 80064b8:	2301      	movs	r3, #1
 80064ba:	e7f0      	b.n	800649e <_vfiprintf_r+0x1da>
 80064bc:	ab03      	add	r3, sp, #12
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	462a      	mov	r2, r5
 80064c2:	4b16      	ldr	r3, [pc, #88]	; (800651c <_vfiprintf_r+0x258>)
 80064c4:	a904      	add	r1, sp, #16
 80064c6:	4630      	mov	r0, r6
 80064c8:	f3af 8000 	nop.w
 80064cc:	4607      	mov	r7, r0
 80064ce:	1c78      	adds	r0, r7, #1
 80064d0:	d1d6      	bne.n	8006480 <_vfiprintf_r+0x1bc>
 80064d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d4:	07d9      	lsls	r1, r3, #31
 80064d6:	d405      	bmi.n	80064e4 <_vfiprintf_r+0x220>
 80064d8:	89ab      	ldrh	r3, [r5, #12]
 80064da:	059a      	lsls	r2, r3, #22
 80064dc:	d402      	bmi.n	80064e4 <_vfiprintf_r+0x220>
 80064de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064e0:	f000 fc35 	bl	8006d4e <__retarget_lock_release_recursive>
 80064e4:	89ab      	ldrh	r3, [r5, #12]
 80064e6:	065b      	lsls	r3, r3, #25
 80064e8:	f53f af12 	bmi.w	8006310 <_vfiprintf_r+0x4c>
 80064ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ee:	e711      	b.n	8006314 <_vfiprintf_r+0x50>
 80064f0:	ab03      	add	r3, sp, #12
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	462a      	mov	r2, r5
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <_vfiprintf_r+0x258>)
 80064f8:	a904      	add	r1, sp, #16
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 f880 	bl	8006600 <_printf_i>
 8006500:	e7e4      	b.n	80064cc <_vfiprintf_r+0x208>
 8006502:	bf00      	nop
 8006504:	080077ec 	.word	0x080077ec
 8006508:	0800780c 	.word	0x0800780c
 800650c:	080077cc 	.word	0x080077cc
 8006510:	08007798 	.word	0x08007798
 8006514:	080077a2 	.word	0x080077a2
 8006518:	00000000 	.word	0x00000000
 800651c:	0800629f 	.word	0x0800629f
 8006520:	0800779e 	.word	0x0800779e

08006524 <_printf_common>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	4616      	mov	r6, r2
 800652a:	4699      	mov	r9, r3
 800652c:	688a      	ldr	r2, [r1, #8]
 800652e:	690b      	ldr	r3, [r1, #16]
 8006530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006534:	4293      	cmp	r3, r2
 8006536:	bfb8      	it	lt
 8006538:	4613      	movlt	r3, r2
 800653a:	6033      	str	r3, [r6, #0]
 800653c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006540:	4607      	mov	r7, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b10a      	cbz	r2, 800654a <_printf_common+0x26>
 8006546:	3301      	adds	r3, #1
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	0699      	lsls	r1, r3, #26
 800654e:	bf42      	ittt	mi
 8006550:	6833      	ldrmi	r3, [r6, #0]
 8006552:	3302      	addmi	r3, #2
 8006554:	6033      	strmi	r3, [r6, #0]
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	f015 0506 	ands.w	r5, r5, #6
 800655c:	d106      	bne.n	800656c <_printf_common+0x48>
 800655e:	f104 0a19 	add.w	sl, r4, #25
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	6832      	ldr	r2, [r6, #0]
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	42ab      	cmp	r3, r5
 800656a:	dc26      	bgt.n	80065ba <_printf_common+0x96>
 800656c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006570:	1e13      	subs	r3, r2, #0
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	bf18      	it	ne
 8006576:	2301      	movne	r3, #1
 8006578:	0692      	lsls	r2, r2, #26
 800657a:	d42b      	bmi.n	80065d4 <_printf_common+0xb0>
 800657c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006580:	4649      	mov	r1, r9
 8006582:	4638      	mov	r0, r7
 8006584:	47c0      	blx	r8
 8006586:	3001      	adds	r0, #1
 8006588:	d01e      	beq.n	80065c8 <_printf_common+0xa4>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	68e5      	ldr	r5, [r4, #12]
 800658e:	6832      	ldr	r2, [r6, #0]
 8006590:	f003 0306 	and.w	r3, r3, #6
 8006594:	2b04      	cmp	r3, #4
 8006596:	bf08      	it	eq
 8006598:	1aad      	subeq	r5, r5, r2
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	bf0c      	ite	eq
 80065a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a4:	2500      	movne	r5, #0
 80065a6:	4293      	cmp	r3, r2
 80065a8:	bfc4      	itt	gt
 80065aa:	1a9b      	subgt	r3, r3, r2
 80065ac:	18ed      	addgt	r5, r5, r3
 80065ae:	2600      	movs	r6, #0
 80065b0:	341a      	adds	r4, #26
 80065b2:	42b5      	cmp	r5, r6
 80065b4:	d11a      	bne.n	80065ec <_printf_common+0xc8>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e008      	b.n	80065cc <_printf_common+0xa8>
 80065ba:	2301      	movs	r3, #1
 80065bc:	4652      	mov	r2, sl
 80065be:	4649      	mov	r1, r9
 80065c0:	4638      	mov	r0, r7
 80065c2:	47c0      	blx	r8
 80065c4:	3001      	adds	r0, #1
 80065c6:	d103      	bne.n	80065d0 <_printf_common+0xac>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	3501      	adds	r5, #1
 80065d2:	e7c6      	b.n	8006562 <_printf_common+0x3e>
 80065d4:	18e1      	adds	r1, r4, r3
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	2030      	movs	r0, #48	; 0x30
 80065da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065de:	4422      	add	r2, r4
 80065e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065e8:	3302      	adds	r3, #2
 80065ea:	e7c7      	b.n	800657c <_printf_common+0x58>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4622      	mov	r2, r4
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d0e6      	beq.n	80065c8 <_printf_common+0xa4>
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7d9      	b.n	80065b2 <_printf_common+0x8e>
	...

08006600 <_printf_i>:
 8006600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	7e0f      	ldrb	r7, [r1, #24]
 8006606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006608:	2f78      	cmp	r7, #120	; 0x78
 800660a:	4691      	mov	r9, r2
 800660c:	4680      	mov	r8, r0
 800660e:	460c      	mov	r4, r1
 8006610:	469a      	mov	sl, r3
 8006612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006616:	d807      	bhi.n	8006628 <_printf_i+0x28>
 8006618:	2f62      	cmp	r7, #98	; 0x62
 800661a:	d80a      	bhi.n	8006632 <_printf_i+0x32>
 800661c:	2f00      	cmp	r7, #0
 800661e:	f000 80d8 	beq.w	80067d2 <_printf_i+0x1d2>
 8006622:	2f58      	cmp	r7, #88	; 0x58
 8006624:	f000 80a3 	beq.w	800676e <_printf_i+0x16e>
 8006628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800662c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006630:	e03a      	b.n	80066a8 <_printf_i+0xa8>
 8006632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006636:	2b15      	cmp	r3, #21
 8006638:	d8f6      	bhi.n	8006628 <_printf_i+0x28>
 800663a:	a101      	add	r1, pc, #4	; (adr r1, 8006640 <_printf_i+0x40>)
 800663c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006640:	08006699 	.word	0x08006699
 8006644:	080066ad 	.word	0x080066ad
 8006648:	08006629 	.word	0x08006629
 800664c:	08006629 	.word	0x08006629
 8006650:	08006629 	.word	0x08006629
 8006654:	08006629 	.word	0x08006629
 8006658:	080066ad 	.word	0x080066ad
 800665c:	08006629 	.word	0x08006629
 8006660:	08006629 	.word	0x08006629
 8006664:	08006629 	.word	0x08006629
 8006668:	08006629 	.word	0x08006629
 800666c:	080067b9 	.word	0x080067b9
 8006670:	080066dd 	.word	0x080066dd
 8006674:	0800679b 	.word	0x0800679b
 8006678:	08006629 	.word	0x08006629
 800667c:	08006629 	.word	0x08006629
 8006680:	080067db 	.word	0x080067db
 8006684:	08006629 	.word	0x08006629
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006629 	.word	0x08006629
 8006690:	08006629 	.word	0x08006629
 8006694:	080067a3 	.word	0x080067a3
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	1d1a      	adds	r2, r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	602a      	str	r2, [r5, #0]
 80066a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0a3      	b.n	80067f4 <_printf_i+0x1f4>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	6829      	ldr	r1, [r5, #0]
 80066b0:	0606      	lsls	r6, r0, #24
 80066b2:	f101 0304 	add.w	r3, r1, #4
 80066b6:	d50a      	bpl.n	80066ce <_printf_i+0xce>
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	2e00      	cmp	r6, #0
 80066be:	da03      	bge.n	80066c8 <_printf_i+0xc8>
 80066c0:	232d      	movs	r3, #45	; 0x2d
 80066c2:	4276      	negs	r6, r6
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	485e      	ldr	r0, [pc, #376]	; (8006844 <_printf_i+0x244>)
 80066ca:	230a      	movs	r3, #10
 80066cc:	e019      	b.n	8006702 <_printf_i+0x102>
 80066ce:	680e      	ldr	r6, [r1, #0]
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066d6:	bf18      	it	ne
 80066d8:	b236      	sxthne	r6, r6
 80066da:	e7ef      	b.n	80066bc <_printf_i+0xbc>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	6820      	ldr	r0, [r4, #0]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	6029      	str	r1, [r5, #0]
 80066e4:	0601      	lsls	r1, r0, #24
 80066e6:	d501      	bpl.n	80066ec <_printf_i+0xec>
 80066e8:	681e      	ldr	r6, [r3, #0]
 80066ea:	e002      	b.n	80066f2 <_printf_i+0xf2>
 80066ec:	0646      	lsls	r6, r0, #25
 80066ee:	d5fb      	bpl.n	80066e8 <_printf_i+0xe8>
 80066f0:	881e      	ldrh	r6, [r3, #0]
 80066f2:	4854      	ldr	r0, [pc, #336]	; (8006844 <_printf_i+0x244>)
 80066f4:	2f6f      	cmp	r7, #111	; 0x6f
 80066f6:	bf0c      	ite	eq
 80066f8:	2308      	moveq	r3, #8
 80066fa:	230a      	movne	r3, #10
 80066fc:	2100      	movs	r1, #0
 80066fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006702:	6865      	ldr	r5, [r4, #4]
 8006704:	60a5      	str	r5, [r4, #8]
 8006706:	2d00      	cmp	r5, #0
 8006708:	bfa2      	ittt	ge
 800670a:	6821      	ldrge	r1, [r4, #0]
 800670c:	f021 0104 	bicge.w	r1, r1, #4
 8006710:	6021      	strge	r1, [r4, #0]
 8006712:	b90e      	cbnz	r6, 8006718 <_printf_i+0x118>
 8006714:	2d00      	cmp	r5, #0
 8006716:	d04d      	beq.n	80067b4 <_printf_i+0x1b4>
 8006718:	4615      	mov	r5, r2
 800671a:	fbb6 f1f3 	udiv	r1, r6, r3
 800671e:	fb03 6711 	mls	r7, r3, r1, r6
 8006722:	5dc7      	ldrb	r7, [r0, r7]
 8006724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006728:	4637      	mov	r7, r6
 800672a:	42bb      	cmp	r3, r7
 800672c:	460e      	mov	r6, r1
 800672e:	d9f4      	bls.n	800671a <_printf_i+0x11a>
 8006730:	2b08      	cmp	r3, #8
 8006732:	d10b      	bne.n	800674c <_printf_i+0x14c>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07de      	lsls	r6, r3, #31
 8006738:	d508      	bpl.n	800674c <_printf_i+0x14c>
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	4299      	cmp	r1, r3
 8006740:	bfde      	ittt	le
 8006742:	2330      	movle	r3, #48	; 0x30
 8006744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800674c:	1b52      	subs	r2, r2, r5
 800674e:	6122      	str	r2, [r4, #16]
 8006750:	f8cd a000 	str.w	sl, [sp]
 8006754:	464b      	mov	r3, r9
 8006756:	aa03      	add	r2, sp, #12
 8006758:	4621      	mov	r1, r4
 800675a:	4640      	mov	r0, r8
 800675c:	f7ff fee2 	bl	8006524 <_printf_common>
 8006760:	3001      	adds	r0, #1
 8006762:	d14c      	bne.n	80067fe <_printf_i+0x1fe>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	b004      	add	sp, #16
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676e:	4835      	ldr	r0, [pc, #212]	; (8006844 <_printf_i+0x244>)
 8006770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006774:	6829      	ldr	r1, [r5, #0]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f851 6b04 	ldr.w	r6, [r1], #4
 800677c:	6029      	str	r1, [r5, #0]
 800677e:	061d      	lsls	r5, r3, #24
 8006780:	d514      	bpl.n	80067ac <_printf_i+0x1ac>
 8006782:	07df      	lsls	r7, r3, #31
 8006784:	bf44      	itt	mi
 8006786:	f043 0320 	orrmi.w	r3, r3, #32
 800678a:	6023      	strmi	r3, [r4, #0]
 800678c:	b91e      	cbnz	r6, 8006796 <_printf_i+0x196>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	f023 0320 	bic.w	r3, r3, #32
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	2310      	movs	r3, #16
 8006798:	e7b0      	b.n	80066fc <_printf_i+0xfc>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f043 0320 	orr.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	2378      	movs	r3, #120	; 0x78
 80067a4:	4828      	ldr	r0, [pc, #160]	; (8006848 <_printf_i+0x248>)
 80067a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067aa:	e7e3      	b.n	8006774 <_printf_i+0x174>
 80067ac:	0659      	lsls	r1, r3, #25
 80067ae:	bf48      	it	mi
 80067b0:	b2b6      	uxthmi	r6, r6
 80067b2:	e7e6      	b.n	8006782 <_printf_i+0x182>
 80067b4:	4615      	mov	r5, r2
 80067b6:	e7bb      	b.n	8006730 <_printf_i+0x130>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	6826      	ldr	r6, [r4, #0]
 80067bc:	6961      	ldr	r1, [r4, #20]
 80067be:	1d18      	adds	r0, r3, #4
 80067c0:	6028      	str	r0, [r5, #0]
 80067c2:	0635      	lsls	r5, r6, #24
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0x1cc>
 80067c8:	6019      	str	r1, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <_printf_i+0x1d2>
 80067cc:	0670      	lsls	r0, r6, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0x1c8>
 80067d0:	8019      	strh	r1, [r3, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	4615      	mov	r5, r2
 80067d8:	e7ba      	b.n	8006750 <_printf_i+0x150>
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	602a      	str	r2, [r5, #0]
 80067e0:	681d      	ldr	r5, [r3, #0]
 80067e2:	6862      	ldr	r2, [r4, #4]
 80067e4:	2100      	movs	r1, #0
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7f9 fcfa 	bl	80001e0 <memchr>
 80067ec:	b108      	cbz	r0, 80067f2 <_printf_i+0x1f2>
 80067ee:	1b40      	subs	r0, r0, r5
 80067f0:	6060      	str	r0, [r4, #4]
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	2300      	movs	r3, #0
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fc:	e7a8      	b.n	8006750 <_printf_i+0x150>
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	462a      	mov	r2, r5
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d0ab      	beq.n	8006764 <_printf_i+0x164>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	d413      	bmi.n	800683a <_printf_i+0x23a>
 8006812:	68e0      	ldr	r0, [r4, #12]
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	4298      	cmp	r0, r3
 8006818:	bfb8      	it	lt
 800681a:	4618      	movlt	r0, r3
 800681c:	e7a4      	b.n	8006768 <_printf_i+0x168>
 800681e:	2301      	movs	r3, #1
 8006820:	4632      	mov	r2, r6
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	47d0      	blx	sl
 8006828:	3001      	adds	r0, #1
 800682a:	d09b      	beq.n	8006764 <_printf_i+0x164>
 800682c:	3501      	adds	r5, #1
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	9903      	ldr	r1, [sp, #12]
 8006832:	1a5b      	subs	r3, r3, r1
 8006834:	42ab      	cmp	r3, r5
 8006836:	dcf2      	bgt.n	800681e <_printf_i+0x21e>
 8006838:	e7eb      	b.n	8006812 <_printf_i+0x212>
 800683a:	2500      	movs	r5, #0
 800683c:	f104 0619 	add.w	r6, r4, #25
 8006840:	e7f5      	b.n	800682e <_printf_i+0x22e>
 8006842:	bf00      	nop
 8006844:	080077a9 	.word	0x080077a9
 8006848:	080077ba 	.word	0x080077ba

0800684c <__swbuf_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4614      	mov	r4, r2
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <__swbuf_r+0x12>
 8006856:	6983      	ldr	r3, [r0, #24]
 8006858:	b90b      	cbnz	r3, 800685e <__swbuf_r+0x12>
 800685a:	f000 f9d9 	bl	8006c10 <__sinit>
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <__swbuf_r+0x98>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d12b      	bne.n	80068bc <__swbuf_r+0x70>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d52f      	bpl.n	80068d0 <__swbuf_r+0x84>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b36b      	cbz	r3, 80068d0 <__swbuf_r+0x84>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	1ac0      	subs	r0, r0, r3
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	b2f6      	uxtb	r6, r6
 800687e:	4283      	cmp	r3, r0
 8006880:	4637      	mov	r7, r6
 8006882:	dc04      	bgt.n	800688e <__swbuf_r+0x42>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f92e 	bl	8006ae8 <_fflush_r>
 800688c:	bb30      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	3b01      	subs	r3, #1
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	701e      	strb	r6, [r3, #0]
 800689c:	6963      	ldr	r3, [r4, #20]
 800689e:	3001      	adds	r0, #1
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d004      	beq.n	80068ae <__swbuf_r+0x62>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d506      	bpl.n	80068b8 <__swbuf_r+0x6c>
 80068aa:	2e0a      	cmp	r6, #10
 80068ac:	d104      	bne.n	80068b8 <__swbuf_r+0x6c>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f919 	bl	8006ae8 <_fflush_r>
 80068b6:	b988      	cbnz	r0, 80068dc <__swbuf_r+0x90>
 80068b8:	4638      	mov	r0, r7
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <__swbuf_r+0x9c>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	d101      	bne.n	80068c6 <__swbuf_r+0x7a>
 80068c2:	68ac      	ldr	r4, [r5, #8]
 80068c4:	e7cf      	b.n	8006866 <__swbuf_r+0x1a>
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <__swbuf_r+0xa0>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	bf08      	it	eq
 80068cc:	68ec      	ldreq	r4, [r5, #12]
 80068ce:	e7ca      	b.n	8006866 <__swbuf_r+0x1a>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f80c 	bl	80068f0 <__swsetup_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0cb      	beq.n	8006874 <__swbuf_r+0x28>
 80068dc:	f04f 37ff 	mov.w	r7, #4294967295
 80068e0:	e7ea      	b.n	80068b8 <__swbuf_r+0x6c>
 80068e2:	bf00      	nop
 80068e4:	080077ec 	.word	0x080077ec
 80068e8:	0800780c 	.word	0x0800780c
 80068ec:	080077cc 	.word	0x080077cc

080068f0 <__swsetup_r>:
 80068f0:	4b32      	ldr	r3, [pc, #200]	; (80069bc <__swsetup_r+0xcc>)
 80068f2:	b570      	push	{r4, r5, r6, lr}
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	4606      	mov	r6, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	b125      	cbz	r5, 8006906 <__swsetup_r+0x16>
 80068fc:	69ab      	ldr	r3, [r5, #24]
 80068fe:	b913      	cbnz	r3, 8006906 <__swsetup_r+0x16>
 8006900:	4628      	mov	r0, r5
 8006902:	f000 f985 	bl	8006c10 <__sinit>
 8006906:	4b2e      	ldr	r3, [pc, #184]	; (80069c0 <__swsetup_r+0xd0>)
 8006908:	429c      	cmp	r4, r3
 800690a:	d10f      	bne.n	800692c <__swsetup_r+0x3c>
 800690c:	686c      	ldr	r4, [r5, #4]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006914:	0719      	lsls	r1, r3, #28
 8006916:	d42c      	bmi.n	8006972 <__swsetup_r+0x82>
 8006918:	06dd      	lsls	r5, r3, #27
 800691a:	d411      	bmi.n	8006940 <__swsetup_r+0x50>
 800691c:	2309      	movs	r3, #9
 800691e:	6033      	str	r3, [r6, #0]
 8006920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e03e      	b.n	80069aa <__swsetup_r+0xba>
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <__swsetup_r+0xd4>)
 800692e:	429c      	cmp	r4, r3
 8006930:	d101      	bne.n	8006936 <__swsetup_r+0x46>
 8006932:	68ac      	ldr	r4, [r5, #8]
 8006934:	e7eb      	b.n	800690e <__swsetup_r+0x1e>
 8006936:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <__swsetup_r+0xd8>)
 8006938:	429c      	cmp	r4, r3
 800693a:	bf08      	it	eq
 800693c:	68ec      	ldreq	r4, [r5, #12]
 800693e:	e7e6      	b.n	800690e <__swsetup_r+0x1e>
 8006940:	0758      	lsls	r0, r3, #29
 8006942:	d512      	bpl.n	800696a <__swsetup_r+0x7a>
 8006944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006946:	b141      	cbz	r1, 800695a <__swsetup_r+0x6a>
 8006948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <__swsetup_r+0x66>
 8006950:	4630      	mov	r0, r6
 8006952:	f000 fa63 	bl	8006e1c <_free_r>
 8006956:	2300      	movs	r3, #0
 8006958:	6363      	str	r3, [r4, #52]	; 0x34
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	b94b      	cbnz	r3, 800698a <__swsetup_r+0x9a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800697c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006980:	d003      	beq.n	800698a <__swsetup_r+0x9a>
 8006982:	4621      	mov	r1, r4
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fa09 	bl	8006d9c <__smakebuf_r>
 800698a:	89a0      	ldrh	r0, [r4, #12]
 800698c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006990:	f010 0301 	ands.w	r3, r0, #1
 8006994:	d00a      	beq.n	80069ac <__swsetup_r+0xbc>
 8006996:	2300      	movs	r3, #0
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	6963      	ldr	r3, [r4, #20]
 800699c:	425b      	negs	r3, r3
 800699e:	61a3      	str	r3, [r4, #24]
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	b943      	cbnz	r3, 80069b6 <__swsetup_r+0xc6>
 80069a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069a8:	d1ba      	bne.n	8006920 <__swsetup_r+0x30>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	0781      	lsls	r1, r0, #30
 80069ae:	bf58      	it	pl
 80069b0:	6963      	ldrpl	r3, [r4, #20]
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	e7f4      	b.n	80069a0 <__swsetup_r+0xb0>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e7f7      	b.n	80069aa <__swsetup_r+0xba>
 80069ba:	bf00      	nop
 80069bc:	20000054 	.word	0x20000054
 80069c0:	080077ec 	.word	0x080077ec
 80069c4:	0800780c 	.word	0x0800780c
 80069c8:	080077cc 	.word	0x080077cc

080069cc <abort>:
 80069cc:	b508      	push	{r3, lr}
 80069ce:	2006      	movs	r0, #6
 80069d0:	f000 fb3c 	bl	800704c <raise>
 80069d4:	2001      	movs	r0, #1
 80069d6:	f7fb ffdf 	bl	8002998 <_exit>
	...

080069dc <__sflush_r>:
 80069dc:	898a      	ldrh	r2, [r1, #12]
 80069de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e2:	4605      	mov	r5, r0
 80069e4:	0710      	lsls	r0, r2, #28
 80069e6:	460c      	mov	r4, r1
 80069e8:	d458      	bmi.n	8006a9c <__sflush_r+0xc0>
 80069ea:	684b      	ldr	r3, [r1, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	dc05      	bgt.n	80069fc <__sflush_r+0x20>
 80069f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dc02      	bgt.n	80069fc <__sflush_r+0x20>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d0f9      	beq.n	80069f6 <__sflush_r+0x1a>
 8006a02:	2300      	movs	r3, #0
 8006a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a08:	682f      	ldr	r7, [r5, #0]
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	d032      	beq.n	8006a74 <__sflush_r+0x98>
 8006a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	075a      	lsls	r2, r3, #29
 8006a14:	d505      	bpl.n	8006a22 <__sflush_r+0x46>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	1ac0      	subs	r0, r0, r3
 8006a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a1c:	b10b      	cbz	r3, 8006a22 <__sflush_r+0x46>
 8006a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a20:	1ac0      	subs	r0, r0, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	4602      	mov	r2, r0
 8006a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a28:	6a21      	ldr	r1, [r4, #32]
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b0      	blx	r6
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	d106      	bne.n	8006a42 <__sflush_r+0x66>
 8006a34:	6829      	ldr	r1, [r5, #0]
 8006a36:	291d      	cmp	r1, #29
 8006a38:	d82c      	bhi.n	8006a94 <__sflush_r+0xb8>
 8006a3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <__sflush_r+0x108>)
 8006a3c:	40ca      	lsrs	r2, r1
 8006a3e:	07d6      	lsls	r6, r2, #31
 8006a40:	d528      	bpl.n	8006a94 <__sflush_r+0xb8>
 8006a42:	2200      	movs	r2, #0
 8006a44:	6062      	str	r2, [r4, #4]
 8006a46:	04d9      	lsls	r1, r3, #19
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	6022      	str	r2, [r4, #0]
 8006a4c:	d504      	bpl.n	8006a58 <__sflush_r+0x7c>
 8006a4e:	1c42      	adds	r2, r0, #1
 8006a50:	d101      	bne.n	8006a56 <__sflush_r+0x7a>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b903      	cbnz	r3, 8006a58 <__sflush_r+0x7c>
 8006a56:	6560      	str	r0, [r4, #84]	; 0x54
 8006a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5a:	602f      	str	r7, [r5, #0]
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d0ca      	beq.n	80069f6 <__sflush_r+0x1a>
 8006a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d002      	beq.n	8006a6e <__sflush_r+0x92>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 f9d7 	bl	8006e1c <_free_r>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	6360      	str	r0, [r4, #52]	; 0x34
 8006a72:	e7c1      	b.n	80069f8 <__sflush_r+0x1c>
 8006a74:	6a21      	ldr	r1, [r4, #32]
 8006a76:	2301      	movs	r3, #1
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b0      	blx	r6
 8006a7c:	1c41      	adds	r1, r0, #1
 8006a7e:	d1c7      	bne.n	8006a10 <__sflush_r+0x34>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c4      	beq.n	8006a10 <__sflush_r+0x34>
 8006a86:	2b1d      	cmp	r3, #29
 8006a88:	d001      	beq.n	8006a8e <__sflush_r+0xb2>
 8006a8a:	2b16      	cmp	r3, #22
 8006a8c:	d101      	bne.n	8006a92 <__sflush_r+0xb6>
 8006a8e:	602f      	str	r7, [r5, #0]
 8006a90:	e7b1      	b.n	80069f6 <__sflush_r+0x1a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	e7ad      	b.n	80069f8 <__sflush_r+0x1c>
 8006a9c:	690f      	ldr	r7, [r1, #16]
 8006a9e:	2f00      	cmp	r7, #0
 8006aa0:	d0a9      	beq.n	80069f6 <__sflush_r+0x1a>
 8006aa2:	0793      	lsls	r3, r2, #30
 8006aa4:	680e      	ldr	r6, [r1, #0]
 8006aa6:	bf08      	it	eq
 8006aa8:	694b      	ldreq	r3, [r1, #20]
 8006aaa:	600f      	str	r7, [r1, #0]
 8006aac:	bf18      	it	ne
 8006aae:	2300      	movne	r3, #0
 8006ab0:	eba6 0807 	sub.w	r8, r6, r7
 8006ab4:	608b      	str	r3, [r1, #8]
 8006ab6:	f1b8 0f00 	cmp.w	r8, #0
 8006aba:	dd9c      	ble.n	80069f6 <__sflush_r+0x1a>
 8006abc:	6a21      	ldr	r1, [r4, #32]
 8006abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ac0:	4643      	mov	r3, r8
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b0      	blx	r6
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	dc06      	bgt.n	8006ada <__sflush_r+0xfe>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	e78e      	b.n	80069f8 <__sflush_r+0x1c>
 8006ada:	4407      	add	r7, r0
 8006adc:	eba8 0800 	sub.w	r8, r8, r0
 8006ae0:	e7e9      	b.n	8006ab6 <__sflush_r+0xda>
 8006ae2:	bf00      	nop
 8006ae4:	20400001 	.word	0x20400001

08006ae8 <_fflush_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	690b      	ldr	r3, [r1, #16]
 8006aec:	4605      	mov	r5, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b913      	cbnz	r3, 8006af8 <_fflush_r+0x10>
 8006af2:	2500      	movs	r5, #0
 8006af4:	4628      	mov	r0, r5
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	b118      	cbz	r0, 8006b02 <_fflush_r+0x1a>
 8006afa:	6983      	ldr	r3, [r0, #24]
 8006afc:	b90b      	cbnz	r3, 8006b02 <_fflush_r+0x1a>
 8006afe:	f000 f887 	bl	8006c10 <__sinit>
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <_fflush_r+0x6c>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d11b      	bne.n	8006b40 <_fflush_r+0x58>
 8006b08:	686c      	ldr	r4, [r5, #4]
 8006b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0ef      	beq.n	8006af2 <_fflush_r+0xa>
 8006b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b14:	07d0      	lsls	r0, r2, #31
 8006b16:	d404      	bmi.n	8006b22 <_fflush_r+0x3a>
 8006b18:	0599      	lsls	r1, r3, #22
 8006b1a:	d402      	bmi.n	8006b22 <_fflush_r+0x3a>
 8006b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b1e:	f000 f915 	bl	8006d4c <__retarget_lock_acquire_recursive>
 8006b22:	4628      	mov	r0, r5
 8006b24:	4621      	mov	r1, r4
 8006b26:	f7ff ff59 	bl	80069dc <__sflush_r>
 8006b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b2c:	07da      	lsls	r2, r3, #31
 8006b2e:	4605      	mov	r5, r0
 8006b30:	d4e0      	bmi.n	8006af4 <_fflush_r+0xc>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	059b      	lsls	r3, r3, #22
 8006b36:	d4dd      	bmi.n	8006af4 <_fflush_r+0xc>
 8006b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3a:	f000 f908 	bl	8006d4e <__retarget_lock_release_recursive>
 8006b3e:	e7d9      	b.n	8006af4 <_fflush_r+0xc>
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <_fflush_r+0x70>)
 8006b42:	429c      	cmp	r4, r3
 8006b44:	d101      	bne.n	8006b4a <_fflush_r+0x62>
 8006b46:	68ac      	ldr	r4, [r5, #8]
 8006b48:	e7df      	b.n	8006b0a <_fflush_r+0x22>
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <_fflush_r+0x74>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	bf08      	it	eq
 8006b50:	68ec      	ldreq	r4, [r5, #12]
 8006b52:	e7da      	b.n	8006b0a <_fflush_r+0x22>
 8006b54:	080077ec 	.word	0x080077ec
 8006b58:	0800780c 	.word	0x0800780c
 8006b5c:	080077cc 	.word	0x080077cc

08006b60 <std>:
 8006b60:	2300      	movs	r3, #0
 8006b62:	b510      	push	{r4, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	e9c0 3300 	strd	r3, r3, [r0]
 8006b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b6e:	6083      	str	r3, [r0, #8]
 8006b70:	8181      	strh	r1, [r0, #12]
 8006b72:	6643      	str	r3, [r0, #100]	; 0x64
 8006b74:	81c2      	strh	r2, [r0, #14]
 8006b76:	6183      	str	r3, [r0, #24]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	305c      	adds	r0, #92	; 0x5c
 8006b7e:	f7ff fb6f 	bl	8006260 <memset>
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <std+0x38>)
 8006b84:	6263      	str	r3, [r4, #36]	; 0x24
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <std+0x3c>)
 8006b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <std+0x40>)
 8006b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <std+0x44>)
 8006b90:	6224      	str	r4, [r4, #32]
 8006b92:	6323      	str	r3, [r4, #48]	; 0x30
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	bf00      	nop
 8006b98:	08007085 	.word	0x08007085
 8006b9c:	080070a7 	.word	0x080070a7
 8006ba0:	080070df 	.word	0x080070df
 8006ba4:	08007103 	.word	0x08007103

08006ba8 <_cleanup_r>:
 8006ba8:	4901      	ldr	r1, [pc, #4]	; (8006bb0 <_cleanup_r+0x8>)
 8006baa:	f000 b8af 	b.w	8006d0c <_fwalk_reent>
 8006bae:	bf00      	nop
 8006bb0:	08006ae9 	.word	0x08006ae9

08006bb4 <__sfmoreglue>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	2268      	movs	r2, #104	; 0x68
 8006bb8:	1e4d      	subs	r5, r1, #1
 8006bba:	4355      	muls	r5, r2
 8006bbc:	460e      	mov	r6, r1
 8006bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bc2:	f000 f997 	bl	8006ef4 <_malloc_r>
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	b140      	cbz	r0, 8006bdc <__sfmoreglue+0x28>
 8006bca:	2100      	movs	r1, #0
 8006bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8006bd0:	300c      	adds	r0, #12
 8006bd2:	60a0      	str	r0, [r4, #8]
 8006bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bd8:	f7ff fb42 	bl	8006260 <memset>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	bd70      	pop	{r4, r5, r6, pc}

08006be0 <__sfp_lock_acquire>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sfp_lock_acquire+0x8>)
 8006be2:	f000 b8b3 	b.w	8006d4c <__retarget_lock_acquire_recursive>
 8006be6:	bf00      	nop
 8006be8:	2000054d 	.word	0x2000054d

08006bec <__sfp_lock_release>:
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <__sfp_lock_release+0x8>)
 8006bee:	f000 b8ae 	b.w	8006d4e <__retarget_lock_release_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	2000054d 	.word	0x2000054d

08006bf8 <__sinit_lock_acquire>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__sinit_lock_acquire+0x8>)
 8006bfa:	f000 b8a7 	b.w	8006d4c <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	2000054e 	.word	0x2000054e

08006c04 <__sinit_lock_release>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__sinit_lock_release+0x8>)
 8006c06:	f000 b8a2 	b.w	8006d4e <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	2000054e 	.word	0x2000054e

08006c10 <__sinit>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4604      	mov	r4, r0
 8006c14:	f7ff fff0 	bl	8006bf8 <__sinit_lock_acquire>
 8006c18:	69a3      	ldr	r3, [r4, #24]
 8006c1a:	b11b      	cbz	r3, 8006c24 <__sinit+0x14>
 8006c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c20:	f7ff bff0 	b.w	8006c04 <__sinit_lock_release>
 8006c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c28:	6523      	str	r3, [r4, #80]	; 0x50
 8006c2a:	4b13      	ldr	r3, [pc, #76]	; (8006c78 <__sinit+0x68>)
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <__sinit+0x6c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	bf04      	itt	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	61a3      	streq	r3, [r4, #24]
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f820 	bl	8006c80 <__sfp>
 8006c40:	6060      	str	r0, [r4, #4]
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 f81c 	bl	8006c80 <__sfp>
 8006c48:	60a0      	str	r0, [r4, #8]
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 f818 	bl	8006c80 <__sfp>
 8006c50:	2200      	movs	r2, #0
 8006c52:	60e0      	str	r0, [r4, #12]
 8006c54:	2104      	movs	r1, #4
 8006c56:	6860      	ldr	r0, [r4, #4]
 8006c58:	f7ff ff82 	bl	8006b60 <std>
 8006c5c:	68a0      	ldr	r0, [r4, #8]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	2109      	movs	r1, #9
 8006c62:	f7ff ff7d 	bl	8006b60 <std>
 8006c66:	68e0      	ldr	r0, [r4, #12]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	2112      	movs	r1, #18
 8006c6c:	f7ff ff78 	bl	8006b60 <std>
 8006c70:	2301      	movs	r3, #1
 8006c72:	61a3      	str	r3, [r4, #24]
 8006c74:	e7d2      	b.n	8006c1c <__sinit+0xc>
 8006c76:	bf00      	nop
 8006c78:	08007794 	.word	0x08007794
 8006c7c:	08006ba9 	.word	0x08006ba9

08006c80 <__sfp>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	4607      	mov	r7, r0
 8006c84:	f7ff ffac 	bl	8006be0 <__sfp_lock_acquire>
 8006c88:	4b1e      	ldr	r3, [pc, #120]	; (8006d04 <__sfp+0x84>)
 8006c8a:	681e      	ldr	r6, [r3, #0]
 8006c8c:	69b3      	ldr	r3, [r6, #24]
 8006c8e:	b913      	cbnz	r3, 8006c96 <__sfp+0x16>
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7ff ffbd 	bl	8006c10 <__sinit>
 8006c96:	3648      	adds	r6, #72	; 0x48
 8006c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	d503      	bpl.n	8006ca8 <__sfp+0x28>
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	b30b      	cbz	r3, 8006ce8 <__sfp+0x68>
 8006ca4:	6836      	ldr	r6, [r6, #0]
 8006ca6:	e7f7      	b.n	8006c98 <__sfp+0x18>
 8006ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cac:	b9d5      	cbnz	r5, 8006ce4 <__sfp+0x64>
 8006cae:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <__sfp+0x88>)
 8006cb0:	60e3      	str	r3, [r4, #12]
 8006cb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8006cb8:	f000 f847 	bl	8006d4a <__retarget_lock_init_recursive>
 8006cbc:	f7ff ff96 	bl	8006bec <__sfp_lock_release>
 8006cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cc8:	6025      	str	r5, [r4, #0]
 8006cca:	61a5      	str	r5, [r4, #24]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cd4:	f7ff fac4 	bl	8006260 <memset>
 8006cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce4:	3468      	adds	r4, #104	; 0x68
 8006ce6:	e7d9      	b.n	8006c9c <__sfp+0x1c>
 8006ce8:	2104      	movs	r1, #4
 8006cea:	4638      	mov	r0, r7
 8006cec:	f7ff ff62 	bl	8006bb4 <__sfmoreglue>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	6030      	str	r0, [r6, #0]
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d1d5      	bne.n	8006ca4 <__sfp+0x24>
 8006cf8:	f7ff ff78 	bl	8006bec <__sfp_lock_release>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	e7ee      	b.n	8006ce0 <__sfp+0x60>
 8006d02:	bf00      	nop
 8006d04:	08007794 	.word	0x08007794
 8006d08:	ffff0001 	.word	0xffff0001

08006d0c <_fwalk_reent>:
 8006d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d10:	4606      	mov	r6, r0
 8006d12:	4688      	mov	r8, r1
 8006d14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d18:	2700      	movs	r7, #0
 8006d1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d1e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d22:	d505      	bpl.n	8006d30 <_fwalk_reent+0x24>
 8006d24:	6824      	ldr	r4, [r4, #0]
 8006d26:	2c00      	cmp	r4, #0
 8006d28:	d1f7      	bne.n	8006d1a <_fwalk_reent+0xe>
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d30:	89ab      	ldrh	r3, [r5, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d907      	bls.n	8006d46 <_fwalk_reent+0x3a>
 8006d36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	d003      	beq.n	8006d46 <_fwalk_reent+0x3a>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4630      	mov	r0, r6
 8006d42:	47c0      	blx	r8
 8006d44:	4307      	orrs	r7, r0
 8006d46:	3568      	adds	r5, #104	; 0x68
 8006d48:	e7e9      	b.n	8006d1e <_fwalk_reent+0x12>

08006d4a <__retarget_lock_init_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <__retarget_lock_acquire_recursive>:
 8006d4c:	4770      	bx	lr

08006d4e <__retarget_lock_release_recursive>:
 8006d4e:	4770      	bx	lr

08006d50 <__swhatbuf_r>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	460e      	mov	r6, r1
 8006d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	b096      	sub	sp, #88	; 0x58
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	461d      	mov	r5, r3
 8006d60:	da08      	bge.n	8006d74 <__swhatbuf_r+0x24>
 8006d62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	061a      	lsls	r2, r3, #24
 8006d6c:	d410      	bmi.n	8006d90 <__swhatbuf_r+0x40>
 8006d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d72:	e00e      	b.n	8006d92 <__swhatbuf_r+0x42>
 8006d74:	466a      	mov	r2, sp
 8006d76:	f000 f9eb 	bl	8007150 <_fstat_r>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	dbf1      	blt.n	8006d62 <__swhatbuf_r+0x12>
 8006d7e:	9a01      	ldr	r2, [sp, #4]
 8006d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d88:	425a      	negs	r2, r3
 8006d8a:	415a      	adcs	r2, r3
 8006d8c:	602a      	str	r2, [r5, #0]
 8006d8e:	e7ee      	b.n	8006d6e <__swhatbuf_r+0x1e>
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	2000      	movs	r0, #0
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	b016      	add	sp, #88	; 0x58
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d9c <__smakebuf_r>:
 8006d9c:	898b      	ldrh	r3, [r1, #12]
 8006d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da0:	079d      	lsls	r5, r3, #30
 8006da2:	4606      	mov	r6, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	d507      	bpl.n	8006db8 <__smakebuf_r+0x1c>
 8006da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	2301      	movs	r3, #1
 8006db2:	6163      	str	r3, [r4, #20]
 8006db4:	b002      	add	sp, #8
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	ab01      	add	r3, sp, #4
 8006dba:	466a      	mov	r2, sp
 8006dbc:	f7ff ffc8 	bl	8006d50 <__swhatbuf_r>
 8006dc0:	9900      	ldr	r1, [sp, #0]
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f895 	bl	8006ef4 <_malloc_r>
 8006dca:	b948      	cbnz	r0, 8006de0 <__smakebuf_r+0x44>
 8006dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd0:	059a      	lsls	r2, r3, #22
 8006dd2:	d4ef      	bmi.n	8006db4 <__smakebuf_r+0x18>
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	f043 0302 	orr.w	r3, r3, #2
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	e7e3      	b.n	8006da8 <__smakebuf_r+0xc>
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <__smakebuf_r+0x7c>)
 8006de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	6163      	str	r3, [r4, #20]
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	6120      	str	r0, [r4, #16]
 8006df6:	b15b      	cbz	r3, 8006e10 <__smakebuf_r+0x74>
 8006df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f9b9 	bl	8007174 <_isatty_r>
 8006e02:	b128      	cbz	r0, 8006e10 <__smakebuf_r+0x74>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	89a0      	ldrh	r0, [r4, #12]
 8006e12:	4305      	orrs	r5, r0
 8006e14:	81a5      	strh	r5, [r4, #12]
 8006e16:	e7cd      	b.n	8006db4 <__smakebuf_r+0x18>
 8006e18:	08006ba9 	.word	0x08006ba9

08006e1c <_free_r>:
 8006e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d044      	beq.n	8006eac <_free_r+0x90>
 8006e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e26:	9001      	str	r0, [sp, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e2e:	bfb8      	it	lt
 8006e30:	18e4      	addlt	r4, r4, r3
 8006e32:	f000 f9c1 	bl	80071b8 <__malloc_lock>
 8006e36:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <_free_r+0x94>)
 8006e38:	9801      	ldr	r0, [sp, #4]
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	b933      	cbnz	r3, 8006e4c <_free_r+0x30>
 8006e3e:	6063      	str	r3, [r4, #4]
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	b003      	add	sp, #12
 8006e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e48:	f000 b9bc 	b.w	80071c4 <__malloc_unlock>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d908      	bls.n	8006e62 <_free_r+0x46>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf01      	itttt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	1949      	addeq	r1, r1, r5
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	e7ed      	b.n	8006e3e <_free_r+0x22>
 8006e62:	461a      	mov	r2, r3
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	b10b      	cbz	r3, 8006e6c <_free_r+0x50>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d9fa      	bls.n	8006e62 <_free_r+0x46>
 8006e6c:	6811      	ldr	r1, [r2, #0]
 8006e6e:	1855      	adds	r5, r2, r1
 8006e70:	42a5      	cmp	r5, r4
 8006e72:	d10b      	bne.n	8006e8c <_free_r+0x70>
 8006e74:	6824      	ldr	r4, [r4, #0]
 8006e76:	4421      	add	r1, r4
 8006e78:	1854      	adds	r4, r2, r1
 8006e7a:	42a3      	cmp	r3, r4
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	d1e0      	bne.n	8006e42 <_free_r+0x26>
 8006e80:	681c      	ldr	r4, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	6053      	str	r3, [r2, #4]
 8006e86:	4421      	add	r1, r4
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	e7da      	b.n	8006e42 <_free_r+0x26>
 8006e8c:	d902      	bls.n	8006e94 <_free_r+0x78>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	6003      	str	r3, [r0, #0]
 8006e92:	e7d6      	b.n	8006e42 <_free_r+0x26>
 8006e94:	6825      	ldr	r5, [r4, #0]
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	bf04      	itt	eq
 8006e9c:	6819      	ldreq	r1, [r3, #0]
 8006e9e:	685b      	ldreq	r3, [r3, #4]
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	bf04      	itt	eq
 8006ea4:	1949      	addeq	r1, r1, r5
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	6054      	str	r4, [r2, #4]
 8006eaa:	e7ca      	b.n	8006e42 <_free_r+0x26>
 8006eac:	b003      	add	sp, #12
 8006eae:	bd30      	pop	{r4, r5, pc}
 8006eb0:	20000550 	.word	0x20000550

08006eb4 <sbrk_aligned>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4e0e      	ldr	r6, [pc, #56]	; (8006ef0 <sbrk_aligned+0x3c>)
 8006eb8:	460c      	mov	r4, r1
 8006eba:	6831      	ldr	r1, [r6, #0]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	b911      	cbnz	r1, 8006ec6 <sbrk_aligned+0x12>
 8006ec0:	f000 f88c 	bl	8006fdc <_sbrk_r>
 8006ec4:	6030      	str	r0, [r6, #0]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f887 	bl	8006fdc <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d00a      	beq.n	8006ee8 <sbrk_aligned+0x34>
 8006ed2:	1cc4      	adds	r4, r0, #3
 8006ed4:	f024 0403 	bic.w	r4, r4, #3
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d007      	beq.n	8006eec <sbrk_aligned+0x38>
 8006edc:	1a21      	subs	r1, r4, r0
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f87c 	bl	8006fdc <_sbrk_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d101      	bne.n	8006eec <sbrk_aligned+0x38>
 8006ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8006eec:	4620      	mov	r0, r4
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	20000554 	.word	0x20000554

08006ef4 <_malloc_r>:
 8006ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef8:	1ccd      	adds	r5, r1, #3
 8006efa:	f025 0503 	bic.w	r5, r5, #3
 8006efe:	3508      	adds	r5, #8
 8006f00:	2d0c      	cmp	r5, #12
 8006f02:	bf38      	it	cc
 8006f04:	250c      	movcc	r5, #12
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	4607      	mov	r7, r0
 8006f0a:	db01      	blt.n	8006f10 <_malloc_r+0x1c>
 8006f0c:	42a9      	cmp	r1, r5
 8006f0e:	d905      	bls.n	8006f1c <_malloc_r+0x28>
 8006f10:	230c      	movs	r3, #12
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	2600      	movs	r6, #0
 8006f16:	4630      	mov	r0, r6
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	4e2e      	ldr	r6, [pc, #184]	; (8006fd8 <_malloc_r+0xe4>)
 8006f1e:	f000 f94b 	bl	80071b8 <__malloc_lock>
 8006f22:	6833      	ldr	r3, [r6, #0]
 8006f24:	461c      	mov	r4, r3
 8006f26:	bb34      	cbnz	r4, 8006f76 <_malloc_r+0x82>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f7ff ffc2 	bl	8006eb4 <sbrk_aligned>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	4604      	mov	r4, r0
 8006f34:	d14d      	bne.n	8006fd2 <_malloc_r+0xde>
 8006f36:	6834      	ldr	r4, [r6, #0]
 8006f38:	4626      	mov	r6, r4
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d140      	bne.n	8006fc0 <_malloc_r+0xcc>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	4631      	mov	r1, r6
 8006f42:	4638      	mov	r0, r7
 8006f44:	eb04 0803 	add.w	r8, r4, r3
 8006f48:	f000 f848 	bl	8006fdc <_sbrk_r>
 8006f4c:	4580      	cmp	r8, r0
 8006f4e:	d13a      	bne.n	8006fc6 <_malloc_r+0xd2>
 8006f50:	6821      	ldr	r1, [r4, #0]
 8006f52:	3503      	adds	r5, #3
 8006f54:	1a6d      	subs	r5, r5, r1
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	4629      	mov	r1, r5
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ffa5 	bl	8006eb4 <sbrk_aligned>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d02b      	beq.n	8006fc6 <_malloc_r+0xd2>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	442b      	add	r3, r5
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	e00e      	b.n	8006f94 <_malloc_r+0xa0>
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	1b52      	subs	r2, r2, r5
 8006f7a:	d41e      	bmi.n	8006fba <_malloc_r+0xc6>
 8006f7c:	2a0b      	cmp	r2, #11
 8006f7e:	d916      	bls.n	8006fae <_malloc_r+0xba>
 8006f80:	1961      	adds	r1, r4, r5
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	6025      	str	r5, [r4, #0]
 8006f86:	bf18      	it	ne
 8006f88:	6059      	strne	r1, [r3, #4]
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	bf08      	it	eq
 8006f8e:	6031      	streq	r1, [r6, #0]
 8006f90:	5162      	str	r2, [r4, r5]
 8006f92:	604b      	str	r3, [r1, #4]
 8006f94:	4638      	mov	r0, r7
 8006f96:	f104 060b 	add.w	r6, r4, #11
 8006f9a:	f000 f913 	bl	80071c4 <__malloc_unlock>
 8006f9e:	f026 0607 	bic.w	r6, r6, #7
 8006fa2:	1d23      	adds	r3, r4, #4
 8006fa4:	1af2      	subs	r2, r6, r3
 8006fa6:	d0b6      	beq.n	8006f16 <_malloc_r+0x22>
 8006fa8:	1b9b      	subs	r3, r3, r6
 8006faa:	50a3      	str	r3, [r4, r2]
 8006fac:	e7b3      	b.n	8006f16 <_malloc_r+0x22>
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	bf0c      	ite	eq
 8006fb4:	6032      	streq	r2, [r6, #0]
 8006fb6:	605a      	strne	r2, [r3, #4]
 8006fb8:	e7ec      	b.n	8006f94 <_malloc_r+0xa0>
 8006fba:	4623      	mov	r3, r4
 8006fbc:	6864      	ldr	r4, [r4, #4]
 8006fbe:	e7b2      	b.n	8006f26 <_malloc_r+0x32>
 8006fc0:	4634      	mov	r4, r6
 8006fc2:	6876      	ldr	r6, [r6, #4]
 8006fc4:	e7b9      	b.n	8006f3a <_malloc_r+0x46>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f000 f8fa 	bl	80071c4 <__malloc_unlock>
 8006fd0:	e7a1      	b.n	8006f16 <_malloc_r+0x22>
 8006fd2:	6025      	str	r5, [r4, #0]
 8006fd4:	e7de      	b.n	8006f94 <_malloc_r+0xa0>
 8006fd6:	bf00      	nop
 8006fd8:	20000550 	.word	0x20000550

08006fdc <_sbrk_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_sbrk_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fb fd06 	bl	80029f8 <_sbrk>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_sbrk_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_sbrk_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000558 	.word	0x20000558

08006ffc <_raise_r>:
 8006ffc:	291f      	cmp	r1, #31
 8006ffe:	b538      	push	{r3, r4, r5, lr}
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	d904      	bls.n	8007010 <_raise_r+0x14>
 8007006:	2316      	movs	r3, #22
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007012:	b112      	cbz	r2, 800701a <_raise_r+0x1e>
 8007014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007018:	b94b      	cbnz	r3, 800702e <_raise_r+0x32>
 800701a:	4620      	mov	r0, r4
 800701c:	f000 f830 	bl	8007080 <_getpid_r>
 8007020:	462a      	mov	r2, r5
 8007022:	4601      	mov	r1, r0
 8007024:	4620      	mov	r0, r4
 8007026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800702a:	f000 b817 	b.w	800705c <_kill_r>
 800702e:	2b01      	cmp	r3, #1
 8007030:	d00a      	beq.n	8007048 <_raise_r+0x4c>
 8007032:	1c59      	adds	r1, r3, #1
 8007034:	d103      	bne.n	800703e <_raise_r+0x42>
 8007036:	2316      	movs	r3, #22
 8007038:	6003      	str	r3, [r0, #0]
 800703a:	2001      	movs	r0, #1
 800703c:	e7e7      	b.n	800700e <_raise_r+0x12>
 800703e:	2400      	movs	r4, #0
 8007040:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007044:	4628      	mov	r0, r5
 8007046:	4798      	blx	r3
 8007048:	2000      	movs	r0, #0
 800704a:	e7e0      	b.n	800700e <_raise_r+0x12>

0800704c <raise>:
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <raise+0xc>)
 800704e:	4601      	mov	r1, r0
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f7ff bfd3 	b.w	8006ffc <_raise_r>
 8007056:	bf00      	nop
 8007058:	20000054 	.word	0x20000054

0800705c <_kill_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	; (800707c <_kill_r+0x20>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	4611      	mov	r1, r2
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	f7fb fc8d 	bl	8002988 <_kill>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d102      	bne.n	8007078 <_kill_r+0x1c>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	b103      	cbz	r3, 8007078 <_kill_r+0x1c>
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	bd38      	pop	{r3, r4, r5, pc}
 800707a:	bf00      	nop
 800707c:	20000558 	.word	0x20000558

08007080 <_getpid_r>:
 8007080:	f7fb bc80 	b.w	8002984 <_getpid>

08007084 <__sread>:
 8007084:	b510      	push	{r4, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	f000 f8a0 	bl	80071d0 <_read_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	bfab      	itete	ge
 8007094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007096:	89a3      	ldrhlt	r3, [r4, #12]
 8007098:	181b      	addge	r3, r3, r0
 800709a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800709e:	bfac      	ite	ge
 80070a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070a2:	81a3      	strhlt	r3, [r4, #12]
 80070a4:	bd10      	pop	{r4, pc}

080070a6 <__swrite>:
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	461f      	mov	r7, r3
 80070ac:	898b      	ldrh	r3, [r1, #12]
 80070ae:	05db      	lsls	r3, r3, #23
 80070b0:	4605      	mov	r5, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	4616      	mov	r6, r2
 80070b6:	d505      	bpl.n	80070c4 <__swrite+0x1e>
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2302      	movs	r3, #2
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f868 	bl	8007194 <_lseek_r>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	4632      	mov	r2, r6
 80070d2:	463b      	mov	r3, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	f000 b817 	b.w	800710c <_write_r>

080070de <__sseek>:
 80070de:	b510      	push	{r4, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e6:	f000 f855 	bl	8007194 <_lseek_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	bf15      	itete	ne
 80070f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80070f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070fa:	81a3      	strheq	r3, [r4, #12]
 80070fc:	bf18      	it	ne
 80070fe:	81a3      	strhne	r3, [r4, #12]
 8007100:	bd10      	pop	{r4, pc}

08007102 <__sclose>:
 8007102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007106:	f000 b813 	b.w	8007130 <_close_r>
	...

0800710c <_write_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_write_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fb fc50 	bl	80029c0 <_write>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_write_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_write_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000558 	.word	0x20000558

08007130 <_close_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	; (800714c <_close_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7fb fc4e 	bl	80029dc <_close>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_close_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_close_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20000558 	.word	0x20000558

08007150 <_fstat_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_fstat_r+0x20>)
 8007154:	2300      	movs	r3, #0
 8007156:	4604      	mov	r4, r0
 8007158:	4608      	mov	r0, r1
 800715a:	4611      	mov	r1, r2
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	f7fb fc41 	bl	80029e4 <_fstat>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d102      	bne.n	800716c <_fstat_r+0x1c>
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	b103      	cbz	r3, 800716c <_fstat_r+0x1c>
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	bd38      	pop	{r3, r4, r5, pc}
 800716e:	bf00      	nop
 8007170:	20000558 	.word	0x20000558

08007174 <_isatty_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4d06      	ldr	r5, [pc, #24]	; (8007190 <_isatty_r+0x1c>)
 8007178:	2300      	movs	r3, #0
 800717a:	4604      	mov	r4, r0
 800717c:	4608      	mov	r0, r1
 800717e:	602b      	str	r3, [r5, #0]
 8007180:	f7fb fc36 	bl	80029f0 <_isatty>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_isatty_r+0x1a>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	b103      	cbz	r3, 800718e <_isatty_r+0x1a>
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	20000558 	.word	0x20000558

08007194 <_lseek_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4d07      	ldr	r5, [pc, #28]	; (80071b4 <_lseek_r+0x20>)
 8007198:	4604      	mov	r4, r0
 800719a:	4608      	mov	r0, r1
 800719c:	4611      	mov	r1, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	602a      	str	r2, [r5, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f7fb fc26 	bl	80029f4 <_lseek>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_lseek_r+0x1e>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_lseek_r+0x1e>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20000558 	.word	0x20000558

080071b8 <__malloc_lock>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__malloc_lock+0x8>)
 80071ba:	f7ff bdc7 	b.w	8006d4c <__retarget_lock_acquire_recursive>
 80071be:	bf00      	nop
 80071c0:	2000054c 	.word	0x2000054c

080071c4 <__malloc_unlock>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__malloc_unlock+0x8>)
 80071c6:	f7ff bdc2 	b.w	8006d4e <__retarget_lock_release_recursive>
 80071ca:	bf00      	nop
 80071cc:	2000054c 	.word	0x2000054c

080071d0 <_read_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	; (80071f0 <_read_r+0x20>)
 80071d4:	4604      	mov	r4, r0
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	f7fb fbe0 	bl	80029a4 <_read>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_read_r+0x1e>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_read_r+0x1e>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	20000558 	.word	0x20000558

080071f4 <_init>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <_fini>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr
