
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a0  080075a0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080075a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200000a0  08007648  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08007648  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00165203  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371b  00000000  00000000  001852d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000519c7  00000000  00000000  001889ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  001da3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000086e0  00000000  00000000  001db010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd33  00000000  00000000  001e36f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    003da43f  00000000  00000000  0020f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  005e9862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003848  00000000  00000000  005e98b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f60 	.word	0x08006f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08006f60 	.word	0x08006f60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b974 	b.w	8000cfc <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	4604      	mov	r4, r0
 8000a34:	468e      	mov	lr, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14d      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	d969      	bls.n	8000b14 <__udivmoddi4+0xe8>
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	b152      	cbz	r2, 8000a5c <__udivmoddi4+0x30>
 8000a46:	fa01 f302 	lsl.w	r3, r1, r2
 8000a4a:	f1c2 0120 	rsb	r1, r2, #32
 8000a4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a56:	ea41 0e03 	orr.w	lr, r1, r3
 8000a5a:	4094      	lsls	r4, r2
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	0c21      	lsrs	r1, r4, #16
 8000a62:	fbbe f6f8 	udiv	r6, lr, r8
 8000a66:	fa1f f78c 	uxth.w	r7, ip
 8000a6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a72:	fb06 f107 	mul.w	r1, r6, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a82:	f080 811f 	bcs.w	8000cc4 <__udivmoddi4+0x298>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 811c 	bls.w	8000cc4 <__udivmoddi4+0x298>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a98:	fb08 3310 	mls	r3, r8, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 f707 	mul.w	r7, r0, r7
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x92>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab0:	f080 810a 	bcs.w	8000cc8 <__udivmoddi4+0x29c>
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	f240 8107 	bls.w	8000cc8 <__udivmoddi4+0x29c>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	1be4      	subs	r4, r4, r7
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	b11d      	cbz	r5, 8000ad0 <__udivmoddi4+0xa4>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xc2>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	f000 80ef 	beq.w	8000cbe <__udivmoddi4+0x292>
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f683 	clz	r6, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d14a      	bne.n	8000b8c <__udivmoddi4+0x160>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd4>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80f9 	bhi.w	8000cf2 <__udivmoddi4+0x2c6>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	469e      	mov	lr, r3
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa4>
 8000b0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xec>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 8092 	bne.w	8000c46 <__udivmoddi4+0x21a>
 8000b22:	eba1 010c 	sub.w	r1, r1, ip
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2601      	movs	r6, #1
 8000b30:	0c20      	lsrs	r0, r4, #16
 8000b32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b36:	fb07 1113 	mls	r1, r7, r3, r1
 8000b3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b3e:	fb0e f003 	mul.w	r0, lr, r3
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x12c>
 8000b46:	eb1c 0101 	adds.w	r1, ip, r1
 8000b4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x12a>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2c0>
 8000b56:	4643      	mov	r3, r8
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b60:	fb07 1110 	mls	r1, r7, r0, r1
 8000b64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x156>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x154>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b80:	4608      	mov	r0, r1
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b8a:	e79c      	b.n	8000ac6 <__udivmoddi4+0x9a>
 8000b8c:	f1c6 0720 	rsb	r7, r6, #32
 8000b90:	40b3      	lsls	r3, r6
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	40f9      	lsrs	r1, r7
 8000ba6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000baa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bb2:	0c20      	lsrs	r0, r4, #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bc4:	4288      	cmp	r0, r1
 8000bc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b8>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1a09      	subs	r1, r1, r0
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bec:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	458e      	cmp	lr, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1e2>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c06:	458e      	cmp	lr, r1
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c12:	fba0 9402 	umull	r9, r4, r0, r2
 8000c16:	eba1 010e 	sub.w	r1, r1, lr
 8000c1a:	42a1      	cmp	r1, r4
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46a6      	mov	lr, r4
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x2a0>
 8000c24:	b15d      	cbz	r5, 8000c3e <__udivmoddi4+0x212>
 8000c26:	ebb3 0208 	subs.w	r2, r3, r8
 8000c2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c32:	fa22 f306 	lsr.w	r3, r2, r6
 8000c36:	40f1      	lsrs	r1, r6
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	40d8      	lsrs	r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa21 f303 	lsr.w	r3, r1, r3
 8000c54:	4091      	lsls	r1, r2
 8000c56:	4301      	orrs	r1, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c64:	fb07 3610 	mls	r6, r7, r0, r3
 8000c68:	0c0b      	lsrs	r3, r1, #16
 8000c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c72:	429e      	cmp	r6, r3
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x260>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c84:	429e      	cmp	r6, r3
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	b289      	uxth	r1, r1
 8000c90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c94:	fb07 3316 	mls	r3, r7, r6, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x28a>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000cb2:	3e02      	subs	r6, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0x104>
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e705      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e3      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6f8      	b.n	8000abe <__udivmoddi4+0x92>
 8000ccc:	454b      	cmp	r3, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f8>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f8>
 8000cdc:	4646      	mov	r6, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x28a>
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1e2>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x260>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b8>
 8000cec:	3b02      	subs	r3, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x12c>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e709      	b.n	8000b0a <__udivmoddi4+0xde>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x156>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>:
    * \code
    * quaternion.fromRotationMatrix((Matrix3f() << axis0, axis1, axis2).finished());
    * \endcode
    */
  EIGEN_DEVICE_FUNC
  inline XprType& finished() {
 8000d00:	b508      	push	{r3, lr}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d02:	68c2      	ldr	r2, [r0, #12]
 8000d04:	6843      	ldr	r3, [r0, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d103      	bne.n	8000d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x14>
 8000d0c:	6883      	ldr	r3, [r0, #8]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d100      	bne.n	8000d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x14>
           && m_col == m_xpr.cols()
           && "Too few coefficients passed to comma initializer (operator<<)");
      return m_xpr;
  }
 8000d12:	bd08      	pop	{r3, pc}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x20>)
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x24>)
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0+0x28>)
 8000d1a:	217a      	movs	r1, #122	; 0x7a
 8000d1c:	f005 f8fc 	bl	8005f18 <__assert_func>
 8000d20:	08006f78 	.word	0x08006f78
 8000d24:	08007018 	.word	0x08007018
 8000d28:	08007080 	.word	0x08007080

08000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>:
  inline XprType& finished() {
 8000d2c:	b508      	push	{r3, lr}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d2e:	68c2      	ldr	r2, [r0, #12]
 8000d30:	6843      	ldr	r3, [r0, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d103      	bne.n	8000d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x14>
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d100      	bne.n	8000d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x14>
  }
 8000d3e:	bd08      	pop	{r3, pc}
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x20>)
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x24>)
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0+0x28>)
 8000d46:	217a      	movs	r1, #122	; 0x7a
 8000d48:	f005 f8e6 	bl	8005f18 <__assert_func>
 8000d4c:	08006f78 	.word	0x08006f78
 8000d50:	080070c8 	.word	0x080070c8
 8000d54:	08007080 	.word	0x08007080

08000d58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	2300      	movs	r3, #0
{
 8000d5c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8000d62:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d6a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4926      	ldr	r1, [pc, #152]	; (8000e08 <_Z18SystemClock_Configv+0xb0>)
 8000d70:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <_Z18SystemClock_Configv+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000d7e:	6408      	str	r0, [r1, #64]	; 0x40
 8000d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d82:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000d86:	9100      	str	r1, [sp, #0]
 8000d88:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	6813      	ldr	r3, [r2, #0]
 8000d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9a:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2002      	movs	r0, #2
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000daa:	2008      	movs	r0, #8
 8000dac:	2164      	movs	r1, #100	; 0x64
 8000dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000db2:	2002      	movs	r0, #2
 8000db4:	2104      	movs	r1, #4
 8000db6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dba:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f003 fdc2 	bl	800494c <HAL_RCC_OscConfig>
 8000dc8:	b108      	cbz	r0, 8000dce <_Z18SystemClock_Configv+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <_Z18SystemClock_Configv+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000df8 <_Z18SystemClock_Configv+0xa0>
 8000dd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000dd6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000e00 <_Z18SystemClock_Configv+0xa8>
 8000dda:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ddc:	2103      	movs	r1, #3
 8000dde:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de6:	f003 ffc9 	bl	8004d7c <HAL_RCC_ClockConfig>
 8000dea:	b108      	cbz	r0, 8000df0 <_Z18SystemClock_Configv+0x98>
 8000dec:	b672      	cpsid	i
  while (1)
 8000dee:	e7fe      	b.n	8000dee <_Z18SystemClock_Configv+0x96>
}
 8000df0:	b015      	add	sp, #84	; 0x54
 8000df2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000df6:	bf00      	nop
 8000df8:	0000000f 	.word	0x0000000f
 8000dfc:	00000002 	.word	0x00000002
 8000e00:	00000000 	.word	0x00000000
 8000e04:	00001000 	.word	0x00001000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <_Z10Trajectoryv>:
void Trajectory(){
 8000e10:	b538      	push	{r3, r4, r5, lr}
{return _micros + htim11.Instance->CNT;}
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <_Z10Trajectoryv+0x110>)
 8000e14:	4943      	ldr	r1, [pc, #268]	; (8000f24 <_Z10Trajectoryv+0x114>)
 8000e16:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampTraject >= 10000){
 8000e18:	4c43      	ldr	r4, [pc, #268]	; (8000f28 <_Z10Trajectoryv+0x118>)
{return _micros + htim11.Instance->CNT;}
 8000e1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampTraject >= 10000){
 8000e1c:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 8000e1e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampTraject >= 10000){
 8000e22:	1a1b      	subs	r3, r3, r0
 8000e24:	eb60 0000 	sbc.w	r0, r0, r0
 8000e28:	189b      	adds	r3, r3, r2
 8000e2a:	eb41 0100 	adc.w	r1, r1, r0
 8000e2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e32:	4283      	cmp	r3, r0
 8000e34:	f171 0300 	sbcs.w	r3, r1, #0
 8000e38:	d345      	bcc.n	8000ec6 <_Z10Trajectoryv+0xb6>
		if (Distance > 0){
 8000e3a:	493c      	ldr	r1, [pc, #240]	; (8000f2c <_Z10Trajectoryv+0x11c>)
{return _micros + htim11.Instance->CNT;}
 8000e3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		if (Distance > 0){
 8000e3e:	edd1 7a00 	vldr	s15, [r1]
 8000e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
{return _micros + htim11.Instance->CNT;}
 8000e46:	189b      	adds	r3, r3, r2
		if (Distance > 0){
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TimeStampTraject = micros();
 8000e4c:	6023      	str	r3, [r4, #0]
		if (Distance > 0){
 8000e4e:	dd3b      	ble.n	8000ec8 <_Z10Trajectoryv+0xb8>
			Velocity=1.04719755;
 8000e50:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000f30 <_Z10Trajectoryv+0x120>
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <_Z10Trajectoryv+0x124>)
			Acceleration= 0.5;
 8000e56:	4838      	ldr	r0, [pc, #224]	; (8000f38 <_Z10Trajectoryv+0x128>)
			check = 50;
 8000e58:	4a38      	ldr	r2, [pc, #224]	; (8000f3c <_Z10Trajectoryv+0x12c>)
			Acceleration= 0.5;
 8000e5a:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
			check = 50;
 8000e5e:	2132      	movs	r1, #50	; 0x32
 8000e60:	eeb0 7a66 	vmov.f32	s14, s13
			Velocity=-1.04719755;
 8000e64:	edc3 6a00 	vstr	s13, [r3]
		if (Distance/Velocity > Velocity/Acceleration){
 8000e68:	eec7 6a87 	vdiv.f32	s13, s15, s14
		    Acceleration= -0.5;
 8000e6c:	6004      	str	r4, [r0, #0]
		    check = 100;
 8000e6e:	7011      	strb	r1, [r2, #0]
		if (Distance/Velocity > Velocity/Acceleration){
 8000e70:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8000f40 <_Z10Trajectoryv+0x130>
 8000e74:	eef4 6ac6 	vcmpe.f32	s13, s12
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	dd34      	ble.n	8000ee8 <_Z10Trajectoryv+0xd8>
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8000e7e:	ee67 6a07 	vmul.f32	s13, s14, s14
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000e82:	eef0 7ae7 	vabs.f32	s15, s15
 8000e86:	eeb0 7ac7 	vabs.f32	s14, s14
 8000e8a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000e8e:	eee6 7ae5 	vfms.f32	s15, s13, s11
 8000e92:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <_Z10Trajectoryv+0x134>)
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <_Z10Trajectoryv+0x138>)
		TimeinS = TimeinS + Dt;
 8000e96:	4c2d      	ldr	r4, [pc, #180]	; (8000f4c <_Z10Trajectoryv+0x13c>)
 8000e98:	ed82 6a00 	vstr	s12, [r2]
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8000e9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
		TimeinS = TimeinS + Dt;
 8000ea0:	6820      	ldr	r0, [r4, #0]
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8000ea2:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000ea6:	eef0 7a66 	vmov.f32	s15, s13
 8000eaa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8000eae:	edc3 7a00 	vstr	s15, [r3]
		TimeinS = TimeinS + Dt;
 8000eb2:	f7ff fc73 	bl	800079c <__aeabi_f2d>
 8000eb6:	a318      	add	r3, pc, #96	; (adr r3, 8000f18 <_Z10Trajectoryv+0x108>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb10 	bl	80004e0 <__adddf3>
 8000ec0:	f7ff fd4c 	bl	800095c <__aeabi_d2f>
 8000ec4:	6020      	str	r0, [r4, #0]
}
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
		else if(Distance < 0){
 8000ec8:	d41d      	bmi.n	8000f06 <_Z10Trajectoryv+0xf6>
		if (Distance/Velocity > Velocity/Acceleration){
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <_Z10Trajectoryv+0x124>)
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <_Z10Trajectoryv+0x128>)
 8000ece:	ed93 7a00 	vldr	s14, [r3]
 8000ed2:	edd2 6a00 	vldr	s13, [r2]
 8000ed6:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8000eda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ede:	eef4 6ac6 	vcmpe.f32	s13, s12
 8000ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee6:	dcca      	bgt.n	8000e7e <_Z10Trajectoryv+0x6e>
 8000ee8:	eef0 7ae7 	vabs.f32	s15, s15
			Velocity = sqrt(abs(Distance)/2);
 8000eec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000ef0:	ee67 6aa6 	vmul.f32	s13, s15, s13
			Tb = sqrt(2*abs(Distance));
 8000ef4:	ee77 5aa7 	vadd.f32	s11, s15, s15
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000ef8:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8000efc:	eeb1 6ae5 	vsqrt.f32	s12, s11
			Velocity = sqrt(abs(Distance)/2);
 8000f00:	ed83 7a00 	vstr	s14, [r3]
 8000f04:	e7c1      	b.n	8000e8a <_Z10Trajectoryv+0x7a>
			Velocity=-1.04719755;
 8000f06:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000f50 <_Z10Trajectoryv+0x140>
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <_Z10Trajectoryv+0x124>)
		    Acceleration= -0.5;
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <_Z10Trajectoryv+0x128>)
		    check = 100;
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <_Z10Trajectoryv+0x12c>)
		    Acceleration= -0.5;
 8000f10:	f04f 443f 	mov.w	r4, #3204448256	; 0xbf000000
		    check = 100;
 8000f14:	2164      	movs	r1, #100	; 0x64
 8000f16:	e7a3      	b.n	8000e60 <_Z10Trajectoryv+0x50>
 8000f18:	47ae147b 	.word	0x47ae147b
 8000f1c:	3f847ae1 	.word	0x3f847ae1
 8000f20:	20000374 	.word	0x20000374
 8000f24:	20000268 	.word	0x20000268
 8000f28:	20000238 	.word	0x20000238
 8000f2c:	20000110 	.word	0x20000110
 8000f30:	3f860a92 	.word	0x3f860a92
 8000f34:	20000244 	.word	0x20000244
 8000f38:	200000e0 	.word	0x200000e0
 8000f3c:	200002b5 	.word	0x200002b5
 8000f40:	40060a92 	.word	0x40060a92
 8000f44:	20000220 	.word	0x20000220
 8000f48:	200004a8 	.word	0x200004a8
 8000f4c:	20000240 	.word	0x20000240
 8000f50:	bf860a92 	.word	0xbf860a92
 8000f54:	00000000 	.word	0x00000000

08000f58 <_Z10Unwrappingv>:
void Unwrapping(){
 8000f58:	b538      	push	{r3, r4, r5, lr}
{return _micros + htim11.Instance->CNT;}
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <_Z10Unwrappingv+0xd8>)
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <_Z10Unwrappingv+0xdc>)
 8000f5e:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeUnwrap >= 10000){
 8000f60:	4c35      	ldr	r4, [pc, #212]	; (8001038 <_Z10Unwrappingv+0xe0>)
{return _micros + htim11.Instance->CNT;}
 8000f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeUnwrap >= 10000){
 8000f64:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 8000f66:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeUnwrap >= 10000){
 8000f6a:	1a1b      	subs	r3, r3, r0
 8000f6c:	eb60 0000 	sbc.w	r0, r0, r0
 8000f70:	189b      	adds	r3, r3, r2
 8000f72:	eb41 0100 	adc.w	r1, r1, r0
 8000f76:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	f171 0300 	sbcs.w	r3, r1, #0
 8000f80:	d337      	bcc.n	8000ff2 <_Z10Unwrappingv+0x9a>
		Pn=BinPosXI*0.006136;
 8000f82:	492e      	ldr	r1, [pc, #184]	; (800103c <_Z10Unwrappingv+0xe4>)
{return _micros + htim11.Instance->CNT;}
 8000f84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		Pn=BinPosXI*0.006136;
 8000f86:	8808      	ldrh	r0, [r1, #0]
{return _micros + htim11.Instance->CNT;}
 8000f88:	189b      	adds	r3, r3, r2
		TimeUnwrap = micros();
 8000f8a:	6023      	str	r3, [r4, #0]
		Pn=BinPosXI*0.006136;
 8000f8c:	f7ff fbf4 	bl	8000778 <__aeabi_i2d>
 8000f90:	a325      	add	r3, pc, #148	; (adr r3, 8001028 <_Z10Unwrappingv+0xd0>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff f973 	bl	8000280 <__aeabi_dmul>
 8000f9a:	f7ff fcdf 	bl	800095c <__aeabi_d2f>
		if(Pn-P_n <= -1*e){
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <_Z10Unwrappingv+0xe8>)
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <_Z10Unwrappingv+0xec>)
 8000fa2:	ed92 7a00 	vldr	s14, [r2]
 8000fa6:	edd3 6a00 	vldr	s13, [r3]
		Pn=BinPosXI*0.006136;
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <_Z10Unwrappingv+0xf0>)
 8000fac:	ee07 0a90 	vmov	s15, r0
		if(Pn-P_n <= -1*e){
 8000fb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fb4:	eeb1 6a66 	vneg.f32	s12, s13
 8000fb8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Pn=BinPosXI*0.006136;
 8000fc0:	6018      	str	r0, [r3, #0]
		if(Pn-P_n <= -1*e){
 8000fc2:	d817      	bhi.n	8000ff4 <_Z10Unwrappingv+0x9c>
			P0=P_0+P_max;
 8000fc4:	4921      	ldr	r1, [pc, #132]	; (800104c <_Z10Unwrappingv+0xf4>)
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <_Z10Unwrappingv+0xf8>)
 8000fc8:	edd1 6a00 	vldr	s13, [r1]
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	4920      	ldr	r1, [pc, #128]	; (8001054 <_Z10Unwrappingv+0xfc>)
 8000fd2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000fd6:	ed81 7a00 	vstr	s14, [r1]
		OutUnwrap=Pn+P0;
 8000fda:	481f      	ldr	r0, [pc, #124]	; (8001058 <_Z10Unwrappingv+0x100>)
		CurrentEn=BinPosXI*0.006136;
 8000fdc:	491f      	ldr	r1, [pc, #124]	; (800105c <_Z10Unwrappingv+0x104>)
		P_n=Pn;
 8000fde:	edc2 7a00 	vstr	s15, [r2]
		OutUnwrap=Pn+P0;
 8000fe2:	ee77 6a87 	vadd.f32	s13, s15, s14
		CurrentEn=BinPosXI*0.006136;
 8000fe6:	edc1 7a00 	vstr	s15, [r1]
		OutUnwrap=Pn+P0;
 8000fea:	edc0 6a00 	vstr	s13, [r0]
		P_0=P0;
 8000fee:	ed83 7a00 	vstr	s14, [r3]
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
		else if(Pn-P_n >= e){
 8000ff4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			P0=P_0-P_max;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <_Z10Unwrappingv+0xf8>)
		else if(Pn-P_n >= e){
 8000ffe:	db0a      	blt.n	8001016 <_Z10Unwrappingv+0xbe>
			P0=P_0-P_max;
 8001000:	4912      	ldr	r1, [pc, #72]	; (800104c <_Z10Unwrappingv+0xf4>)
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	edd1 6a00 	vldr	s13, [r1]
 800100a:	4912      	ldr	r1, [pc, #72]	; (8001054 <_Z10Unwrappingv+0xfc>)
 800100c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001010:	ed81 7a00 	vstr	s14, [r1]
 8001014:	e7e1      	b.n	8000fda <_Z10Unwrappingv+0x82>
			P0=P_0;
 8001016:	490f      	ldr	r1, [pc, #60]	; (8001054 <_Z10Unwrappingv+0xfc>)
 8001018:	ed93 7a00 	vldr	s14, [r3]
 800101c:	ed81 7a00 	vstr	s14, [r1]
 8001020:	e7db      	b.n	8000fda <_Z10Unwrappingv+0x82>
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	f540895d 	.word	0xf540895d
 800102c:	3f79220f 	.word	0x3f79220f
 8001030:	20000374 	.word	0x20000374
 8001034:	20000268 	.word	0x20000268
 8001038:	2000023c 	.word	0x2000023c
 800103c:	200000f0 	.word	0x200000f0
 8001040:	200001e4 	.word	0x200001e4
 8001044:	2000002c 	.word	0x2000002c
 8001048:	200001e8 	.word	0x200001e8
 800104c:	2000000c 	.word	0x2000000c
 8001050:	200001e0 	.word	0x200001e0
 8001054:	200001d8 	.word	0x200001d8
 8001058:	200001ac 	.word	0x200001ac
 800105c:	20000100 	.word	0x20000100

08001060 <_Z11PIDPositionv>:
{return _micros + htim11.Instance->CNT;}
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <_Z11PIDPositionv+0xa4>)
 8001062:	4929      	ldr	r1, [pc, #164]	; (8001108 <_Z11PIDPositionv+0xa8>)
void PIDPosition(){
 8001064:	b430      	push	{r4, r5}
{return _micros + htim11.Instance->CNT;}
 8001066:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampPID_P >= 10000){
 8001068:	4c28      	ldr	r4, [pc, #160]	; (800110c <_Z11PIDPositionv+0xac>)
{return _micros + htim11.Instance->CNT;}
 800106a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampPID_P >= 10000){
 800106c:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 800106e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampPID_P >= 10000){
 8001072:	1a1b      	subs	r3, r3, r0
 8001074:	eb60 0000 	sbc.w	r0, r0, r0
 8001078:	189b      	adds	r3, r3, r2
 800107a:	eb41 0100 	adc.w	r1, r1, r0
 800107e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001082:	4283      	cmp	r3, r0
 8001084:	f171 0300 	sbcs.w	r3, r1, #0
 8001088:	d339      	bcc.n	80010fe <_Z11PIDPositionv+0x9e>
		ErrPos[0] = OutPosition - KalP;
 800108a:	4921      	ldr	r1, [pc, #132]	; (8001110 <_Z11PIDPositionv+0xb0>)
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <_Z11PIDPositionv+0xb4>)
 800108e:	ed91 7a00 	vldr	s14, [r1]
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	4920      	ldr	r1, [pc, #128]	; (8001118 <_Z11PIDPositionv+0xb8>)
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <_Z11PIDPositionv+0xbc>)
 800109a:	edd1 7a01 	vldr	s15, [r1, #4]
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <_Z11PIDPositionv+0xc0>)
		ErrPos[0] = OutPosition - KalP;
 80010a0:	ee37 7a66 	vsub.f32	s14, s14, s13
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80010a4:	edd3 6a00 	vldr	s13, [r3]
{return _micros + htim11.Instance->CNT;}
 80010a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		ErrPos[0] = OutPosition - KalP;
 80010aa:	ed81 7a00 	vstr	s14, [r1]
{return _micros + htim11.Instance->CNT;}
 80010ae:	189b      	adds	r3, r3, r2
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
		sumError = sumError + ErrPos[0];
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <_Z11PIDPositionv+0xc4>)
		TimeStampPID_P = micros();
 80010b6:	6023      	str	r3, [r4, #0]
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80010b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <_Z11PIDPositionv+0xc8>)
		sumError = sumError + ErrPos[0];
 80010be:	edd2 6a00 	vldr	s13, [r2]
		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80010c2:	edc0 7a00 	vstr	s15, [r0]
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80010c6:	edd3 5a00 	vldr	s11, [r3]
		Propo = K_P * ErrPos[0];
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <_Z11PIDPositionv+0xcc>)
		ufromposit = Propo + Integral + Derivate;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <_Z11PIDPositionv+0xd0>)
		Propo = K_P * ErrPos[0];
 80010ce:	ed90 6a00 	vldr	s12, [r0]
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <_Z11PIDPositionv+0xd4>)
		ErrPos[1] = ErrPos[0]; // log previous error
 80010d4:	ed81 7a01 	vstr	s14, [r1, #4]
		sumError = sumError + ErrPos[0];
 80010d8:	ee77 6a26 	vadd.f32	s13, s14, s13
		Propo = K_P * ErrPos[0];
 80010dc:	ee27 6a06 	vmul.f32	s12, s14, s12
		sumError = sumError + ErrPos[0];
 80010e0:	edc2 6a00 	vstr	s13, [r2]
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80010e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <_Z11PIDPositionv+0xd8>)
		Propo = K_P * ErrPos[0];
 80010ea:	ed80 6a00 	vstr	s12, [r0]
		ufromposit = Propo + Integral + Derivate;
 80010ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80010f2:	edc2 6a00 	vstr	s13, [r2]
		ufromposit = Propo + Integral + Derivate;
 80010f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80010fa:	edc3 7a00 	vstr	s15, [r3]
}
 80010fe:	bc30      	pop	{r4, r5}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000374 	.word	0x20000374
 8001108:	20000268 	.word	0x20000268
 800110c:	20000230 	.word	0x20000230
 8001110:	200001a8 	.word	0x200001a8
 8001114:	2000017c 	.word	0x2000017c
 8001118:	20000114 	.word	0x20000114
 800111c:	20000170 	.word	0x20000170
 8001120:	2000010c 	.word	0x2000010c
 8001124:	200004a4 	.word	0x200004a4
 8001128:	20000174 	.word	0x20000174
 800112c:	20000004 	.word	0x20000004
 8001130:	200004b8 	.word	0x200004b8
 8001134:	200001ec 	.word	0x200001ec
 8001138:	20000160 	.word	0x20000160

0800113c <_Z11PIDVelocityv>:
{return _micros + htim11.Instance->CNT;}
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <_Z11PIDVelocityv+0x94>)
 800113e:	4925      	ldr	r1, [pc, #148]	; (80011d4 <_Z11PIDVelocityv+0x98>)
void PIDVelocity(){
 8001140:	b430      	push	{r4, r5}
{return _micros + htim11.Instance->CNT;}
 8001142:	681d      	ldr	r5, [r3, #0]
	if(micros() - TimeStampPID_V >= 10000){
 8001144:	4c24      	ldr	r4, [pc, #144]	; (80011d8 <_Z11PIDVelocityv+0x9c>)
{return _micros + htim11.Instance->CNT;}
 8001146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if(micros() - TimeStampPID_V >= 10000){
 8001148:	6820      	ldr	r0, [r4, #0]
{return _micros + htim11.Instance->CNT;}
 800114a:	e9d1 2100 	ldrd	r2, r1, [r1]
	if(micros() - TimeStampPID_V >= 10000){
 800114e:	1a1b      	subs	r3, r3, r0
 8001150:	eb60 0000 	sbc.w	r0, r0, r0
 8001154:	189b      	adds	r3, r3, r2
 8001156:	eb41 0100 	adc.w	r1, r1, r0
 800115a:	f242 7010 	movw	r0, #10000	; 0x2710
 800115e:	4283      	cmp	r3, r0
 8001160:	f171 0300 	sbcs.w	r3, r1, #0
 8001164:	d331      	bcc.n	80011ca <_Z11PIDVelocityv+0x8e>
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001166:	491d      	ldr	r1, [pc, #116]	; (80011dc <_Z11PIDVelocityv+0xa0>)
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <_Z11PIDVelocityv+0xa4>)
 800116a:	ed91 7a00 	vldr	s14, [r1]
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <_Z11PIDVelocityv+0xa8>)
 8001174:	491c      	ldr	r1, [pc, #112]	; (80011e8 <_Z11PIDVelocityv+0xac>)
		SumAll = SumAll + ErrVelo[0];
 8001176:	481d      	ldr	r0, [pc, #116]	; (80011ec <_Z11PIDVelocityv+0xb0>)
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800117c:	edd3 7a00 	vldr	s15, [r3]
{return _micros + htim11.Instance->CNT;}
 8001180:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		SumAll = SumAll + ErrVelo[0];
 8001182:	edd0 6a00 	vldr	s13, [r0]
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8001186:	ee37 7a67 	vsub.f32	s14, s14, s15
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+( K_D*(ErrVelo[0]-ErrVelo[1])) ;
 800118a:	edd1 7a01 	vldr	s15, [r1, #4]
		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 800118e:	ed81 7a00 	vstr	s14, [r1]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8001192:	ed81 7a01 	vstr	s14, [r1, #4]
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+( K_D*(ErrVelo[0]-ErrVelo[1])) ;
 8001196:	4916      	ldr	r1, [pc, #88]	; (80011f0 <_Z11PIDVelocityv+0xb4>)
{return _micros + htim11.Instance->CNT;}
 8001198:	189b      	adds	r3, r3, r2
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+( K_D*(ErrVelo[0]-ErrVelo[1])) ;
 800119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <_Z11PIDVelocityv+0xb8>)
 80011a0:	edd1 5a00 	vldr	s11, [r1]
 80011a4:	ed92 6a00 	vldr	s12, [r2]
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <_Z11PIDVelocityv+0xbc>)
		TimeStampPID_V = micros();
 80011aa:	6023      	str	r3, [r4, #0]
		SumAll = SumAll + ErrVelo[0];
 80011ac:	ee77 6a26 	vadd.f32	s13, s14, s13
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+( K_D*(ErrVelo[0]-ErrVelo[1])) ;
 80011b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_Z11PIDVelocityv+0xc0>)
		SumAll = SumAll + ErrVelo[0];
 80011b6:	edc0 6a00 	vstr	s13, [r0]
		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+( K_D*(ErrVelo[0]-ErrVelo[1])) ;
 80011ba:	eee6 7a86 	vfma.f32	s15, s13, s12
 80011be:	ed92 6a00 	vldr	s12, [r2]
 80011c2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80011c6:	edc3 7a00 	vstr	s15, [r3]
}
 80011ca:	bc30      	pop	{r4, r5}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000374 	.word	0x20000374
 80011d4:	20000268 	.word	0x20000268
 80011d8:	20000234 	.word	0x20000234
 80011dc:	200001b0 	.word	0x200001b0
 80011e0:	200004b8 	.word	0x200004b8
 80011e4:	20000180 	.word	0x20000180
 80011e8:	2000011c 	.word	0x2000011c
 80011ec:	2000021c 	.word	0x2000021c
 80011f0:	20000170 	.word	0x20000170
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	200004b4 	.word	0x200004b4

08001200 <_Z12MotDrvCytronv>:
{return _micros + htim11.Instance->CNT;}
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <_Z12MotDrvCytronv+0xb8>)
 8001202:	492e      	ldr	r1, [pc, #184]	; (80012bc <_Z12MotDrvCytronv+0xbc>)
void MotDrvCytron(){
 8001204:	b570      	push	{r4, r5, r6, lr}
{return _micros + htim11.Instance->CNT;}
 8001206:	681e      	ldr	r6, [r3, #0]
	if(micros() - TimeDrive >= 10000){
 8001208:	4d2d      	ldr	r5, [pc, #180]	; (80012c0 <_Z12MotDrvCytronv+0xc0>)
{return _micros + htim11.Instance->CNT;}
 800120a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if(micros() - TimeDrive >= 10000){
 800120c:	6828      	ldr	r0, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 800120e:	680a      	ldr	r2, [r1, #0]
 8001210:	6849      	ldr	r1, [r1, #4]
	if(micros() - TimeDrive >= 10000){
 8001212:	1a1b      	subs	r3, r3, r0
 8001214:	eb60 0000 	sbc.w	r0, r0, r0
 8001218:	f242 7c10 	movw	ip, #10000	; 0x2710
 800121c:	189b      	adds	r3, r3, r2
 800121e:	eb41 0100 	adc.w	r1, r1, r0
 8001222:	4563      	cmp	r3, ip
 8001224:	f171 0300 	sbcs.w	r3, r1, #0
 8001228:	d326      	bcc.n	8001278 <_Z12MotDrvCytronv+0x78>
{return _micros + htim11.Instance->CNT;}
 800122a:	6a73      	ldr	r3, [r6, #36]	; 0x24
		u_contr = u_contr*833.3;
 800122c:	4e25      	ldr	r6, [pc, #148]	; (80012c4 <_Z12MotDrvCytronv+0xc4>)
{return _micros + htim11.Instance->CNT;}
 800122e:	189b      	adds	r3, r3, r2
		u_contr = u_contr*833.3;
 8001230:	6830      	ldr	r0, [r6, #0]
		TimeDrive = micros();
 8001232:	602b      	str	r3, [r5, #0]
		u_contr = u_contr*833.3;
 8001234:	f7ff fab2 	bl	800079c <__aeabi_f2d>
 8001238:	a31d      	add	r3, pc, #116	; (adr r3, 80012b0 <_Z12MotDrvCytronv+0xb0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f81f 	bl	8000280 <__aeabi_dmul>
 8001242:	f7ff fb8b 	bl	800095c <__aeabi_d2f>
 8001246:	ee07 0a90 	vmov	s15, r0
		if(u_contr > 0){
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		u_contr = u_contr*833.3;
 8001252:	6030      	str	r0, [r6, #0]
		if(u_contr > 0){
 8001254:	dd11      	ble.n	800127a <_Z12MotDrvCytronv+0x7a>
			mot_dirctn= 1;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <_Z12MotDrvCytronv+0xc8>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
		PWMOut= (int) fabsf(u_contr); // Absolute int
 800125c:	eef0 7ae7 	vabs.f32	s15, s15
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <_Z12MotDrvCytronv+0xcc>)
 8001266:	ee17 3a90 	vmov	r3, s15
		if(PWMOut> 5000){
 800126a:	f241 3188 	movw	r1, #5000	; 0x1388
		PWMOut= (int) fabsf(u_contr); // Absolute int
 800126e:	b29b      	uxth	r3, r3
		if(PWMOut> 5000){
 8001270:	428b      	cmp	r3, r1
		PWMOut= (int) fabsf(u_contr); // Absolute int
 8001272:	8013      	strh	r3, [r2, #0]
		if(PWMOut> 5000){
 8001274:	d906      	bls.n	8001284 <_Z12MotDrvCytronv+0x84>
			PWMOut = 5000; // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001276:	8011      	strh	r1, [r2, #0]
}
 8001278:	bd70      	pop	{r4, r5, r6, pc}
		else if(u_contr < 0) {
 800127a:	d5ef      	bpl.n	800125c <_Z12MotDrvCytronv+0x5c>
			mot_dirctn = 0;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <_Z12MotDrvCytronv+0xc8>)
 800127e:	2400      	movs	r4, #0
 8001280:	701c      	strb	r4, [r3, #0]
 8001282:	e7eb      	b.n	800125c <_Z12MotDrvCytronv+0x5c>
		if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){
 8001284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001288:	d2f6      	bcs.n	8001278 <_Z12MotDrvCytronv+0x78>
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_Z12MotDrvCytronv+0xd0>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001294:	eef0 7ae7 	vabs.f32	s15, s15
 8001298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			PWMOut = 1600;  //pvnt too low pwm that can't drive mot
 80012a0:	bfa4      	itt	ge
 80012a2:	f44f 63c8 	movge.w	r3, #1600	; 0x640
 80012a6:	8013      	strhge	r3, [r2, #0]
}
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	66666666 	.word	0x66666666
 80012b4:	408a0a66 	.word	0x408a0a66
 80012b8:	20000374 	.word	0x20000374
 80012bc:	20000268 	.word	0x20000268
 80012c0:	20000224 	.word	0x20000224
 80012c4:	200004b4 	.word	0x200004b4
 80012c8:	20000490 	.word	0x20000490
 80012cc:	200001dc 	.word	0x200001dc
 80012d0:	20000114 	.word	0x20000114

080012d4 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_13){
 80012d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80012d8:	d103      	bne.n	80012e2 <HAL_GPIO_EXTI_Callback+0xe>
		bluecounter++;
 80012da:	4a02      	ldr	r2, [pc, #8]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x10>)
 80012dc:	7813      	ldrb	r3, [r2, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	7013      	strb	r3, [r2, #0]
}
 80012e2:	4770      	bx	lr
 80012e4:	20000270 	.word	0x20000270

080012e8 <HAL_TIM_PeriodElapsedCallback>:
 if(htim == &htim11)
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4283      	cmp	r3, r0
 80012ec:	d000      	beq.n	80012f0 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 80012ee:	4770      	bx	lr
 {_micros += 65535;}
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012f2:	e9d2 3100 	ldrd	r3, r1, [r2]
 80012f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012fa:	181b      	adds	r3, r3, r0
 80012fc:	f141 0100 	adc.w	r1, r1, #0
 8001300:	e9c2 3100 	strd	r3, r1, [r2]
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000374 	.word	0x20000374
 800130c:	20000268 	.word	0x20000268

08001310 <Error_Handler>:
 8001310:	b672      	cpsid	i
  while (1)
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0x2>

08001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8001314:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	6802      	ldr	r2, [r0, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d011      	beq.n	8001342 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x2e>
    eigen_assert(m_col<m_xpr.cols()
 800131e:	2b02      	cmp	r3, #2
 8001320:	dc25      	bgt.n	800136e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x5a>
    eigen_assert(m_currentBlockRows==1);
 8001322:	68c4      	ldr	r4, [r0, #12]
 8001324:	2c01      	cmp	r4, #1
 8001326:	d11c      	bne.n	8001362 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x4e>
 8001328:	6844      	ldr	r4, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800132a:	f8d1 c000 	ldr.w	ip, [r1]
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
    {
      if(Flags & RowMajorBit)
        return m_storage.data()[colId + rowId * m_storage.cols()];
      else // column-major
        return m_storage.data()[rowId + colId * m_storage.rows()];
 800132e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001332:	4421      	add	r1, r4
 8001334:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001338:	3301      	adds	r3, #1
 800133a:	6083      	str	r3, [r0, #8]
 800133c:	f8c2 c000 	str.w	ip, [r2]
  }
 8001340:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 8001342:	68c3      	ldr	r3, [r0, #12]
 8001344:	6844      	ldr	r4, [r0, #4]
 8001346:	441c      	add	r4, r3
      m_currentBlockRows = 1;
 8001348:	2501      	movs	r5, #1
      m_col = 0;
 800134a:	2300      	movs	r3, #0
      eigen_assert(m_row<m_xpr.rows()
 800134c:	2c02      	cmp	r4, #2
      m_col = 0;
 800134e:	e9c0 4301 	strd	r4, r3, [r0, #4]
      m_currentBlockRows = 1;
 8001352:	60c5      	str	r5, [r0, #12]
      eigen_assert(m_row<m_xpr.rows()
 8001354:	dde9      	ble.n	800132a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x16>
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x68>)
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 800135a:	480a      	ldr	r0, [pc, #40]	; (8001384 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 800135c:	2148      	movs	r1, #72	; 0x48
 800135e:	f004 fddb 	bl	8005f18 <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x74>)
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 8001368:	214d      	movs	r1, #77	; 0x4d
 800136a:	f004 fdd5 	bl	8005f18 <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x78>)
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x6c>)
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x70>)
 8001374:	214b      	movs	r1, #75	; 0x4b
 8001376:	f004 fdcf 	bl	8005f18 <__assert_func>
 800137a:	bf00      	nop
 800137c:	08007130 	.word	0x08007130
 8001380:	08007180 	.word	0x08007180
 8001384:	08007080 	.word	0x08007080
 8001388:	0800729c 	.word	0x0800729c
 800138c:	08007244 	.word	0x08007244

08001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8001390:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 8001392:	6883      	ldr	r3, [r0, #8]
 8001394:	6802      	ldr	r2, [r0, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d011      	beq.n	80013be <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x2e>
    eigen_assert(m_col<m_xpr.cols()
 800139a:	2b00      	cmp	r3, #0
 800139c:	dc24      	bgt.n	80013e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x58>
    eigen_assert(m_currentBlockRows==1);
 800139e:	68c4      	ldr	r4, [r0, #12]
 80013a0:	2c01      	cmp	r4, #1
 80013a2:	d11b      	bne.n	80013dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x4c>
 80013a4:	6844      	ldr	r4, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80013a6:	f8d1 c000 	ldr.w	ip, [r1]
 80013aa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80013ae:	4421      	add	r1, r4
 80013b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80013b4:	3301      	adds	r3, #1
 80013b6:	6083      	str	r3, [r0, #8]
 80013b8:	f8c2 c000 	str.w	ip, [r2]
  }
 80013bc:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 80013be:	6844      	ldr	r4, [r0, #4]
 80013c0:	68c5      	ldr	r5, [r0, #12]
      m_currentBlockRows = 1;
 80013c2:	60c3      	str	r3, [r0, #12]
      m_row+=m_currentBlockRows;
 80013c4:	442c      	add	r4, r5
      m_col = 0;
 80013c6:	2300      	movs	r3, #0
      eigen_assert(m_row<m_xpr.rows()
 80013c8:	2c02      	cmp	r4, #2
      m_col = 0;
 80013ca:	e9c0 4301 	strd	r4, r3, [r0, #4]
      eigen_assert(m_row<m_xpr.rows()
 80013ce:	ddea      	ble.n	80013a6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x16>
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>)
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 80013d6:	2148      	movs	r1, #72	; 0x48
 80013d8:	f004 fd9e 	bl	8005f18 <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x70>)
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 80013e2:	214d      	movs	r1, #77	; 0x4d
 80013e4:	f004 fd98 	bl	8005f18 <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x74>)
 80013ea:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x68>)
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x6c>)
 80013ee:	214b      	movs	r1, #75	; 0x4b
 80013f0:	f004 fd92 	bl	8005f18 <__assert_func>
 80013f4:	08007130 	.word	0x08007130
 80013f8:	080072b4 	.word	0x080072b4
 80013fc:	08007080 	.word	0x08007080
 8001400:	0800729c 	.word	0x0800729c
 8001404:	08007244 	.word	0x08007244

08001408 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
    if (m_col==m_xpr.cols())
 8001408:	6882      	ldr	r2, [r0, #8]
 800140a:	2a03      	cmp	r2, #3
  CommaInitializer& operator,(const Scalar& s)
 800140c:	b538      	push	{r3, r4, r5, lr}
    if (m_col==m_xpr.cols())
 800140e:	6804      	ldr	r4, [r0, #0]
 8001410:	d00f      	beq.n	8001432 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x2a>
    eigen_assert(m_col<m_xpr.cols()
 8001412:	2a02      	cmp	r2, #2
 8001414:	dc23      	bgt.n	800145e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x56>
    eigen_assert(m_currentBlockRows==1);
 8001416:	68c3      	ldr	r3, [r0, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d11a      	bne.n	8001452 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x4a>
 800141c:	6843      	ldr	r3, [r0, #4]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800141e:	6809      	ldr	r1, [r1, #0]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8001420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001424:	4413      	add	r3, r2
 8001426:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800142a:	3201      	adds	r2, #1
 800142c:	6082      	str	r2, [r0, #8]
 800142e:	6019      	str	r1, [r3, #0]
  }
 8001430:	bd38      	pop	{r3, r4, r5, pc}
      m_row+=m_currentBlockRows;
 8001432:	68c2      	ldr	r2, [r0, #12]
 8001434:	6843      	ldr	r3, [r0, #4]
 8001436:	4413      	add	r3, r2
      m_col = 0;
 8001438:	2200      	movs	r2, #0
      m_currentBlockRows = 1;
 800143a:	2501      	movs	r5, #1
      eigen_assert(m_row<m_xpr.rows()
 800143c:	4293      	cmp	r3, r2
      m_col = 0;
 800143e:	e9c0 3201 	strd	r3, r2, [r0, #4]
      m_currentBlockRows = 1;
 8001442:	60c5      	str	r5, [r0, #12]
      eigen_assert(m_row<m_xpr.rows()
 8001444:	ddeb      	ble.n	800141e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x16>
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>)
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 800144a:	480a      	ldr	r0, [pc, #40]	; (8001474 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 800144c:	2148      	movs	r1, #72	; 0x48
 800144e:	f004 fd63 	bl	8005f18 <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x70>)
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 8001458:	214d      	movs	r1, #77	; 0x4d
 800145a:	f004 fd5d 	bl	8005f18 <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x74>)
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x68>)
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x6c>)
 8001464:	214b      	movs	r1, #75	; 0x4b
 8001466:	f004 fd57 	bl	8005f18 <__assert_func>
 800146a:	bf00      	nop
 800146c:	08007130 	.word	0x08007130
 8001470:	08007378 	.word	0x08007378
 8001474:	08007080 	.word	0x08007080
 8001478:	0800729c 	.word	0x0800729c
 800147c:	08007244 	.word	0x08007244

08001480 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
    dst.resize(dstRows, dstCols);
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
}

template<typename DstXprType, typename SrcXprType, typename Functor>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8001480:	b430      	push	{r4, r5}
    typedef typename internal::ref_selector<Rhs>::type RhsNested;
    typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
    typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8001482:	e9d1 4500 	ldrd	r4, r5, [r1]
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
 8001486:	ed94 3a03 	vldr	s6, [r4, #12]
 800148a:	ed95 7a04 	vldr	s14, [r5, #16]
 800148e:	edd4 7a00 	vldr	s15, [r4]
 8001492:	ed95 0a03 	vldr	s0, [r5, #12]
 8001496:	ed95 2a01 	vldr	s4, [r5, #4]
 800149a:	edd5 5a00 	vldr	s11, [r5]
 800149e:	edd5 4a06 	vldr	s9, [r5, #24]
 80014a2:	ed94 5a04 	vldr	s10, [r4, #16]
 80014a6:	ed94 4a06 	vldr	s8, [r4, #24]
 80014aa:	ed94 6a05 	vldr	s12, [r4, #20]
 80014ae:	688a      	ldr	r2, [r1, #8]
 80014b0:	ed95 1a02 	vldr	s2, [r5, #8]
 80014b4:	edd4 1a02 	vldr	s3, [r4, #8]
 80014b8:	edd4 0a07 	vldr	s1, [r4, #28]
    /** \returns the left hand side nested expression */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const _LhsNested& lhs() const { return m_lhs; }
    /** \returns the right hand side nested expression */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const _RhsNested& rhs() const { return m_rhs; }
 80014bc:	68cb      	ldr	r3, [r1, #12]
 80014be:	ed2d 8b04 	vpush	{d8-d9}
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80014c2:	ee63 6a07 	vmul.f32	s13, s6, s14
 80014c6:	ed95 8a07 	vldr	s16, [r5, #28]
 80014ca:	edd4 8a01 	vldr	s17, [r4, #4]
 80014ce:	ed95 9a05 	vldr	s18, [r5, #20]
 80014d2:	eee7 6a80 	vfma.f32	s13, s15, s0
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	ee63 2a02 	vmul.f32	s5, s6, s4
 80014dc:	ee23 3a08 	vmul.f32	s6, s6, s16
 80014e0:	eee7 2aa5 	vfma.f32	s5, s15, s11
 80014e4:	eea7 3aa4 	vfma.f32	s6, s15, s9
 80014e8:	ee62 3a05 	vmul.f32	s7, s4, s10
 80014ec:	ee65 7a07 	vmul.f32	s15, s10, s14
 80014f0:	ee25 5a08 	vmul.f32	s10, s10, s16
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80014f4:	eee4 6a09 	vfma.f32	s13, s8, s18
 80014f8:	eea8 5aa4 	vfma.f32	s10, s17, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80014fc:	ee22 2a06 	vmul.f32	s4, s4, s12
 8001500:	ee26 7a07 	vmul.f32	s14, s12, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001504:	eee4 2a01 	vfma.f32	s5, s8, s2
  CoeffReturnType coeff(Index row, Index col) const
 8001508:	eee5 3aa8 	vfma.f32	s7, s11, s17
 800150c:	eea5 2aa1 	vfma.f32	s4, s11, s3
 8001510:	eee8 7a80 	vfma.f32	s15, s17, s0
    return m_data[col * colStride() + row * rowStride()];
 8001514:	edd2 5a03 	vldr	s11, [r2, #12]
 8001518:	edd4 8a08 	vldr	s17, [r4, #32]
 800151c:	eea1 7a80 	vfma.f32	s14, s3, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001520:	ee26 6a08 	vmul.f32	s12, s12, s16
 8001524:	ed95 0a08 	vldr	s0, [r5, #32]
 8001528:	ed92 8a06 	vldr	s16, [r2, #24]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800152c:	eea0 5a80 	vfma.f32	s10, s1, s0
 8001530:	eea1 6aa4 	vfma.f32	s12, s3, s9
 8001534:	edd2 1a00 	vldr	s3, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001538:	ee66 4aa5 	vmul.f32	s9, s13, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800153c:	eea4 3a00 	vfma.f32	s6, s8, s0
 8001540:	eee2 4aa1 	vfma.f32	s9, s5, s3
 8001544:	eea8 7a89 	vfma.f32	s14, s17, s18
 8001548:	eeb0 4a45 	vmov.f32	s8, s10
 800154c:	eee0 7a89 	vfma.f32	s15, s1, s18
 8001550:	eea8 6a80 	vfma.f32	s12, s17, s0
 8001554:	ed93 5a00 	vldr	s10, [r3]
 8001558:	ed92 9a01 	vldr	s18, [r2, #4]
 800155c:	ed92 0a02 	vldr	s0, [r2, #8]
 8001560:	eee1 3a20 	vfma.f32	s7, s2, s1
 8001564:	eea1 2a28 	vfma.f32	s4, s2, s17
 8001568:	ee34 5a85 	vadd.f32	s10, s9, s10
 800156c:	ed92 1a07 	vldr	s2, [r2, #28]
 8001570:	eef0 4a46 	vmov.f32	s9, s12
 8001574:	eea3 5a08 	vfma.f32	s10, s6, s16
 8001578:	ed92 6a04 	vldr	s12, [r2, #16]
 800157c:	edd2 8a05 	vldr	s17, [r2, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001580:	ee67 0aa5 	vmul.f32	s1, s15, s11
 8001584:	ee67 5a25 	vmul.f32	s11, s14, s11
 8001588:	eee3 0aa1 	vfma.f32	s1, s7, s3
 800158c:	eee2 5a21 	vfma.f32	s11, s4, s3
 8001590:	ee67 1a06 	vmul.f32	s3, s14, s12
 8001594:	ee27 7a28 	vmul.f32	s14, s14, s17
 8001598:	eee2 1a09 	vfma.f32	s3, s4, s18
 800159c:	eea2 7a00 	vfma.f32	s14, s4, s0
 80015a0:	ed92 2a08 	vldr	s4, [r2, #32]
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80015a4:	ed80 5a00 	vstr	s10, [r0]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015a8:	ed93 5a01 	vldr	s10, [r3, #4]
 80015ac:	ee30 5a85 	vadd.f32	s10, s1, s10
 80015b0:	eea4 5a08 	vfma.f32	s10, s8, s16
 80015b4:	ed80 5a01 	vstr	s10, [r0, #4]
 80015b8:	ed93 5a02 	vldr	s10, [r3, #8]
 80015bc:	ee75 5a85 	vadd.f32	s11, s11, s10
 80015c0:	eee4 5a88 	vfma.f32	s11, s9, s16
 80015c4:	edc0 5a02 	vstr	s11, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015c8:	ee66 5a86 	vmul.f32	s11, s13, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015cc:	ed93 5a03 	vldr	s10, [r3, #12]
 80015d0:	eee2 5a89 	vfma.f32	s11, s5, s18
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015d4:	ee27 6a86 	vmul.f32	s12, s15, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015d8:	ee75 5a85 	vadd.f32	s11, s11, s10
 80015dc:	eea3 6a89 	vfma.f32	s12, s7, s18
 80015e0:	eee3 5a01 	vfma.f32	s11, s6, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015e4:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80015e8:	edc0 5a03 	vstr	s11, [r0, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015ec:	edd3 5a04 	vldr	s11, [r3, #16]
 80015f0:	ee36 6a25 	vadd.f32	s12, s12, s11
 80015f4:	eee2 6a80 	vfma.f32	s13, s5, s0
 80015f8:	eea4 6a01 	vfma.f32	s12, s8, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015fc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001600:	ed80 6a04 	vstr	s12, [r0, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001604:	ed93 6a05 	vldr	s12, [r3, #20]
 8001608:	ee31 6a86 	vadd.f32	s12, s3, s12
 800160c:	eee3 7a80 	vfma.f32	s15, s7, s0
 8001610:	eea4 6a81 	vfma.f32	s12, s9, s2
 8001614:	ed80 6a05 	vstr	s12, [r0, #20]
 8001618:	ed93 6a06 	vldr	s12, [r3, #24]
 800161c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001620:	eee3 6a02 	vfma.f32	s13, s6, s4
 8001624:	edc0 6a06 	vstr	s13, [r0, #24]
 8001628:	edd3 6a07 	vldr	s13, [r3, #28]
 800162c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001630:	eee4 7a02 	vfma.f32	s15, s8, s4
 8001634:	edc0 7a07 	vstr	s15, [r0, #28]
 8001638:	edd3 7a08 	vldr	s15, [r3, #32]
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	eea4 7a82 	vfma.f32	s14, s9, s4
 8001644:	ed80 7a08 	vstr	s14, [r0, #32]

  typedef generic_dense_assignment_kernel<DstEvaluatorType,SrcEvaluatorType,Functor> Kernel;
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());

  dense_assignment_loop<Kernel>::run(kernel);
}
 8001648:	b010      	add	sp, #64	; 0x40
 800164a:	ecbd 8b04 	vpop	{d8-d9}
 800164e:	bc30      	pop	{r4, r5}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <_Z12Kalmanfilterv>:
void Kalmanfilter(){
 8001654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{return _micros + htim11.Instance->CNT;}
 8001658:	4ecf      	ldr	r6, [pc, #828]	; (8001998 <_Z12Kalmanfilterv+0x344>)
	 if(micros() - TimeStampKalman >= 10000){
 800165a:	4dd0      	ldr	r5, [pc, #832]	; (800199c <_Z12Kalmanfilterv+0x348>)
{return _micros + htim11.Instance->CNT;}
 800165c:	6837      	ldr	r7, [r6, #0]
 800165e:	4cd0      	ldr	r4, [pc, #832]	; (80019a0 <_Z12Kalmanfilterv+0x34c>)
	 if(micros() - TimeStampKalman >= 10000){
 8001660:	6828      	ldr	r0, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	6821      	ldr	r1, [r4, #0]
 8001666:	6862      	ldr	r2, [r4, #4]
	 if(micros() - TimeStampKalman >= 10000){
 8001668:	1a1b      	subs	r3, r3, r0
 800166a:	eb60 0000 	sbc.w	r0, r0, r0
 800166e:	185b      	adds	r3, r3, r1
 8001670:	eb42 0200 	adc.w	r2, r2, r0
void Kalmanfilter(){
 8001674:	ed2d 8b0a 	vpush	{d8-d12}
	 if(micros() - TimeStampKalman >= 10000){
 8001678:	f242 7010 	movw	r0, #10000	; 0x2710
 800167c:	4283      	cmp	r3, r0
 800167e:	f172 0300 	sbcs.w	r3, r2, #0
void Kalmanfilter(){
 8001682:	b086      	sub	sp, #24
	 if(micros() - TimeStampKalman >= 10000){
 8001684:	d204      	bcs.n	8001690 <_Z12Kalmanfilterv+0x3c>
}
 8001686:	b006      	add	sp, #24
 8001688:	ecbd 8b0a 	vpop	{d8-d12}
 800168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{return _micros + htim11.Instance->CNT;}
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001692:	4ac4      	ldr	r2, [pc, #784]	; (80019a4 <_Z12Kalmanfilterv+0x350>)
 8001694:	f8df 9348 	ldr.w	r9, [pc, #840]	; 80019e0 <_Z12Kalmanfilterv+0x38c>
 8001698:	ed92 6a00 	vldr	s12, [r2]
 800169c:	edd2 6a01 	vldr	s13, [r2, #4]
 80016a0:	ed92 7a02 	vldr	s14, [r2, #8]
 80016a4:	4ac0      	ldr	r2, [pc, #768]	; (80019a8 <_Z12Kalmanfilterv+0x354>)
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
#endif

    call_dense_assignment_loop(dst, src, func);
 80016a6:	4fc1      	ldr	r7, [pc, #772]	; (80019ac <_Z12Kalmanfilterv+0x358>)
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80016a8:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80019e4 <_Z12Kalmanfilterv+0x390>
 80016ac:	f8df a338 	ldr.w	sl, [pc, #824]	; 80019e8 <_Z12Kalmanfilterv+0x394>
 80016b0:	185b      	adds	r3, r3, r1
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80016b2:	49bf      	ldr	r1, [pc, #764]	; (80019b0 <_Z12Kalmanfilterv+0x35c>)
		 TimeStampKalman = micros();
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	edd1 7a00 	vldr	s15, [r1]
 80016ba:	4bbe      	ldr	r3, [pc, #760]	; (80019b4 <_Z12Kalmanfilterv+0x360>)
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	ee27 5a86 	vmul.f32	s10, s15, s12
 80016c2:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	ee25 3a26 	vmul.f32	s6, s10, s13
 80016ce:	ee26 4a05 	vmul.f32	s8, s12, s10
 80016d2:	ee66 4a25 	vmul.f32	s9, s12, s11
 80016d6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80016da:	ee25 5a07 	vmul.f32	s10, s10, s14
 80016de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e2:	ee65 5a87 	vmul.f32	s11, s11, s14
 80016e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016ee:	edc2 3a04 	vstr	s7, [r2, #16]
 80016f2:	edd9 7a01 	vldr	s15, [r9, #4]
 80016f6:	edd3 3a05 	vldr	s7, [r3, #20]
 80016fa:	edc2 6a05 	vstr	s13, [r2, #20]
 80016fe:	ed82 7a08 	vstr	s14, [r2, #32]
 8001702:	edd3 6a03 	vldr	s13, [r3, #12]
 8001706:	ed93 7a04 	vldr	s14, [r3, #16]
 800170a:	ed82 4a00 	vstr	s8, [r2]
 800170e:	ed82 6a02 	vstr	s12, [r2, #8]
 8001712:	ed99 4a00 	vldr	s8, [r9]
 8001716:	ed93 6a02 	vldr	s12, [r3, #8]
 800171a:	ed82 5a06 	vstr	s10, [r2, #24]
 800171e:	edc2 5a07 	vstr	s11, [r2, #28]
 8001722:	ed93 5a00 	vldr	s10, [r3]
 8001726:	edd3 5a01 	vldr	s11, [r3, #4]
 800172a:	edc2 4a01 	vstr	s9, [r2, #4]
 800172e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001736:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800173a:	eee5 6a04 	vfma.f32	s13, s10, s8
 800173e:	a901      	add	r1, sp, #4
 8001740:	4638      	mov	r0, r7
 8001742:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001746:	eee4 7a06 	vfma.f32	s15, s8, s12
 800174a:	edd9 4a02 	vldr	s9, [r9, #8]
 800174e:	ed93 5a06 	vldr	s10, [r3, #24]
 8001752:	edd3 5a07 	vldr	s11, [r3, #28]
 8001756:	ed93 6a08 	vldr	s12, [r3, #32]
 800175a:	ed82 3a03 	vstr	s6, [r2, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800175e:	eee5 6a24 	vfma.f32	s13, s10, s9
 8001762:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8001766:	eee4 7a86 	vfma.f32	s15, s9, s12
 800176a:	edca 6a00 	vstr	s13, [sl]
 800176e:	ed8a 7a01 	vstr	s14, [sl, #4]
 8001772:	edca 7a02 	vstr	s15, [sl, #8]
 8001776:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800177a:	9204      	str	r2, [sp, #16]
 800177c:	466a      	mov	r2, sp
 800177e:	f7ff fe7f 	bl	8001480 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
 8001782:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <_Z12Kalmanfilterv+0x364>)
 8001784:	edd7 1a04 	vldr	s3, [r7, #16]
 8001788:	ed93 1a01 	vldr	s2, [r3, #4]
 800178c:	edd3 3a00 	vldr	s7, [r3]
 8001790:	edd7 2a03 	vldr	s5, [r7, #12]
 8001794:	ed97 7a01 	vldr	s14, [r7, #4]
 8001798:	edd7 8a00 	vldr	s17, [r7]
 800179c:	ed93 2a02 	vldr	s4, [r3, #8]
 80017a0:	ed97 4a05 	vldr	s8, [r7, #20]
 80017a4:	ed97 8a02 	vldr	s16, [r7, #8]
 80017a8:	ed97 3a06 	vldr	s6, [r7, #24]
 80017ac:	edd7 4a08 	vldr	s9, [r7, #32]
 80017b0:	ed97 5a07 	vldr	s10, [r7, #28]
 80017b4:	4b81      	ldr	r3, [pc, #516]	; (80019bc <_Z12Kalmanfilterv+0x368>)
 80017b6:	ed9a 9a02 	vldr	s18, [sl, #8]
 80017ba:	edd3 0a00 	vldr	s1, [r3]
 80017be:	edda 9a01 	vldr	s19, [sl, #4]
    m_xpr.coeffRef(0,0) = s;
 80017c2:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <_Z12Kalmanfilterv+0x36c>)
 80017c4:	ed9a aa00 	vldr	s20, [sl]
 80017c8:	4a7e      	ldr	r2, [pc, #504]	; (80019c4 <_Z12Kalmanfilterv+0x370>)
		 KalP = X(0,0);
 80017ca:	497f      	ldr	r1, [pc, #508]	; (80019c8 <_Z12Kalmanfilterv+0x374>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80017cc:	ee21 6a21 	vmul.f32	s12, s2, s3
 80017d0:	ee61 7a07 	vmul.f32	s15, s2, s14
 80017d4:	eef0 6a46 	vmov.f32	s13, s12
 80017d8:	eee3 6aa2 	vfma.f32	s13, s7, s5
 80017dc:	eee8 7aa3 	vfma.f32	s15, s17, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80017e0:	eee2 6a04 	vfma.f32	s13, s4, s8
 80017e4:	eee2 7a08 	vfma.f32	s15, s4, s16
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80017e8:	ee61 6a26 	vmul.f32	s13, s2, s13
  EIGEN_DEVICE_FUNC
  static inline void run(const MatrixType& matrix, ResultType& result)
  {
    typedef typename MatrixType::Scalar Scalar;
    internal::evaluator<MatrixType> matrixEval(matrix);
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 80017ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80017f0:	eee3 6aa7 	vfma.f32	s13, s7, s15
 80017f4:	ee63 7a83 	vmul.f32	s15, s7, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80017f8:	ee76 6aa0 	vadd.f32	s13, s13, s1
 80017fc:	eee2 7a24 	vfma.f32	s15, s4, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001800:	ee22 ca81 	vmul.f32	s24, s5, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001804:	eee1 7a05 	vfma.f32	s15, s2, s10
 8001808:	eea3 6a87 	vfma.f32	s12, s7, s14
 800180c:	eee2 6a27 	vfma.f32	s13, s4, s15
 8001810:	eea8 caa3 	vfma.f32	s24, s17, s7
 8001814:	eec5 0aa6 	vdiv.f32	s1, s11, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001818:	ee61 5a04 	vmul.f32	s11, s2, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800181c:	eea2 6a05 	vfma.f32	s12, s4, s10
 8001820:	eee3 5a88 	vfma.f32	s11, s7, s16
 8001824:	eea3 ca02 	vfma.f32	s24, s6, s4
 8001828:	eee2 5a24 	vfma.f32	s11, s4, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800182c:	ee69 6a02 	vmul.f32	s13, s18, s4
 8001830:	ee60 7a86 	vmul.f32	s15, s1, s12
 8001834:	eee9 6a81 	vfma.f32	s13, s19, s2
 8001838:	ee20 ca8c 	vmul.f32	s24, s1, s24
 800183c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8001840:	edd3 0a00 	vldr	s1, [r3]
 8001844:	ed82 ca00 	vstr	s24, [r2]
    dst.coeffRef(0,0) += (lhs.transpose().cwiseProduct(rhs)).sum();
  }

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 8001848:	ee70 6ae6 	vsub.f32	s13, s1, s13
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800184c:	eeb0 6a4a 	vmov.f32	s12, s20
 8001850:	eeea 6a63 	vfms.f32	s13, s20, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001854:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <_Z12Kalmanfilterv+0x378>)
 8001856:	edc2 5a02 	vstr	s11, [r2, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800185a:	eeac 6a26 	vfma.f32	s12, s24, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 800185e:	edc2 7a01 	vstr	s15, [r2, #4]
 8001862:	ed89 6a00 	vstr	s12, [r9]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001866:	eeb0 6a69 	vmov.f32	s12, s19
 800186a:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <_Z12Kalmanfilterv+0x37c>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001870:	edd3 ba05 	vldr	s23, [r3, #20]
 8001874:	ed89 6a01 	vstr	s12, [r9, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001878:	eeb0 6a49 	vmov.f32	s12, s18
 800187c:	eea5 6aa6 	vfma.f32	s12, s11, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001880:	ed93 ba01 	vldr	s22, [r3, #4]
 8001884:	edd3 6a03 	vldr	s13, [r3, #12]
 8001888:	ed89 6a02 	vstr	s12, [r9, #8]
 800188c:	edc2 0a00 	vstr	s1, [r2]
 8001890:	ed93 6a04 	vldr	s12, [r3, #16]
 8001894:	edd3 0a07 	vldr	s1, [r3, #28]
 8001898:	edd3 aa02 	vldr	s21, [r3, #8]
 800189c:	ed93 0a06 	vldr	s0, [r3, #24]
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80018a0:	eee1 ba65 	vfms.f32	s23, s2, s11
 80018a4:	eea3 bae7 	vfms.f32	s22, s7, s15
 80018a8:	eee1 6a4c 	vfms.f32	s13, s2, s24
 80018ac:	eea1 6a67 	vfms.f32	s12, s2, s15
 80018b0:	eee2 0a67 	vfms.f32	s1, s4, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80018b4:	ed93 1a08 	vldr	s2, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80018b8:	edd3 7a00 	vldr	s15, [r3]
{return _micros + htim11.Instance->CNT;}
 80018bc:	6833      	ldr	r3, [r6, #0]
		 runtime = micros()-TimeStampKalman;
 80018be:	682a      	ldr	r2, [r5, #0]
{return _micros + htim11.Instance->CNT;}
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		 KalP = X(0,0);
 80018c2:	ed81 aa00 	vstr	s20, [r1]
 80018c6:	eee3 7acc 	vfms.f32	s15, s7, s24
		 runtime = micros()-TimeStampKalman;
 80018ca:	1a9a      	subs	r2, r3, r2
 80018cc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80018d0:	eee3 aae5 	vfms.f32	s21, s7, s11
 80018d4:	eb61 0101 	sbc.w	r1, r1, r1
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	eea2 1a65 	vfms.f32	s2, s4, s11
 80018de:	eb41 0000 	adc.w	r0, r1, r0
 80018e2:	493c      	ldr	r1, [pc, #240]	; (80019d4 <_Z12Kalmanfilterv+0x380>)
		 KalV = X(1,0);
 80018e4:	4c3c      	ldr	r4, [pc, #240]	; (80019d8 <_Z12Kalmanfilterv+0x384>)
		 runtime = micros()-TimeStampKalman;
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	ee67 5a26 	vmul.f32	s11, s14, s13
 80018ec:	eea2 0a4c 	vfms.f32	s0, s4, s24
		 KalA = X(2,0);
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <_Z12Kalmanfilterv+0x388>)
		 runtime = micros()-TimeStampKalman;
 80018f2:	6048      	str	r0, [r1, #4]
 80018f4:	eee8 5aa7 	vfma.f32	s11, s17, s15
 80018f8:	ee61 3aa6 	vmul.f32	s7, s3, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80018fc:	eee8 5a00 	vfma.f32	s11, s16, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001900:	ee65 6a26 	vmul.f32	s13, s10, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001904:	edc8 5a00 	vstr	s11, [r8]
 8001908:	ee67 5a06 	vmul.f32	s11, s14, s12
 800190c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8001910:	eee8 5a8b 	vfma.f32	s11, s17, s22
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001914:	eea8 7aaa 	vfma.f32	s14, s17, s21
 8001918:	eee8 5a20 	vfma.f32	s11, s16, s1
 800191c:	eea8 7a01 	vfma.f32	s14, s16, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001920:	eee2 3aa7 	vfma.f32	s7, s5, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001924:	eee3 6a27 	vfma.f32	s13, s6, s15
 8001928:	edc8 5a01 	vstr	s11, [r8, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800192c:	ee65 7a2b 	vmul.f32	s15, s10, s23
 8001930:	ee65 5a06 	vmul.f32	s11, s10, s12
 8001934:	ed88 7a02 	vstr	s14, [r8, #8]
 8001938:	ee21 6a86 	vmul.f32	s12, s3, s12
 800193c:	ee21 7aab 	vmul.f32	s14, s3, s23
 8001940:	eea2 6a8b 	vfma.f32	s12, s5, s22
 8001944:	eea2 7aaa 	vfma.f32	s14, s5, s21
 8001948:	eee3 5a0b 	vfma.f32	s11, s6, s22
 800194c:	eee3 7a2a 	vfma.f32	s15, s6, s21
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001950:	eeb0 5a63 	vmov.f32	s10, s7
 8001954:	eea4 5a00 	vfma.f32	s10, s8, s0
 8001958:	eea4 6a20 	vfma.f32	s12, s8, s1
 800195c:	eea4 7a01 	vfma.f32	s14, s8, s2
 8001960:	eee4 6a80 	vfma.f32	s13, s9, s0
 8001964:	eee4 5aa0 	vfma.f32	s11, s9, s1
 8001968:	eee4 7a81 	vfma.f32	s15, s9, s2
		 KalV = X(1,0);
 800196c:	edc4 9a00 	vstr	s19, [r4]
		 KalA = X(2,0);
 8001970:	ed83 9a00 	vstr	s18, [r3]
 8001974:	ed88 5a03 	vstr	s10, [r8, #12]
 8001978:	ed88 6a04 	vstr	s12, [r8, #16]
 800197c:	ed88 7a05 	vstr	s14, [r8, #20]
 8001980:	edc8 6a06 	vstr	s13, [r8, #24]
 8001984:	edc8 5a07 	vstr	s11, [r8, #28]
 8001988:	edc8 7a08 	vstr	s15, [r8, #32]
}
 800198c:	b006      	add	sp, #24
 800198e:	ecbd 8b0a 	vpop	{d8-d12}
 8001992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001996:	bf00      	nop
 8001998:	20000374 	.word	0x20000374
 800199c:	2000022c 	.word	0x2000022c
 80019a0:	20000268 	.word	0x20000268
 80019a4:	2000012c 	.word	0x2000012c
 80019a8:	200001f0 	.word	0x200001f0
 80019ac:	200001b4 	.word	0x200001b4
 80019b0:	20000010 	.word	0x20000010
 80019b4:	200000bc 	.word	0x200000bc
 80019b8:	200000f4 	.word	0x200000f4
 80019bc:	20000214 	.word	0x20000214
 80019c0:	200001ac 	.word	0x200001ac
 80019c4:	20000164 	.word	0x20000164
 80019c8:	2000017c 	.word	0x2000017c
 80019cc:	2000013c 	.word	0x2000013c
 80019d0:	20000260 	.word	0x20000260
 80019d4:	20000498 	.word	0x20000498
 80019d8:	20000180 	.word	0x20000180
 80019dc:	20000178 	.word	0x20000178
 80019e0:	20000254 	.word	0x20000254
 80019e4:	20000184 	.word	0x20000184
 80019e8:	20000248 	.word	0x20000248

080019ec <_Z13GrandStatumixv>:
void GrandStatumix(){
 80019ec:	b530      	push	{r4, r5, lr}
	if (grandState != Ready){
 80019ee:	4c51      	ldr	r4, [pc, #324]	; (8001b34 <_Z13GrandStatumixv+0x148>)
 80019f0:	7823      	ldrb	r3, [r4, #0]
void GrandStatumix(){
 80019f2:	b085      	sub	sp, #20
	if (grandState != Ready){
 80019f4:	b9d3      	cbnz	r3, 8001a2c <_Z13GrandStatumixv+0x40>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80019f6:	4850      	ldr	r0, [pc, #320]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fe:	f001 fac1 	bl	8002f84 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001a02:	484d      	ldr	r0, [pc, #308]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001a04:	4d4d      	ldr	r5, [pc, #308]	; (8001b3c <_Z13GrandStatumixv+0x150>)
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0c:	f001 faba 	bl	8002f84 <HAL_GPIO_WritePin>
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001a10:	484b      	ldr	r0, [pc, #300]	; (8001b40 <_Z13GrandStatumixv+0x154>)
 8001a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a16:	f001 faaf 	bl	8002f78 <HAL_GPIO_ReadPin>
	switch(grandState){
 8001a1a:	7823      	ldrb	r3, [r4, #0]
	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001a1c:	7028      	strb	r0, [r5, #0]
	switch(grandState){
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d864      	bhi.n	8001aee <_Z13GrandStatumixv+0x102>
 8001a24:	e8df f003 	tbb	[pc, r3]
 8001a28:	0c1d4b35 	.word	0x0c1d4b35
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8001a2c:	4842      	ldr	r0, [pc, #264]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a34:	f001 faa6 	bl	8002f84 <HAL_GPIO_WritePin>
	if (grandState != work){
 8001a38:	7823      	ldrb	r3, [r4, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d0e1      	beq.n	8001a02 <_Z13GrandStatumixv+0x16>
 8001a3e:	e7da      	b.n	80019f6 <_Z13GrandStatumixv+0xa>
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001a40:	483d      	ldr	r0, [pc, #244]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a48:	f001 fa9c 	bl	8002f84 <HAL_GPIO_WritePin>
			if (stop_sense == 1){
 8001a4c:	782b      	ldrb	r3, [r5, #0]
			PWMOut = 0;
 8001a4e:	483d      	ldr	r0, [pc, #244]	; (8001b44 <_Z13GrandStatumixv+0x158>)
			Integral = 0;
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <_Z13GrandStatumixv+0x15c>)
 8001a52:	2100      	movs	r1, #0
			PWMOut = 0;
 8001a54:	2500      	movs	r5, #0
			if (stop_sense == 1){
 8001a56:	2b01      	cmp	r3, #1
			PWMOut = 0;
 8001a58:	8005      	strh	r5, [r0, #0]
			Integral = 0;
 8001a5a:	6011      	str	r1, [r2, #0]
			if (stop_sense == 1){
 8001a5c:	d05f      	beq.n	8001b1e <_Z13GrandStatumixv+0x132>
}
 8001a5e:	b005      	add	sp, #20
 8001a60:	bd30      	pop	{r4, r5, pc}
		if (pwr_sense == 0){
 8001a62:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <_Z13GrandStatumixv+0x160>)
		PWMOut = 0;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <_Z13GrandStatumixv+0x158>)
		if (pwr_sense == 0){
 8001a66:	7815      	ldrb	r5, [r2, #0]
		PWMOut = 0;
 8001a68:	2200      	movs	r2, #0
 8001a6a:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 0){
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d1f6      	bne.n	8001a5e <_Z13GrandStatumixv+0x72>
			HAL_Delay(100);
 8001a70:	2064      	movs	r0, #100	; 0x64
			grandState = Ready;
 8001a72:	7025      	strb	r5, [r4, #0]
			HAL_Delay(100);
 8001a74:	f000 ff26 	bl	80028c4 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <_Z13GrandStatumixv+0x164>)
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	2216      	movs	r2, #22
 8001a80:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001a84:	2301      	movs	r3, #1
 8001a86:	462a      	mov	r2, r5
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	4832      	ldr	r0, [pc, #200]	; (8001b54 <_Z13GrandStatumixv+0x168>)
 8001a8c:	f001 fd9c 	bl	80035c8 <HAL_I2C_Mem_Write>
}
 8001a90:	e7e5      	b.n	8001a5e <_Z13GrandStatumixv+0x72>
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8001a92:	4829      	ldr	r0, [pc, #164]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9a:	f001 fa73 	bl	8002f84 <HAL_GPIO_WritePin>
		if (pwr_sense == 1){
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <_Z13GrandStatumixv+0x160>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d03f      	beq.n	8001b26 <_Z13GrandStatumixv+0x13a>
		if (stop_sense == 0){
 8001aa6:	782b      	ldrb	r3, [r5, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1d8      	bne.n	8001a5e <_Z13GrandStatumixv+0x72>
			PWMOut = 0;
 8001aac:	4825      	ldr	r0, [pc, #148]	; (8001b44 <_Z13GrandStatumixv+0x158>)
			u_contr = 0;}
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <_Z13GrandStatumixv+0x16c>)
			PWMOut = 0;
 8001ab0:	8003      	strh	r3, [r0, #0]
			u_contr = 0;}
 8001ab2:	2100      	movs	r1, #0
			grandState = stopnd;
 8001ab4:	2504      	movs	r5, #4
 8001ab6:	7025      	strb	r5, [r4, #0]
			u_contr = 0;}
 8001ab8:	6011      	str	r1, [r2, #0]
}
 8001aba:	b005      	add	sp, #20
 8001abc:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001abe:	481e      	ldr	r0, [pc, #120]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac6:	f001 fa5d 	bl	8002f84 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8001aca:	481e      	ldr	r0, [pc, #120]	; (8001b44 <_Z13GrandStatumixv+0x158>)
		if (stop_sense == 1){
 8001acc:	7829      	ldrb	r1, [r5, #0]
		PWMOut = 0;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	8002      	strh	r2, [r0, #0]
		X(1,0)=0;
 8001ad2:	4822      	ldr	r0, [pc, #136]	; (8001b5c <_Z13GrandStatumixv+0x170>)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6043      	str	r3, [r0, #4]
	    KalV = X(1,0);
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <_Z13GrandStatumixv+0x174>)
		if (stop_sense == 1){
 8001ada:	2901      	cmp	r1, #1
	    KalV = X(1,0);
 8001adc:	6003      	str	r3, [r0, #0]
		if (stop_sense == 1){
 8001ade:	d1be      	bne.n	8001a5e <_Z13GrandStatumixv+0x72>
			mot_dirctn%=2;
 8001ae0:	4920      	ldr	r1, [pc, #128]	; (8001b64 <_Z13GrandStatumixv+0x178>)
			grandState = Ready;
 8001ae2:	7022      	strb	r2, [r4, #0]
			mot_dirctn%=2;
 8001ae4:	780b      	ldrb	r3, [r1, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	700b      	strb	r3, [r1, #0]
 8001aec:	e7b7      	b.n	8001a5e <_Z13GrandStatumixv+0x72>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8001aee:	4812      	ldr	r0, [pc, #72]	; (8001b38 <_Z13GrandStatumixv+0x14c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	f001 fa45 	bl	8002f84 <HAL_GPIO_WritePin>
		Unwrapping();
 8001afa:	f7ff fa2d 	bl	8000f58 <_Z10Unwrappingv>
		Kalmanfilter();
 8001afe:	f7ff fda9 	bl	8001654 <_Z12Kalmanfilterv>
		if (pwr_sense == 1){grandState = emer;}
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <_Z13GrandStatumixv+0x160>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	bf04      	itt	eq
 8001b0a:	2303      	moveq	r3, #3
 8001b0c:	7023      	strbeq	r3, [r4, #0]
		if (stop_sense == 0){grandState = stop;}
 8001b0e:	782b      	ldrb	r3, [r5, #0]
 8001b10:	b90b      	cbnz	r3, 8001b16 <_Z13GrandStatumixv+0x12a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	7023      	strb	r3, [r4, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <_Z13GrandStatumixv+0x17c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d09f      	beq.n	8001a5e <_Z13GrandStatumixv+0x72>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	7023      	strb	r3, [r4, #0]
}
 8001b22:	b005      	add	sp, #20
 8001b24:	bd30      	pop	{r4, r5, pc}
			u_contr = 0;}
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <_Z13GrandStatumixv+0x16c>)
 8001b28:	2200      	movs	r2, #0
			grandState = emer;
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	7021      	strb	r1, [r4, #0]
			u_contr = 0;}
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e7b9      	b.n	8001aa6 <_Z13GrandStatumixv+0xba>
 8001b32:	bf00      	nop
 8001b34:	20000264 	.word	0x20000264
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	200004a0 	.word	0x200004a0
 8001b40:	40020800 	.word	0x40020800
 8001b44:	200001dc 	.word	0x200001dc
 8001b48:	20000160 	.word	0x20000160
 8001b4c:	20000491 	.word	0x20000491
 8001b50:	20000014 	.word	0x20000014
 8001b54:	20000320 	.word	0x20000320
 8001b58:	200004b4 	.word	0x200004b4
 8001b5c:	20000248 	.word	0x20000248
 8001b60:	20000180 	.word	0x20000180
 8001b64:	20000490 	.word	0x20000490
 8001b68:	20000270 	.word	0x20000270
 8001b6c:	00000000 	.word	0x00000000

08001b70 <main>:
{
 8001b70:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001b74:	4bab      	ldr	r3, [pc, #684]	; (8001e24 <main+0x2b4>)
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001b76:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8001e58 <main+0x2e8>
 8001b7a:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8001e5c <main+0x2ec>
    m_xpr.coeffRef(0,0) = s;
 8001b7e:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8001e60 <main+0x2f0>
{
 8001b82:	b09b      	sub	sp, #108	; 0x6c
 8001b84:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001b88:	2601      	movs	r6, #1
    m_xpr.coeffRef(0,0) = s;
 8001b8a:	601f      	str	r7, [r3, #0]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001b8c:	2500      	movs	r5, #0
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001b8e:	a906      	add	r1, sp, #24
 8001b90:	a812      	add	r0, sp, #72	; 0x48
 8001b92:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
 8001b96:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8001b9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8001b9e:	f7ff fbb9 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ba2:	a907      	add	r1, sp, #28
	     0 ,    1    ,      Dt    ,
 8001ba4:	2400      	movs	r4, #0
	A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001ba6:	f8cd a01c 	str.w	sl, [sp, #28]
 8001baa:	f7ff fbb3 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 ,    1    ,      Dt    ,
 8001bae:	a908      	add	r1, sp, #32
 8001bb0:	9408      	str	r4, [sp, #32]
 8001bb2:	f7ff fbaf 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bb6:	a909      	add	r1, sp, #36	; 0x24
 8001bb8:	9709      	str	r7, [sp, #36]	; 0x24
 8001bba:	f7ff fbab 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bbe:	a90a      	add	r1, sp, #40	; 0x28
 8001bc0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001bc4:	f7ff fba6 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 ,    0    ,      1     ;
 8001bc8:	a90b      	add	r1, sp, #44	; 0x2c
 8001bca:	940b      	str	r4, [sp, #44]	; 0x2c
 8001bcc:	f7ff fba2 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bd0:	a90c      	add	r1, sp, #48	; 0x30
 8001bd2:	940c      	str	r4, [sp, #48]	; 0x30
 8001bd4:	f7ff fb9e 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bd8:	a90e      	add	r1, sp, #56	; 0x38
 8001bda:	970e      	str	r7, [sp, #56]	; 0x38
 8001bdc:	f7ff fb9a 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001be0:	a812      	add	r0, sp, #72	; 0x48
 8001be2:	f7ff f8a3 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001be6:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <main+0x2b8>)
 8001be8:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001bea:	601c      	str	r4, [r3, #0]
	X << 0 ,    0    ,      0     ;
 8001bec:	a90c      	add	r1, sp, #48	; 0x30
 8001bee:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001bf0:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001bf4:	9615      	str	r6, [sp, #84]	; 0x54
 8001bf6:	940c      	str	r4, [sp, #48]	; 0x30
 8001bf8:	f7ff fbca 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001bfc:	a90e      	add	r1, sp, #56	; 0x38
 8001bfe:	940e      	str	r4, [sp, #56]	; 0x38
 8001c00:	f7ff fbc6 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001c04:	a812      	add	r0, sp, #72	; 0x48
 8001c06:	f7ff f87b 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <main+0x2bc>)
 8001c0c:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001c0e:	601c      	str	r4, [r3, #0]
	X1 << 0 ,    0    ,      0     ;
 8001c10:	a90c      	add	r1, sp, #48	; 0x30
 8001c12:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c14:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001c18:	9615      	str	r6, [sp, #84]	; 0x54
 8001c1a:	940c      	str	r4, [sp, #48]	; 0x30
 8001c1c:	f7ff fbb8 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c20:	a90e      	add	r1, sp, #56	; 0x38
 8001c22:	940e      	str	r4, [sp, #56]	; 0x38
 8001c24:	f7ff fbb4 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001c28:	a812      	add	r0, sp, #72	; 0x48
 8001c2a:	f7ff f869 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c2e:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <main+0x2c0>)
 8001c30:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001c32:	f8c3 9000 	str.w	r9, [r3]
	P << 0.000001 , 			0 	 , 			0     ,
 8001c36:	a906      	add	r1, sp, #24
 8001c38:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c3a:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001c3e:	9615      	str	r6, [sp, #84]	; 0x54
 8001c40:	9406      	str	r4, [sp, #24]
 8001c42:	f7ff fb67 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c46:	a907      	add	r1, sp, #28
 8001c48:	9407      	str	r4, [sp, #28]
 8001c4a:	f7ff fb63 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 		 ,    0.000001    ,  		0     ,
 8001c4e:	a908      	add	r1, sp, #32
 8001c50:	9408      	str	r4, [sp, #32]
 8001c52:	f7ff fb5f 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c56:	a909      	add	r1, sp, #36	; 0x24
 8001c58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001c5c:	f7ff fb5a 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c60:	a90a      	add	r1, sp, #40	; 0x28
 8001c62:	940a      	str	r4, [sp, #40]	; 0x28
 8001c64:	f7ff fb56 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 		 ,    		0    ,      0.000001     ;
 8001c68:	a90b      	add	r1, sp, #44	; 0x2c
 8001c6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c6c:	f7ff fb52 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c70:	a90c      	add	r1, sp, #48	; 0x30
 8001c72:	940c      	str	r4, [sp, #48]	; 0x30
 8001c74:	f7ff fb4e 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c78:	a90e      	add	r1, sp, #56	; 0x38
 8001c7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8001c7e:	f7ff fb49 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001c82:	a812      	add	r0, sp, #72	; 0x48
 8001c84:	f7ff f852 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <main+0x2c4>)
 8001c8a:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001c8c:	601c      	str	r4, [r3, #0]
	O << 0 , 	0 	 , 		0     ,
 8001c8e:	a906      	add	r1, sp, #24
 8001c90:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001c92:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001c96:	9615      	str	r6, [sp, #84]	; 0x54
 8001c98:	9406      	str	r4, [sp, #24]
 8001c9a:	f7ff fb3b 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c9e:	a907      	add	r1, sp, #28
 8001ca0:	9407      	str	r4, [sp, #28]
 8001ca2:	f7ff fb37 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
	     0 ,    0    ,  	0     ,
 8001ca6:	a908      	add	r1, sp, #32
 8001ca8:	9408      	str	r4, [sp, #32]
 8001caa:	f7ff fb33 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cae:	a909      	add	r1, sp, #36	; 0x24
 8001cb0:	9409      	str	r4, [sp, #36]	; 0x24
 8001cb2:	f7ff fb2f 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cb6:	a90a      	add	r1, sp, #40	; 0x28
 8001cb8:	940a      	str	r4, [sp, #40]	; 0x28
 8001cba:	f7ff fb2b 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 ,    0    ,      0     ;
 8001cbe:	a90b      	add	r1, sp, #44	; 0x2c
 8001cc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8001cc2:	f7ff fb27 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc6:	a90c      	add	r1, sp, #48	; 0x30
 8001cc8:	940c      	str	r4, [sp, #48]	; 0x30
 8001cca:	f7ff fb23 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cce:	a90e      	add	r1, sp, #56	; 0x38
 8001cd0:	940e      	str	r4, [sp, #56]	; 0x38
 8001cd2:	f7ff fb1f 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001cd6:	a812      	add	r0, sp, #72	; 0x48
 8001cd8:	f7ff f828 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001cdc:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <main+0x2c8>)
 8001cde:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001ce0:	601f      	str	r7, [r3, #0]
	I << 1 , 0 , 0 ,
 8001ce2:	a906      	add	r1, sp, #24
 8001ce4:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001ce6:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001cea:	9615      	str	r6, [sp, #84]	; 0x54
 8001cec:	9406      	str	r4, [sp, #24]
 8001cee:	f7ff fb11 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cf2:	a907      	add	r1, sp, #28
 8001cf4:	9407      	str	r4, [sp, #28]
 8001cf6:	f7ff fb0d 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 , 1 , 0 ,
 8001cfa:	a908      	add	r1, sp, #32
 8001cfc:	9408      	str	r4, [sp, #32]
 8001cfe:	f7ff fb09 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	a909      	add	r1, sp, #36	; 0x24
 8001d04:	9709      	str	r7, [sp, #36]	; 0x24
 8001d06:	f7ff fb05 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d0a:	a90a      	add	r1, sp, #40	; 0x28
 8001d0c:	940a      	str	r4, [sp, #40]	; 0x28
 8001d0e:	f7ff fb01 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		 0 , 0 , 1 ;
 8001d12:	a90b      	add	r1, sp, #44	; 0x2c
 8001d14:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d16:	f7ff fafd 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d1a:	a90c      	add	r1, sp, #48	; 0x30
 8001d1c:	940c      	str	r4, [sp, #48]	; 0x30
 8001d1e:	f7ff faf9 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d22:	a90e      	add	r1, sp, #56	; 0x38
 8001d24:	970e      	str	r7, [sp, #56]	; 0x38
 8001d26:	f7ff faf5 	bl	8001314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
    finished();
 8001d2a:	a812      	add	r0, sp, #72	; 0x48
 8001d2c:	f7fe fffe 	bl	8000d2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <main+0x2cc>)
 8001d32:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001d34:	601c      	str	r4, [r3, #0]
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <main+0x2d0>)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d38:	9615      	str	r6, [sp, #84]	; 0x54
    m_xpr.coeffRef(0,0) = s;
 8001d3a:	601f      	str	r7, [r3, #0]
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <main+0x2d4>)
	B << 0 , 0 , 0 ;
 8001d3e:	940c      	str	r4, [sp, #48]	; 0x30
 8001d40:	601c      	str	r4, [r3, #0]
 8001d42:	a90c      	add	r1, sp, #48	; 0x30
 8001d44:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d46:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001d4a:	f7ff fb21 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001d4e:	a90e      	add	r1, sp, #56	; 0x38
 8001d50:	940e      	str	r4, [sp, #56]	; 0x38
 8001d52:	f7ff fb1d 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001d56:	a812      	add	r0, sp, #72	; 0x48
 8001d58:	f7fe ffd2 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <main+0x2d8>)
 8001d5e:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001d60:	601f      	str	r7, [r3, #0]
	C << 1 , 0 , 0 ;
 8001d62:	a90c      	add	r1, sp, #48	; 0x30
 8001d64:	a812      	add	r0, sp, #72	; 0x48
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d66:	e9cd 5613 	strd	r5, r6, [sp, #76]	; 0x4c
 8001d6a:	9615      	str	r6, [sp, #84]	; 0x54
 8001d6c:	940c      	str	r4, [sp, #48]	; 0x30
 8001d6e:	f7ff fb4b 	bl	8001408 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001d72:	a90e      	add	r1, sp, #56	; 0x38
 8001d74:	940e      	str	r4, [sp, #56]	; 0x38
 8001d76:	f7ff fb47 	bl	8001408 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8001d7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001d7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d7e:	4413      	add	r3, r2
 8001d80:	42b3      	cmp	r3, r6
 8001d82:	f040 81ab 	bne.w	80020dc <main+0x56c>
 8001d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001d88:	2a03      	cmp	r2, #3
 8001d8a:	f040 81a7 	bne.w	80020dc <main+0x56c>
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001d8e:	e9cd 5313 	strd	r5, r3, [sp, #76]	; 0x4c
 8001d92:	9315      	str	r3, [sp, #84]	; 0x54
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <main+0x2dc>)
 8001d96:	9312      	str	r3, [sp, #72]	; 0x48
    m_xpr.coeffRef(0,0) = s;
 8001d98:	f8c3 a000 	str.w	sl, [r3]
	G << (Dt*Dt)/2 , Dt , 1 ;
 8001d9c:	a90c      	add	r1, sp, #48	; 0x30
 8001d9e:	a812      	add	r0, sp, #72	; 0x48
 8001da0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8001da4:	f7ff faf4 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001da8:	a90e      	add	r1, sp, #56	; 0x38
 8001daa:	970e      	str	r7, [sp, #56]	; 0x38
 8001dac:	f7ff faf0 	bl	8001390 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
    finished();
 8001db0:	a812      	add	r0, sp, #72	; 0x48
 8001db2:	f7fe ffa5 	bl	8000d00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.isra.0>
  HAL_Init();
 8001db6:	f000 fd59 	bl	800286c <HAL_Init>
  SystemClock_Config();
 8001dba:	f7fe ffcd 	bl	8000d58 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 8001dc2:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4c22      	ldr	r4, [pc, #136]	; (8001e50 <main+0x2e0>)
 8001dc8:	9507      	str	r5, [sp, #28]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	9516      	str	r5, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dce:	4821      	ldr	r0, [pc, #132]	; (8001e54 <main+0x2e4>)
  huart2.Init.BaudRate = 115200;
 8001dd0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001e64 <main+0x2f4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	9307      	str	r3, [sp, #28]
 8001de2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de4:	9508      	str	r5, [sp, #32]
 8001de6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6323      	str	r3, [r4, #48]	; 0x30
 8001dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	9308      	str	r3, [sp, #32]
 8001df6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	9509      	str	r5, [sp, #36]	; 0x24
 8001dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6323      	str	r3, [r4, #48]	; 0x30
 8001e02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	9309      	str	r3, [sp, #36]	; 0x24
 8001e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	950a      	str	r5, [sp, #40]	; 0x28
 8001e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6323      	str	r3, [r4, #48]	; 0x30
 8001e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e20:	e022      	b.n	8001e68 <main+0x2f8>
 8001e22:	bf00      	nop
 8001e24:	200000bc 	.word	0x200000bc
 8001e28:	20000248 	.word	0x20000248
 8001e2c:	20000254 	.word	0x20000254
 8001e30:	200001b4 	.word	0x200001b4
 8001e34:	20000184 	.word	0x20000184
 8001e38:	2000013c 	.word	0x2000013c
 8001e3c:	200000e4 	.word	0x200000e4
 8001e40:	20000214 	.word	0x20000214
 8001e44:	20000108 	.word	0x20000108
 8001e48:	200000f4 	.word	0x200000f4
 8001e4c:	2000012c 	.word	0x2000012c
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	3c23d70a 	.word	0x3c23d70a
 8001e5c:	3851b717 	.word	0x3851b717
 8001e60:	358637bd 	.word	0x358637bd
 8001e64:	40004400 	.word	0x40004400
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e68:	950b      	str	r5, [sp, #44]	; 0x2c
 8001e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6323      	str	r3, [r4, #48]	; 0x30
 8001e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e74:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e78:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e7c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e80:	f001 f880 	bl	8002f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001e84:	462a      	mov	r2, r5
 8001e86:	48b8      	ldr	r0, [pc, #736]	; (8002168 <main+0x5f8>)
 8001e88:	f24e 0104 	movw	r1, #57348	; 0xe004
 8001e8c:	f001 f87a 	bl	8002f84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_Stop_Pin;
 8001e90:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001e94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	48b4      	ldr	r0, [pc, #720]	; (800216c <main+0x5fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_Stop_Pin;
 8001e9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ea2:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea4:	f000 ff76 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ea8:	2700      	movs	r7, #0
 8001eaa:	2220      	movs	r2, #32
 8001eac:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eae:	48b0      	ldr	r0, [pc, #704]	; (8002170 <main+0x600>)
 8001eb0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eb2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001eb6:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f000 ff6b 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	2300      	movs	r3, #0
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	48a9      	ldr	r0, [pc, #676]	; (8002168 <main+0x5f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001ec8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f000 ff62 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8001ed0:	f24e 0204 	movw	r2, #57348	; 0xe004
 8001ed4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	48a4      	ldr	r0, [pc, #656]	; (8002168 <main+0x5f8>)
 8001ed8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8001eda:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001ede:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f000 ff57 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXTI10_Emer_Pin;
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8001eee:	489f      	ldr	r0, [pc, #636]	; (800216c <main+0x5fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = EXTI10_Emer_Pin;
 8001ef4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f000 ff4c 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8001efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f00:	2300      	movs	r3, #0
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8001f02:	489a      	ldr	r0, [pc, #616]	; (800216c <main+0x5fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8001f06:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8001f08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f000 ff42 	bl	8002d94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8001f10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f14:	2204      	movs	r2, #4
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8001f16:	4897      	ldr	r0, [pc, #604]	; (8002174 <main+0x604>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8001f1c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f000 ff38 	bl	8002d94 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f24:	462a      	mov	r2, r5
 8001f26:	4629      	mov	r1, r5
 8001f28:	2008      	movs	r0, #8
 8001f2a:	f000 fcef 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f2e:	2008      	movs	r0, #8
 8001f30:	f000 fd2a 	bl	8002988 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f34:	462a      	mov	r2, r5
 8001f36:	4629      	mov	r1, r5
 8001f38:	2028      	movs	r0, #40	; 0x28
 8001f3a:	f000 fce7 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f3e:	2028      	movs	r0, #40	; 0x28
 8001f40:	f000 fd22 	bl	8002988 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001f44:	488c      	ldr	r0, [pc, #560]	; (8002178 <main+0x608>)
  huart2.Init.BaudRate = 115200;
 8001f46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f4a:	e9c0 8300 	strd	r8, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f4e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f50:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f58:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f5a:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5c:	f003 ff42 	bl	8005de4 <HAL_UART_Init>
 8001f60:	4605      	mov	r5, r0
 8001f62:	bb30      	cbnz	r0, 8001fb2 <main+0x442>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f64:	9006      	str	r0, [sp, #24]
 8001f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f6c:	6323      	str	r3, [r4, #48]	; 0x30
 8001f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8001f70:	4c82      	ldr	r4, [pc, #520]	; (800217c <main+0x60c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f76:	4602      	mov	r2, r0
 8001f78:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7a:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f7c:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7e:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f80:	f000 fcc4 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f84:	2010      	movs	r0, #16
 8001f86:	f000 fcff 	bl	8002988 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 400000;
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <main+0x610>)
 8001f8c:	f8df e220 	ldr.w	lr, [pc, #544]	; 80021b0 <main+0x640>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f90:	4620      	mov	r0, r4
  hi2c1.Init.ClockSpeed = 400000;
 8001f92:	e9c4 e300 	strd	lr, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001f9a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9e:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa2:	e9c4 5507 	strd	r5, r5, [r4, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa6:	6123      	str	r3, [r4, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa8:	f001 fa46 	bl	8003438 <HAL_I2C_Init>
 8001fac:	b118      	cbz	r0, 8001fb6 <main+0x446>
 8001fae:	b672      	cpsid	i
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <main+0x440>
 8001fb2:	b672      	cpsid	i
 8001fb4:	e7fe      	b.n	8001fb4 <main+0x444>
  htim11.Instance = TIM11;
 8001fb6:	4d73      	ldr	r5, [pc, #460]	; (8002184 <main+0x614>)
  htim11.Init.Prescaler = 99;
 8001fb8:	4b73      	ldr	r3, [pc, #460]	; (8002188 <main+0x618>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	60a8      	str	r0, [r5, #8]
  htim11.Init.Prescaler = 99;
 8001fbc:	f04f 0963 	mov.w	r9, #99	; 0x63
 8001fc0:	e9c5 3900 	strd	r3, r9, [r5]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	6128      	str	r0, [r5, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	61a8      	str	r0, [r5, #24]
  htim11.Init.Period = 65535;
 8001fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fcc:	4628      	mov	r0, r5
  htim11.Init.Period = 65535;
 8001fce:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fd0:	f002 ff92 	bl	8004ef8 <HAL_TIM_Base_Init>
 8001fd4:	b9f8      	cbnz	r0, 8002016 <main+0x4a6>
  htim2.Instance = TIM2;
 8001fd6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80021a0 <main+0x630>
 8001fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fde:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8001fe2:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe6:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fea:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8001fee:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	e9c8 9001 	strd	r9, r0, [r8, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	f8c8 0010 	str.w	r0, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	f8c8 0018 	str.w	r0, [r8, #24]
  htim2.Instance = TIM2;
 8001ffe:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002002:	4640      	mov	r0, r8
  htim2.Init.Period = 4294967295;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	f8c8 300c 	str.w	r3, [r8, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800200c:	f002 ff74 	bl	8004ef8 <HAL_TIM_Base_Init>
 8002010:	b118      	cbz	r0, 800201a <main+0x4aa>
 8002012:	b672      	cpsid	i
  while (1)
 8002014:	e7fe      	b.n	8002014 <main+0x4a4>
 8002016:	b672      	cpsid	i
 8002018:	e7fe      	b.n	8002018 <main+0x4a8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800201e:	a912      	add	r1, sp, #72	; 0x48
 8002020:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002022:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002024:	f003 fc82 	bl	800592c <HAL_TIM_ConfigClockSource>
 8002028:	b108      	cbz	r0, 800202e <main+0x4be>
 800202a:	b672      	cpsid	i
  while (1)
 800202c:	e7fe      	b.n	800202c <main+0x4bc>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800202e:	4640      	mov	r0, r8
 8002030:	f003 f928 	bl	8005284 <HAL_TIM_IC_Init>
 8002034:	b108      	cbz	r0, 800203a <main+0x4ca>
 8002036:	b672      	cpsid	i
  while (1)
 8002038:	e7fe      	b.n	8002038 <main+0x4c8>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203a:	a90c      	add	r1, sp, #48	; 0x30
 800203c:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002042:	f003 fe93 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4602      	mov	r2, r0
 8002048:	b108      	cbz	r0, 800204e <main+0x4de>
 800204a:	b672      	cpsid	i
  while (1)
 800204c:	e7fe      	b.n	800204c <main+0x4dc>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800204e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002052:	4640      	mov	r0, r8
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002054:	2600      	movs	r6, #0
 8002056:	2701      	movs	r7, #1
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	a90e      	add	r1, sp, #56	; 0x38
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800205a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	f003 fa89 	bl	8005574 <HAL_TIM_IC_ConfigChannel>
 8002062:	b108      	cbz	r0, 8002068 <main+0x4f8>
 8002064:	b672      	cpsid	i
  while (1)
 8002066:	e7fe      	b.n	8002066 <main+0x4f6>
  htim4.Instance = TIM4;
 8002068:	4e48      	ldr	r6, [pc, #288]	; (800218c <main+0x61c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	2300      	movs	r3, #0
 800206c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8002070:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800207c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8002080:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	e9c6 3301 	strd	r3, r3, [r6, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002088:	9318      	str	r3, [sp, #96]	; 0x60
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	6133      	str	r3, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	61b3      	str	r3, [r6, #24]
  htim4.Instance = TIM4;
 800208e:	4b40      	ldr	r3, [pc, #256]	; (8002190 <main+0x620>)
 8002090:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002092:	4630      	mov	r0, r6
  htim4.Init.Period = 9999;
 8002094:	f242 730f 	movw	r3, #9999	; 0x270f
 8002098:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800209a:	f002 ff2d 	bl	8004ef8 <HAL_TIM_Base_Init>
 800209e:	b108      	cbz	r0, 80020a4 <main+0x534>
 80020a0:	b672      	cpsid	i
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <main+0x532>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020a8:	a90e      	add	r1, sp, #56	; 0x38
 80020aa:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020ae:	f003 fc3d 	bl	800592c <HAL_TIM_ConfigClockSource>
 80020b2:	b108      	cbz	r0, 80020b8 <main+0x548>
 80020b4:	b672      	cpsid	i
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <main+0x546>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020b8:	4630      	mov	r0, r6
 80020ba:	f003 f801 	bl	80050c0 <HAL_TIM_PWM_Init>
 80020be:	b108      	cbz	r0, 80020c4 <main+0x554>
 80020c0:	b672      	cpsid	i
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <main+0x552>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2200      	movs	r2, #0
 80020c6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c8:	a90c      	add	r1, sp, #48	; 0x30
 80020ca:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020d0:	f003 fe4c 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4602      	mov	r2, r0
 80020d6:	b138      	cbz	r0, 80020e8 <main+0x578>
 80020d8:	b672      	cpsid	i
  while (1)
 80020da:	e7fe      	b.n	80020da <main+0x56a>
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <main+0x624>)
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <main+0x628>)
 80020e0:	482e      	ldr	r0, [pc, #184]	; (800219c <main+0x62c>)
 80020e2:	217a      	movs	r1, #122	; 0x7a
 80020e4:	f003 ff18 	bl	8005f18 <__assert_func>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ea:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	a912      	add	r1, sp, #72	; 0x48
 80020ee:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f0:	f04f 0860 	mov.w	r8, #96	; 0x60
 80020f4:	f04f 0900 	mov.w	r9, #0
 80020f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fc:	f003 fb10 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>
 8002100:	4607      	mov	r7, r0
 8002102:	b108      	cbz	r0, 8002108 <main+0x598>
 8002104:	b672      	cpsid	i
  while (1)
 8002106:	e7fe      	b.n	8002106 <main+0x596>
  HAL_TIM_MspPostInit(&htim4);
 8002108:	4630      	mov	r0, r6
 800210a:	f000 fa51 	bl	80025b0 <HAL_TIM_MspPostInit>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 800210e:	481d      	ldr	r0, [pc, #116]	; (8002184 <main+0x614>)
 8002110:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80021b4 <main+0x644>
 8002114:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80021b8 <main+0x648>
 8002118:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80021bc <main+0x64c>
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800211c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002168 <main+0x5f8>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8002120:	f002 ff98 	bl	8005054 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8002124:	481e      	ldr	r0, [pc, #120]	; (80021a0 <main+0x630>)
 8002126:	f002 ff65 	bl	8004ff4 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <main+0x634>)
 800212c:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0x630>)
 800212e:	2310      	movs	r3, #16
 8002130:	4639      	mov	r1, r7
 8002132:	f003 f925 	bl	8005380 <HAL_TIM_IC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 8002136:	4630      	mov	r0, r6
 8002138:	f002 ff5c 	bl	8004ff4 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800213c:	4639      	mov	r1, r7
 800213e:	4630      	mov	r0, r6
 8002140:	f003 f83c 	bl	80051bc <HAL_TIM_PWM_Start>
    HAL_Delay(100);
 8002144:	2064      	movs	r0, #100	; 0x64
 8002146:	f000 fbbd 	bl	80028c4 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 800214a:	2316      	movs	r3, #22
 800214c:	2164      	movs	r1, #100	; 0x64
 800214e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <main+0x638>)
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	463a      	mov	r2, r7
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <main+0x60c>)
 800215a:	4f14      	ldr	r7, [pc, #80]	; (80021ac <main+0x63c>)
 800215c:	2301      	movs	r3, #1
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	f001 fa32 	bl	80035c8 <HAL_I2C_Mem_Write>
}
 8002164:	e06c      	b.n	8002240 <main+0x6d0>
 8002166:	bf00      	nop
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020c00 	.word	0x40020c00
 8002178:	2000044c 	.word	0x2000044c
 800217c:	20000320 	.word	0x20000320
 8002180:	00061a80 	.word	0x00061a80
 8002184:	20000374 	.word	0x20000374
 8002188:	40014800 	.word	0x40014800
 800218c:	20000404 	.word	0x20000404
 8002190:	40000800 	.word	0x40000800
 8002194:	08006f78 	.word	0x08006f78
 8002198:	0800743c 	.word	0x0800743c
 800219c:	08007080 	.word	0x08007080
 80021a0:	200003bc 	.word	0x200003bc
 80021a4:	20000274 	.word	0x20000274
 80021a8:	20000014 	.word	0x20000014
 80021ac:	20000268 	.word	0x20000268
 80021b0:	40005400 	.word	0x40005400
 80021b4:	20000228 	.word	0x20000228
 80021b8:	200002b8 	.word	0x200002b8
 80021bc:	20000128 	.word	0x20000128
	  	  if (micros()-timeStampSR > 10000)      // don't use 1 millisec
 80021c0:	4b73      	ldr	r3, [pc, #460]	; (8002390 <main+0x820>)
{return _micros + htim11.Instance->CNT;}
 80021c2:	6828      	ldr	r0, [r5, #0]
	  	  if (micros()-timeStampSR > 10000)      // don't use 1 millisec
 80021c4:	681a      	ldr	r2, [r3, #0]
{return _micros + htim11.Instance->CNT;}
 80021c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	  if (micros()-timeStampSR > 10000)      // don't use 1 millisec
 80021c8:	1a9b      	subs	r3, r3, r2
{return _micros + htim11.Instance->CNT;}
 80021ca:	e9d7 2100 	ldrd	r2, r1, [r7]
	  	  if (micros()-timeStampSR > 10000)      // don't use 1 millisec
 80021ce:	eb6c 0c0c 	sbc.w	ip, ip, ip
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	eb41 010c 	adc.w	r1, r1, ip
 80021d8:	f242 7c11 	movw	ip, #10001	; 0x2711
 80021dc:	4563      	cmp	r3, ip
 80021de:	f171 0300 	sbcs.w	r3, r1, #0
 80021e2:	f080 808d 	bcs.w	8002300 <main+0x790>
	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <main+0x824>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b123      	cbz	r3, 80021f6 <main+0x686>
 80021ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	f000 8093 	beq.w	800231c <main+0x7ac>
	  	 if(micros() - timestampPWM >= 500){
 80021f6:	4b68      	ldr	r3, [pc, #416]	; (8002398 <main+0x828>)
{return _micros + htim11.Instance->CNT;}
 80021f8:	6828      	ldr	r0, [r5, #0]
	  	 if(micros() - timestampPWM >= 500){
 80021fa:	681a      	ldr	r2, [r3, #0]
{return _micros + htim11.Instance->CNT;}
 80021fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	 if(micros() - timestampPWM >= 500){
 80021fe:	1a9b      	subs	r3, r3, r2
{return _micros + htim11.Instance->CNT;}
 8002200:	e9d7 2100 	ldrd	r2, r1, [r7]
	  	 if(micros() - timestampPWM >= 500){
 8002204:	eb6c 0c0c 	sbc.w	ip, ip, ip
 8002208:	189b      	adds	r3, r3, r2
 800220a:	eb41 010c 	adc.w	r1, r1, ip
 800220e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002212:	f171 0100 	sbcs.w	r1, r1, #0
 8002216:	d30f      	bcc.n	8002238 <main+0x6c8>
{return _micros + htim11.Instance->CNT;}
 8002218:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 800221a:	4960      	ldr	r1, [pc, #384]	; (800239c <main+0x82c>)
{return _micros + htim11.Instance->CNT;}
 800221c:	189b      	adds	r3, r3, r2
	  		  	  timestampPWM = micros(); // stamp
 800221e:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <main+0x828>)
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 8002220:	8809      	ldrh	r1, [r1, #0]
	  		  	  timestampPWM = micros(); // stamp
 8002222:	6013      	str	r3, [r2, #0]
	  	  		if (mot_dirctn == 0){
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <main+0x830>)
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 8002226:	6832      	ldr	r2, [r6, #0]
	  	  		if (mot_dirctn == 0){
 8002228:	781b      	ldrb	r3, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 800222a:	6351      	str	r1, [r2, #52]	; 0x34
	  	  		if (mot_dirctn == 0){
 800222c:	bb03      	cbnz	r3, 8002270 <main+0x700>
						HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2104      	movs	r1, #4
 8002232:	4640      	mov	r0, r8
 8002234:	f000 fea6 	bl	8002f84 <HAL_GPIO_WritePin>
	  	 if (grandState ==  work){
 8002238:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <main+0x834>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d01d      	beq.n	800227c <main+0x70c>
{return _micros + htim11.Instance->CNT;}
 8002240:	6828      	ldr	r0, [r5, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002242:	f8d9 2000 	ldr.w	r2, [r9]
{return _micros + htim11.Instance->CNT;}
 8002246:	6a43      	ldr	r3, [r0, #36]	; 0x24
	  	  if(micros() - TimeStampGrand >= 1000){
 8002248:	1a9b      	subs	r3, r3, r2
{return _micros + htim11.Instance->CNT;}
 800224a:	e9d7 2100 	ldrd	r2, r1, [r7]
	  	  if(micros() - TimeStampGrand >= 1000){
 800224e:	eb6c 0c0c 	sbc.w	ip, ip, ip
 8002252:	189b      	adds	r3, r3, r2
 8002254:	eb41 010c 	adc.w	r1, r1, ip
 8002258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800225c:	f171 0300 	sbcs.w	r3, r1, #0
 8002260:	d3ae      	bcc.n	80021c0 <main+0x650>
{return _micros + htim11.Instance->CNT;}
 8002262:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002264:	189b      	adds	r3, r3, r2
	  		TimeStampGrand = micros();
 8002266:	f8c9 3000 	str.w	r3, [r9]
	  		GrandStatumix();
 800226a:	f7ff fbbf 	bl	80019ec <_Z13GrandStatumixv>
 800226e:	e7a7      	b.n	80021c0 <main+0x650>
						HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	2104      	movs	r1, #4
 8002274:	4640      	mov	r0, r8
 8002276:	f000 fe85 	bl	8002f84 <HAL_GPIO_WritePin>
 800227a:	e7dd      	b.n	8002238 <main+0x6c8>
	  		 Unwrapping();
 800227c:	9305      	str	r3, [sp, #20]
 800227e:	f7fe fe6b 	bl	8000f58 <_Z10Unwrappingv>
	  		 if(flagNewpos==0){
 8002282:	f8da 2000 	ldr.w	r2, [sl]
 8002286:	b952      	cbnz	r2, 800229e <main+0x72e>
	  		    flagNewpos = 1;
 8002288:	9b05      	ldr	r3, [sp, #20]
	  		    Distance = Finalposition-Currentpos;
 800228a:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <main+0x838>)
	  		    flagNewpos = 1;
 800228c:	f8ca 3000 	str.w	r3, [sl]
	  		    Finalposition = 1022*0.006136;
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <main+0x83c>)
	  		    Distance = Finalposition-Currentpos;
 8002292:	6013      	str	r3, [r2, #0]
	  			Currentpos = 0*0.006136;
 8002294:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <main+0x840>)
	  		    Finalposition = 1022*0.006136;
 8002296:	f8cb 3000 	str.w	r3, [fp]
	  			Currentpos = 0*0.006136;
 800229a:	2300      	movs	r3, #0
 800229c:	6013      	str	r3, [r2, #0]
	  		Trajectory();
 800229e:	f7fe fdb7 	bl	8000e10 <_Z10Trajectoryv>
	  		Kalmanfilter();
 80022a2:	f7ff f9d7 	bl	8001654 <_Z12Kalmanfilterv>
	if(abs(Finalposition-KalP) < 0.005 && KalV < 0.0005){
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <main+0x844>)
 80022a8:	eddb 7a00 	vldr	s15, [fp]
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b4:	eef0 7ae7 	vabs.f32	s15, s15
 80022b8:	ee17 0a90 	vmov	r0, s15
 80022bc:	f7fe fa6e 	bl	800079c <__aeabi_f2d>
 80022c0:	a32f      	add	r3, pc, #188	; (adr r3, 8002380 <main+0x810>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe fb21 	bl	800090c <__aeabi_dcmplt>
 80022ca:	b148      	cbz	r0, 80022e0 <main+0x770>
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <main+0x848>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f7fe fa64 	bl	800079c <__aeabi_f2d>
 80022d4:	a32c      	add	r3, pc, #176	; (adr r3, 8002388 <main+0x818>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe fb17 	bl	800090c <__aeabi_dcmplt>
 80022de:	b930      	cbnz	r0, 80022ee <main+0x77e>
		PIDPosition();
 80022e0:	f7fe febe 	bl	8001060 <_Z11PIDPositionv>
		PIDVelocity();
 80022e4:	f7fe ff2a 	bl	800113c <_Z11PIDVelocityv>
		MotDrvCytron();
 80022e8:	f7fe ff8a 	bl	8001200 <_Z12MotDrvCytronv>
 80022ec:	e7a8      	b.n	8002240 <main+0x6d0>
		PWMOut=0;
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <main+0x82c>)
 80022f0:	2300      	movs	r3, #0
 80022f2:	8013      	strh	r3, [r2, #0]
		MotDrvCytron();
 80022f4:	f7fe ff84 	bl	8001200 <_Z12MotDrvCytronv>
		ch=8;
 80022f8:	4a30      	ldr	r2, [pc, #192]	; (80023bc <main+0x84c>)
 80022fa:	2308      	movs	r3, #8
 80022fc:	7013      	strb	r3, [r2, #0]
}
 80022fe:	e79f      	b.n	8002240 <main+0x6d0>
{return _micros + htim11.Instance->CNT;}
 8002300:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002302:	189b      	adds	r3, r3, r2
	  	              timeStampSR = micros();           //set new time stamp
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <main+0x820>)
 8002306:	6013      	str	r3, [r2, #0]
	  	              flag_absenc = 1;
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <main+0x824>)
 800230a:	2301      	movs	r3, #1
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800230c:	2102      	movs	r1, #2
 800230e:	4640      	mov	r0, r8
	  	              flag_absenc = 1;
 8002310:	7013      	strb	r3, [r2, #0]
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002312:	f000 fe31 	bl	8002f78 <HAL_GPIO_ReadPin>
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <main+0x850>)
 8002318:	7018      	strb	r0, [r3, #0]
 800231a:	e764      	b.n	80021e6 <main+0x676>
		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT, RawRAB, 2, 100);
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <main+0x854>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2264      	movs	r2, #100	; 0x64
 8002322:	2302      	movs	r3, #2
 8002324:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002328:	2140      	movs	r1, #64	; 0x40
 800232a:	2301      	movs	r3, #1
 800232c:	2212      	movs	r2, #18
 800232e:	4826      	ldr	r0, [pc, #152]	; (80023c8 <main+0x858>)
 8002330:	f001 fa3e 	bl	80037b0 <HAL_I2C_Mem_Read>
		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <main+0x854>)
 8002336:	8819      	ldrh	r1, [r3, #0]
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <main+0x85c>)
    binaryout = (grayx >> (numbit-1))&0x01;
 800233a:	2208      	movs	r2, #8
		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 800233c:	8019      	strh	r1, [r3, #0]
    binaryout = (grayx >> (numbit-1))&0x01;
 800233e:	f3c1 2340 	ubfx	r3, r1, #9, #1
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8002342:	fa41 f002 	asr.w	r0, r1, r2
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8002346:	f003 0c01 	and.w	ip, r3, #1
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 800234a:	f000 0001 	and.w	r0, r0, #1
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800234e:	005b      	lsls	r3, r3, #1
        if (cp1 == cp2)
 8002350:	4560      	cmp	r0, ip
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8002352:	bf18      	it	ne
 8002354:	3301      	addne	r3, #1
    for (int i = 1; i < numbit ;i++){
 8002356:	3a01      	subs	r2, #1
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8002358:	b29b      	uxth	r3, r3
    for (int i = 1; i < numbit ;i++){
 800235a:	d2f2      	bcs.n	8002342 <main+0x7d2>
		BinPosXI =1023- (GraytoBinario(GrayCBitXI, 10) + POSOFFSET);  //
 800235c:	f5c3 63f0 	rsb	r3, r3, #1920	; 0x780
 8002360:	3303      	adds	r3, #3
 8002362:	b29b      	uxth	r3, r3
		if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <main+0x860>)
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	bf28      	it	cs
 800236c:	f3c3 0309 	ubfxcs	r3, r3, #0, #10
 8002370:	8013      	strh	r3, [r2, #0]
		flag_absenc = 0;
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <main+0x824>)
 8002374:	2300      	movs	r3, #0
 8002376:	7013      	strb	r3, [r2, #0]
}
 8002378:	e73d      	b.n	80021f6 <main+0x686>
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w
 8002380:	47ae147b 	.word	0x47ae147b
 8002384:	3f747ae1 	.word	0x3f747ae1
 8002388:	d2f1a9fc 	.word	0xd2f1a9fc
 800238c:	3f40624d 	.word	0x3f40624d
 8002390:	200004ac 	.word	0x200004ac
 8002394:	200002bc 	.word	0x200002bc
 8002398:	200004b0 	.word	0x200004b0
 800239c:	200001dc 	.word	0x200001dc
 80023a0:	20000490 	.word	0x20000490
 80023a4:	20000264 	.word	0x20000264
 80023a8:	20000110 	.word	0x20000110
 80023ac:	40c8abf7 	.word	0x40c8abf7
 80023b0:	20000104 	.word	0x20000104
 80023b4:	2000017c 	.word	0x2000017c
 80023b8:	20000180 	.word	0x20000180
 80023bc:	200002b4 	.word	0x200002b4
 80023c0:	20000491 	.word	0x20000491
 80023c4:	20000218 	.word	0x20000218
 80023c8:	20000320 	.word	0x20000320
 80023cc:	20000138 	.word	0x20000138
 80023d0:	200000f0 	.word	0x200000f0

080023d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_MspInit+0x38>)
 80023d8:	2100      	movs	r1, #0
 80023da:	9100      	str	r1, [sp, #0]
 80023dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
 80023e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	9101      	str	r1, [sp, #4]
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002402:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002404:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	f000 ba6f 	b.w	80028e8 <HAL_NVIC_SetPriorityGrouping>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002410:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_I2C_MspInit+0x84>)
 8002414:	6802      	ldr	r2, [r0, #0]
{
 8002416:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800241a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002420:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002424:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8002426:	d001      	beq.n	800242c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002428:	b009      	add	sp, #36	; 0x24
 800242a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242c:	4d1a      	ldr	r5, [pc, #104]	; (8002498 <HAL_I2C_MspInit+0x88>)
 800242e:	9400      	str	r4, [sp, #0]
 8002430:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	481a      	ldr	r0, [pc, #104]	; (800249c <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	632b      	str	r3, [r5, #48]	; 0x30
 800243a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002442:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002446:	2312      	movs	r3, #18
 8002448:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002452:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002454:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002456:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f000 fc9c 	bl	8002d94 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800245c:	9401      	str	r4, [sp, #4]
 800245e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002464:	642b      	str	r3, [r5, #64]	; 0x40
 8002466:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800246c:	4622      	mov	r2, r4
 800246e:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002470:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002472:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002474:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002476:	f000 fa49 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800247a:	201f      	movs	r0, #31
 800247c:	f000 fa84 	bl	8002988 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002480:	4622      	mov	r2, r4
 8002482:	4621      	mov	r1, r4
 8002484:	2020      	movs	r0, #32
 8002486:	f000 fa41 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800248a:	2020      	movs	r0, #32
 800248c:	f000 fa7c 	bl	8002988 <HAL_NVIC_EnableIRQ>
}
 8002490:	b009      	add	sp, #36	; 0x24
 8002492:	bd30      	pop	{r4, r5, pc}
 8002494:	40005400 	.word	0x40005400
 8002498:	40023800 	.word	0x40023800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 80024a2:	6803      	ldr	r3, [r0, #0]
{
 80024a4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024b0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024b4:	9408      	str	r4, [sp, #32]
  if(htim_base->Instance==TIM2)
 80024b6:	d029      	beq.n	800250c <HAL_TIM_Base_MspInit+0x6c>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80024b8:	4a36      	ldr	r2, [pc, #216]	; (8002594 <HAL_TIM_Base_MspInit+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80024be:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_TIM_Base_MspInit+0xf8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80024c4:	b00a      	add	sp, #40	; 0x28
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_TIM_Base_MspInit+0xfc>)
 80024ca:	9402      	str	r4, [sp, #8]
 80024cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ce:	f042 0204 	orr.w	r2, r2, #4
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	9b02      	ldr	r3, [sp, #8]
}
 80024de:	b00a      	add	sp, #40	; 0x28
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_TIM_Base_MspInit+0xfc>)
 80024e4:	9403      	str	r4, [sp, #12]
 80024e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80024f4:	4622      	mov	r2, r4
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024f6:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80024f8:	4621      	mov	r1, r4
 80024fa:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024fc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80024fe:	f000 fa05 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002502:	201a      	movs	r0, #26
 8002504:	f000 fa40 	bl	8002988 <HAL_NVIC_EnableIRQ>
}
 8002508:	b00a      	add	sp, #40	; 0x28
 800250a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800250c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002510:	9400      	str	r4, [sp, #0]
 8002512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002514:	4e22      	ldr	r6, [pc, #136]	; (80025a0 <HAL_TIM_Base_MspInit+0x100>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
 800251c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251e:	f002 0201 	and.w	r2, r2, #1
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	9401      	str	r4, [sp, #4]
 8002528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8002538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800253c:	2302      	movs	r3, #2
 800253e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002542:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002544:	2301      	movs	r3, #1
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8002546:	4817      	ldr	r0, [pc, #92]	; (80025a4 <HAL_TIM_Base_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002548:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 800254a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 800254e:	f000 fc21 	bl	8002d94 <HAL_GPIO_Init>
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_TIM_Base_MspInit+0x108>)
 8002554:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002558:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002564:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002568:	4630      	mov	r0, r6
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800256a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002576:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800257a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800257e:	f000 fa2b 	bl	80029d8 <HAL_DMA_Init>
 8002582:	b918      	cbnz	r0, 800258c <HAL_TIM_Base_MspInit+0xec>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002584:	626e      	str	r6, [r5, #36]	; 0x24
 8002586:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8002588:	b00a      	add	sp, #40	; 0x28
 800258a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800258c:	f7fe fec0 	bl	8001310 <Error_Handler>
 8002590:	e7f8      	b.n	8002584 <HAL_TIM_Base_MspInit+0xe4>
 8002592:	bf00      	nop
 8002594:	40000800 	.word	0x40000800
 8002598:	40014800 	.word	0x40014800
 800259c:	40023800 	.word	0x40023800
 80025a0:	200002c0 	.word	0x200002c0
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40026088 	.word	0x40026088
 80025ac:	00000000 	.word	0x00000000

080025b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <HAL_TIM_MspPostInit+0x58>)
 80025b4:	6801      	ldr	r1, [r0, #0]
{
 80025b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 80025ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025c4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 80025c6:	d002      	beq.n	80025ce <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025c8:	b009      	add	sp, #36	; 0x24
 80025ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80025e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002600 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80025ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025ec:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80025ee:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f000 fbcd 	bl	8002d94 <HAL_GPIO_Init>
}
 80025fa:	b009      	add	sp, #36	; 0x24
 80025fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002600:	00000040 	.word	0x00000040
 8002604:	00000002 	.word	0x00000002
 8002608:	40000800 	.word	0x40000800
 800260c:	40020400 	.word	0x40020400

08002610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002610:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002612:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_UART_MspInit+0x70>)
 8002614:	6801      	ldr	r1, [r0, #0]
{
 8002616:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800261a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002620:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002624:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002626:	d001      	beq.n	800262c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002628:	b008      	add	sp, #32
 800262a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800262c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002634:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002638:	6410      	str	r0, [r2, #64]	; 0x40
 800263a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800263c:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8002640:	9000      	str	r0, [sp, #0]
 8002642:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	480e      	ldr	r0, [pc, #56]	; (8002684 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002652:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8002678 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002662:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002666:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f000 fb92 	bl	8002d94 <HAL_GPIO_Init>
}
 8002670:	b008      	add	sp, #32
 8002672:	bd10      	pop	{r4, pc}
 8002674:	f3af 8000 	nop.w
 8002678:	0000000c 	.word	0x0000000c
 800267c:	00000002 	.word	0x00000002
 8002680:	40004400 	.word	0x40004400
 8002684:	40020000 	.word	0x40020000

08002688 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <NMI_Handler>
 800268a:	bf00      	nop

0800268c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <HardFault_Handler>
 800268e:	bf00      	nop

08002690 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <MemManage_Handler>
 8002692:	bf00      	nop

08002694 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <BusFault_Handler>
 8002696:	bf00      	nop

08002698 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <UsageFault_Handler>
 800269a:	bf00      	nop

0800269c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <DebugMon_Handler>:
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <PendSV_Handler>:
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f000 b8fa 	b.w	80028a0 <HAL_IncTick>

080026ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 80026ac:	2004      	movs	r0, #4
 80026ae:	f000 bc6d 	b.w	8002f8c <HAL_GPIO_EXTI_IRQHandler>
 80026b2:	bf00      	nop

080026b4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80026b4:	4801      	ldr	r0, [pc, #4]	; (80026bc <DMA1_Stream5_IRQHandler+0x8>)
 80026b6:	f000 ba79 	b.w	8002bac <HAL_DMA_IRQHandler>
 80026ba:	bf00      	nop
 80026bc:	200002c0 	.word	0x200002c0

080026c0 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80026c0:	4801      	ldr	r0, [pc, #4]	; (80026c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 80026c2:	f003 ba65 	b.w	8005b90 <HAL_TIM_IRQHandler>
 80026c6:	bf00      	nop
 80026c8:	20000374 	.word	0x20000374

080026cc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026cc:	4801      	ldr	r0, [pc, #4]	; (80026d4 <I2C1_EV_IRQHandler+0x8>)
 80026ce:	f001 bbbf 	b.w	8003e50 <HAL_I2C_EV_IRQHandler>
 80026d2:	bf00      	nop
 80026d4:	20000320 	.word	0x20000320

080026d8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <I2C1_ER_IRQHandler+0x8>)
 80026da:	f002 b86f 	b.w	80047bc <HAL_I2C_ER_IRQHandler>
 80026de:	bf00      	nop
 80026e0:	20000320 	.word	0x20000320

080026e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Emer_Pin);
 80026e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026ea:	f000 fc4f 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_Stop_Pin);
 80026ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026f2:	f000 fc4b 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026fe:	f000 bc45 	b.w	8002f8c <HAL_GPIO_EXTI_IRQHandler>
 8002702:	bf00      	nop

08002704 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002704:	2001      	movs	r0, #1
 8002706:	4770      	bx	lr

08002708 <_kill>:

int _kill(int pid, int sig)
{
 8002708:	b508      	push	{r3, lr}
	errno = EINVAL;
 800270a:	f003 fc23 	bl	8005f54 <__errno>
 800270e:	2316      	movs	r3, #22
 8002710:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002712:	f04f 30ff 	mov.w	r0, #4294967295
 8002716:	bd08      	pop	{r3, pc}

08002718 <_exit>:

void _exit (int status)
{
 8002718:	b508      	push	{r3, lr}
	errno = EINVAL;
 800271a:	f003 fc1b 	bl	8005f54 <__errno>
 800271e:	2316      	movs	r3, #22
 8002720:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002722:	e7fe      	b.n	8002722 <_exit+0xa>

08002724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002724:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	1e16      	subs	r6, r2, #0
 8002728:	dd07      	ble.n	800273a <_read+0x16>
 800272a:	460c      	mov	r4, r1
 800272c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800272e:	f3af 8000 	nop.w
 8002732:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	42a5      	cmp	r5, r4
 8002738:	d1f9      	bne.n	800272e <_read+0xa>
	}

return len;
}
 800273a:	4630      	mov	r0, r6
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	bf00      	nop

08002740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002740:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	1e16      	subs	r6, r2, #0
 8002744:	dd07      	ble.n	8002756 <_write+0x16>
 8002746:	460c      	mov	r4, r1
 8002748:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800274a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800274e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	42ac      	cmp	r4, r5
 8002754:	d1f9      	bne.n	800274a <_write+0xa>
	}
	return len;
}
 8002756:	4630      	mov	r0, r6
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	bf00      	nop

0800275c <_close>:

int _close(int file)
{
	return -1;
}
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002768:	604b      	str	r3, [r1, #4]
	return 0;
}
 800276a:	2000      	movs	r0, #0
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002770:	2001      	movs	r0, #1
 8002772:	4770      	bx	lr

08002774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002774:	2000      	movs	r0, #0
 8002776:	4770      	bx	lr

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277a:	4c0c      	ldr	r4, [pc, #48]	; (80027ac <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <_sbrk+0x38>)
 800277e:	490d      	ldr	r1, [pc, #52]	; (80027b4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002780:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002782:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002784:	b12a      	cbz	r2, 8002792 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4410      	add	r0, r2
 8002788:	4288      	cmp	r0, r1
 800278a:	d807      	bhi.n	800279c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800278c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800278e:	4610      	mov	r0, r2
 8002790:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <_sbrk+0x40>)
 8002794:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4410      	add	r0, r2
 8002798:	4288      	cmp	r0, r1
 800279a:	d9f7      	bls.n	800278c <_sbrk+0x14>
    errno = ENOMEM;
 800279c:	f003 fbda 	bl	8005f54 <__errno>
 80027a0:	230c      	movs	r3, #12
    return (void *)-1;
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80027a6:	6003      	str	r3, [r0, #0]
}
 80027a8:	4610      	mov	r0, r2
 80027aa:	bd10      	pop	{r4, pc}
 80027ac:	200004bc 	.word	0x200004bc
 80027b0:	20020000 	.word	0x20020000
 80027b4:	00000400 	.word	0x00000400
 80027b8:	200004d8 	.word	0x200004d8

080027bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <SystemInit+0x10>)
 80027be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027ec:	4c0b      	ldr	r4, [pc, #44]	; (800281c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027fa:	f7ff ffdf 	bl	80027bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f003 fbc1 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7ff f9b5 	bl	8001b70 <main>
  bx  lr    
 8002806:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8002808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002814:	080075a8 	.word	0x080075a8
  ldr r2, =_sbss
 8002818:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800281c:	200004d4 	.word	0x200004d4

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_InitTick+0x3c>)
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_InitTick+0x40>)
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
{
 800282e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002834:	fbb0 f0f2 	udiv	r0, r0, r2
 8002838:	fbb3 f0f0 	udiv	r0, r3, r0
 800283c:	f000 f8b2 	bl	80029a4 <HAL_SYSTICK_Config>
 8002840:	b908      	cbnz	r0, 8002846 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	2d0f      	cmp	r5, #15
 8002844:	d901      	bls.n	800284a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002848:	bd38      	pop	{r3, r4, r5, pc}
 800284a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	4602      	mov	r2, r0
 800284e:	4629      	mov	r1, r5
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f000 f85a 	bl	800290c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_InitTick+0x44>)
 800285a:	4620      	mov	r0, r4
 800285c:	601d      	str	r5, [r3, #0]
}
 800285e:	bd38      	pop	{r3, r4, r5, pc}
 8002860:	20000034 	.word	0x20000034
 8002864:	20000030 	.word	0x20000030
 8002868:	20000038 	.word	0x20000038

0800286c <HAL_Init>:
{
 800286c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_Init+0x30>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800287e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002886:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f82d 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	2000      	movs	r0, #0
 8002890:	f7ff ffc8 	bl	8002824 <HAL_InitTick>
  HAL_MspInit();
 8002894:	f7ff fd9e 	bl	80023d4 <HAL_MspInit>
}
 8002898:	2000      	movs	r0, #0
 800289a:	bd08      	pop	{r3, pc}
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_IncTick+0x10>)
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_IncTick+0x14>)
 80028a4:	6811      	ldr	r1, [r2, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	440b      	add	r3, r1
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	200004c0 	.word	0x200004c0
 80028b4:	20000034 	.word	0x20000034

080028b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <HAL_GetTick+0x8>)
 80028ba:	6818      	ldr	r0, [r3, #0]
}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200004c0 	.word	0x200004c0

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff fff6 	bl	80028b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80028ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80028d0:	d002      	beq.n	80028d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_Delay+0x20>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	1b43      	subs	r3, r0, r5
 80028de:	42a3      	cmp	r3, r4
 80028e0:	d3fa      	bcc.n	80028d8 <HAL_Delay+0x14>
  {
  }
}
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	20000034 	.word	0x20000034

080028e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002902:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_NVIC_SetPriority+0x74>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002916:	f1c3 0e07 	rsb	lr, r3, #7
 800291a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002922:	bf28      	it	cs
 8002924:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002928:	f1bc 0f06 	cmp.w	ip, #6
 800292c:	d91b      	bls.n	8002966 <HAL_NVIC_SetPriority+0x5a>
 800292e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 3cff 	mov.w	ip, #4294967295
 8002934:	fa0c fc03 	lsl.w	ip, ip, r3
 8002938:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 3cff 	mov.w	ip, #4294967295
 8002940:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002944:	ea21 010c 	bic.w	r1, r1, ip
 8002948:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800294a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002950:	db0c      	blt.n	800296c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002956:	0109      	lsls	r1, r1, #4
 8002958:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800295c:	b2c9      	uxtb	r1, r1
 800295e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002962:	f85d fb04 	ldr.w	pc, [sp], #4
 8002966:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002968:	4613      	mov	r3, r2
 800296a:	e7e7      	b.n	800293c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_NVIC_SetPriority+0x78>)
 800296e:	f000 000f 	and.w	r0, r0, #15
 8002972:	0109      	lsls	r1, r1, #4
 8002974:	4403      	add	r3, r0
 8002976:	b2c9      	uxtb	r1, r1
 8002978:	7619      	strb	r1, [r3, #24]
 800297a:	f85d fb04 	ldr.w	pc, [sp], #4
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00
 8002984:	e000ecfc 	.word	0xe000ecfc

08002988 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002988:	2800      	cmp	r0, #0
 800298a:	db08      	blt.n	800299e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298c:	0941      	lsrs	r1, r0, #5
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_NVIC_EnableIRQ+0x18>)
 8002990:	f000 001f 	and.w	r0, r0, #31
 8002994:	2301      	movs	r3, #1
 8002996:	fa03 f000 	lsl.w	r0, r3, r0
 800299a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	3801      	subs	r0, #1
 80029a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80029aa:	d210      	bcs.n	80029ce <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ac:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	4c08      	ldr	r4, [pc, #32]	; (80029d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80029ba:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029be:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80029c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	6119      	str	r1, [r3, #16]
 80029cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2001      	movs	r0, #1
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ff6c 	bl	80028b8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029e0:	2c00      	cmp	r4, #0
 80029e2:	d052      	beq.n	8002a8a <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029e4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80029e6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e8:	2102      	movs	r1, #2
 80029ea:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80029ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	4605      	mov	r5, r0
 80029fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fc:	e005      	b.n	8002a0a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fe:	f7ff ff5b 	bl	80028b8 <HAL_GetTick>
 8002a02:	1b43      	subs	r3, r0, r5
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d839      	bhi.n	8002a7c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	07d1      	lsls	r1, r2, #31
 8002a0e:	d4f6      	bmi.n	80029fe <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a10:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002a14:	68e1      	ldr	r1, [r4, #12]
 8002a16:	4302      	orrs	r2, r0
 8002a18:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	432a      	orrs	r2, r5
 8002a22:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a24:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8002a26:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a2c:	4933      	ldr	r1, [pc, #204]	; (8002afc <HAL_DMA_Init+0x124>)
 8002a2e:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a30:	6a25      	ldr	r5, [r4, #32]
 8002a32:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a34:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a38:	2904      	cmp	r1, #4
 8002a3a:	d028      	beq.n	8002a8e <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a3e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a40:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a44:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a46:	b2d8      	uxtb	r0, r3
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8002a4a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a4c:	3810      	subs	r0, #16
 8002a4e:	fba2 5200 	umull	r5, r2, r2, r0
 8002a52:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a54:	492b      	ldr	r1, [pc, #172]	; (8002b04 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5a:	5c89      	ldrb	r1, [r1, r2]
 8002a5c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002a62:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a64:	bf88      	it	hi
 8002a66:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a68:	223f      	movs	r2, #63	; 0x3f
 8002a6a:	408a      	lsls	r2, r1
 8002a6c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a74:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002a76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7e:	2220      	movs	r2, #32
 8002a80:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002a86:	4618      	mov	r0, r3
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a8e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8002a92:	4329      	orrs	r1, r5
 8002a94:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002a96:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002a98:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8002a9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	f021 0107 	bic.w	r1, r1, #7
 8002aa0:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002aa2:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aa6:	2d00      	cmp	r5, #0
 8002aa8:	d0cd      	beq.n	8002a46 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aaa:	b178      	cbz	r0, 8002acc <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aac:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ab0:	d016      	beq.n	8002ae0 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab2:	2a02      	cmp	r2, #2
 8002ab4:	d903      	bls.n	8002abe <HAL_DMA_Init+0xe6>
 8002ab6:	2a03      	cmp	r2, #3
 8002ab8:	d1c5      	bne.n	8002a46 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aba:	01ea      	lsls	r2, r5, #7
 8002abc:	d5c3      	bpl.n	8002a46 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8002abe:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ac0:	2240      	movs	r2, #64	; 0x40
 8002ac2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002ac8:	4618      	mov	r0, r3
}
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002acc:	2a01      	cmp	r2, #1
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA_Init+0x100>
 8002ad0:	f032 0202 	bics.w	r2, r2, #2
 8002ad4:	d1b7      	bne.n	8002a46 <HAL_DMA_Init+0x6e>
 8002ad6:	e7f0      	b.n	8002aba <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002adc:	d1b3      	bne.n	8002a46 <HAL_DMA_Init+0x6e>
 8002ade:	e7ee      	b.n	8002abe <HAL_DMA_Init+0xe6>
    switch (tmp)
 8002ae0:	2a03      	cmp	r2, #3
 8002ae2:	d8b0      	bhi.n	8002a46 <HAL_DMA_Init+0x6e>
 8002ae4:	a001      	add	r0, pc, #4	; (adr r0, 8002aec <HAL_DMA_Init+0x114>)
 8002ae6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002abf 	.word	0x08002abf
 8002af0:	08002abb 	.word	0x08002abb
 8002af4:	08002abf 	.word	0x08002abf
 8002af8:	08002ad9 	.word	0x08002ad9
 8002afc:	f010803f 	.word	0xf010803f
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	080074bc 	.word	0x080074bc

08002b08 <HAL_DMA_Start_IT>:
{
 8002b08:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8002b0a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002b10:	2c01      	cmp	r4, #1
 8002b12:	d035      	beq.n	8002b80 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b14:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002b18:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8002b1e:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b22:	d005      	beq.n	8002b30 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002b24:	2300      	movs	r3, #0
 8002b26:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8002b2a:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8002b2c:	2002      	movs	r0, #2
}
 8002b2e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	2602      	movs	r6, #2
 8002b32:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b36:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b38:	2600      	movs	r6, #0
 8002b3a:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b3c:	6826      	ldr	r6, [r4, #0]
 8002b3e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8002b42:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002b44:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b46:	6883      	ldr	r3, [r0, #8]
 8002b48:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002b4a:	bf0e      	itee	eq
 8002b4c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002b4e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b50:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b52:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002b54:	bf08      	it	eq
 8002b56:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	233f      	movs	r3, #63	; 0x3f
 8002b5a:	4093      	lsls	r3, r2
 8002b5c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b5e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b62:	f043 0316 	orr.w	r3, r3, #22
 8002b66:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	b11a      	cbz	r2, 8002b72 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002b7a:	6023      	str	r3, [r4, #0]
}
 8002b7c:	bc70      	pop	{r4, r5, r6}
 8002b7e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002b80:	2002      	movs	r0, #2
}
 8002b82:	bc70      	pop	{r4, r5, r6}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002b94:	2001      	movs	r0, #1
 8002b96:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002b98:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8002ba6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	4770      	bx	lr

08002bac <HAL_DMA_IRQHandler>:
{
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb2:	4a74      	ldr	r2, [pc, #464]	; (8002d84 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb6:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002bbe:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	4222      	tst	r2, r4
{
 8002bc6:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bca:	6801      	ldr	r1, [r0, #0]
 8002bcc:	680f      	ldr	r7, [r1, #0]
 8002bce:	0778      	lsls	r0, r7, #29
 8002bd0:	f100 808a 	bmi.w	8002ce8 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	4222      	tst	r2, r4
 8002bda:	d004      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bdc:	f8d8 1000 	ldr.w	r1, [r8]
 8002be0:	6949      	ldr	r1, [r1, #20]
 8002be2:	0609      	lsls	r1, r1, #24
 8002be4:	d478      	bmi.n	8002cd8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be6:	2204      	movs	r2, #4
 8002be8:	409a      	lsls	r2, r3
 8002bea:	4222      	tst	r2, r4
 8002bec:	d004      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bee:	f8d8 1000 	ldr.w	r1, [r8]
 8002bf2:	6809      	ldr	r1, [r1, #0]
 8002bf4:	078f      	lsls	r7, r1, #30
 8002bf6:	d467      	bmi.n	8002cc8 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	4222      	tst	r2, r4
 8002bfe:	d004      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c00:	f8d8 1000 	ldr.w	r1, [r8]
 8002c04:	680f      	ldr	r7, [r1, #0]
 8002c06:	0738      	lsls	r0, r7, #28
 8002c08:	d449      	bmi.n	8002c9e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4222      	tst	r2, r4
 8002c10:	d017      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c12:	f8d8 1000 	ldr.w	r1, [r8]
 8002c16:	680c      	ldr	r4, [r1, #0]
 8002c18:	06e0      	lsls	r0, r4, #27
 8002c1a:	d512      	bpl.n	8002c42 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8002c22:	2a05      	cmp	r2, #5
 8002c24:	d073      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c26:	680b      	ldr	r3, [r1, #0]
 8002c28:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2e:	f000 8090 	beq.w	8002d52 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c32:	0319      	lsls	r1, r3, #12
 8002c34:	f140 809b 	bpl.w	8002d6e <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002c38:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002c3c:	b10b      	cbz	r3, 8002c42 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c42:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002c46:	b33b      	cbz	r3, 8002c98 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c48:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002c4c:	07da      	lsls	r2, r3, #31
 8002c4e:	d51b      	bpl.n	8002c88 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002c50:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c54:	494c      	ldr	r1, [pc, #304]	; (8002d88 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c56:	2305      	movs	r3, #5
 8002c58:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002c5c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c5e:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8002c62:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c66:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e002      	b.n	8002c72 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	07db      	lsls	r3, r3, #31
 8002c70:	d504      	bpl.n	8002c7c <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	3301      	adds	r3, #1
 8002c76:	42ab      	cmp	r3, r5
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	d9f7      	bls.n	8002c6c <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002c7e:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002c80:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002c84:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002c88:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002c8c:	b123      	cbz	r3, 8002c98 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8002c8e:	4640      	mov	r0, r8
}
 8002c90:	b002      	add	sp, #8
 8002c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8002c96:	4718      	bx	r3
}
 8002c98:	b002      	add	sp, #8
 8002c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca0:	680a      	ldr	r2, [r1, #0]
 8002ca2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca6:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca8:	d12a      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002caa:	05d7      	lsls	r7, r2, #23
 8002cac:	d403      	bmi.n	8002cb6 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cae:	680a      	ldr	r2, [r1, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d0a5      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8002cc6:	e7a0      	b.n	8002c0a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cc8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cca:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002cce:	f042 0204 	orr.w	r2, r2, #4
 8002cd2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002cd6:	e78f      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cda:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002cde:	f042 0202 	orr.w	r2, r2, #2
 8002ce2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002ce6:	e77e      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce8:	680f      	ldr	r7, [r1, #0]
 8002cea:	f027 0704 	bic.w	r7, r7, #4
 8002cee:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002cfe:	e769      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d00:	0312      	lsls	r2, r2, #12
 8002d02:	d5d8      	bpl.n	8002cb6 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d04:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d1d8      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x112>
 8002d0c:	e77d      	b.n	8002c0a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	680a      	ldr	r2, [r1, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	694a      	ldr	r2, [r1, #20]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d1e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002d22:	b352      	cbz	r2, 8002d7a <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d24:	680a      	ldr	r2, [r1, #0]
 8002d26:	f022 0208 	bic.w	r2, r2, #8
 8002d2a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	223f      	movs	r2, #63	; 0x3f
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002d32:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d36:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002d38:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8002d3a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002d40:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002d44:	2900      	cmp	r1, #0
 8002d46:	d0a7      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8002d48:	4640      	mov	r0, r8
}
 8002d4a:	b002      	add	sp, #8
 8002d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002d50:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002d56:	f47f af6f 	bne.w	8002c38 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d5a:	680a      	ldr	r2, [r1, #0]
 8002d5c:	f022 0210 	bic.w	r2, r2, #16
 8002d60:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002d62:	2201      	movs	r2, #1
 8002d64:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002d68:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8002d6c:	e764      	b.n	8002c38 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002d6e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f47f af63 	bne.w	8002c3e <HAL_DMA_IRQHandler+0x92>
 8002d78:	e763      	b.n	8002c42 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d7a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002d7e:	2a00      	cmp	r2, #0
 8002d80:	d1d0      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x178>
 8002d82:	e7d3      	b.n	8002d2c <HAL_DMA_IRQHandler+0x180>
 8002d84:	20000030 	.word	0x20000030
 8002d88:	1b4e81b5 	.word	0x1b4e81b5

08002d8c <HAL_DMA_GetState>:
  return hdma->State;
 8002d8c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d98:	2200      	movs	r2, #0
 8002d9a:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9c:	4e70      	ldr	r6, [pc, #448]	; (8002f60 <HAL_GPIO_Init+0x1cc>)
{
 8002d9e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8002da2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4689      	mov	r9, r1
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	3301      	adds	r3, #1
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	f102 0202 	add.w	r2, r2, #2
 8002db2:	d078      	beq.n	8002ea6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002db4:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db8:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8002dbc:	43a1      	bics	r1, r4
 8002dbe:	d1f4      	bne.n	8002daa <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc0:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8002dc4:	f00c 0103 	and.w	r1, ip, #3
 8002dc8:	1e4d      	subs	r5, r1, #1
 8002dca:	2d01      	cmp	r5, #1
 8002dcc:	d96e      	bls.n	8002eac <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dce:	2903      	cmp	r1, #3
 8002dd0:	f040 80ae 	bne.w	8002f30 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	4091      	lsls	r1, r2
 8002dd6:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002dd8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dda:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ddc:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dde:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002de2:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de4:	d0e1      	beq.n	8002daa <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	4d5f      	ldr	r5, [pc, #380]	; (8002f64 <HAL_GPIO_Init+0x1d0>)
 8002de8:	2100      	movs	r1, #0
 8002dea:	9103      	str	r1, [sp, #12]
 8002dec:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002dee:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002df2:	6469      	str	r1, [r5, #68]	; 0x44
 8002df4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002df6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002dfa:	9103      	str	r1, [sp, #12]
 8002dfc:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	f023 0103 	bic.w	r1, r3, #3
 8002e02:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002e06:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e12:	00bf      	lsls	r7, r7, #2
 8002e14:	250f      	movs	r5, #15
 8002e16:	40bd      	lsls	r5, r7
 8002e18:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1c:	4d52      	ldr	r5, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x1d4>)
 8002e1e:	42a8      	cmp	r0, r5
 8002e20:	d017      	beq.n	8002e52 <HAL_GPIO_Init+0xbe>
 8002e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e26:	42a8      	cmp	r0, r5
 8002e28:	f000 8086 	beq.w	8002f38 <HAL_GPIO_Init+0x1a4>
 8002e2c:	4d4f      	ldr	r5, [pc, #316]	; (8002f6c <HAL_GPIO_Init+0x1d8>)
 8002e2e:	42a8      	cmp	r0, r5
 8002e30:	f000 8087 	beq.w	8002f42 <HAL_GPIO_Init+0x1ae>
 8002e34:	4d4e      	ldr	r5, [pc, #312]	; (8002f70 <HAL_GPIO_Init+0x1dc>)
 8002e36:	42a8      	cmp	r0, r5
 8002e38:	f000 808a 	beq.w	8002f50 <HAL_GPIO_Init+0x1bc>
 8002e3c:	4d4d      	ldr	r5, [pc, #308]	; (8002f74 <HAL_GPIO_Init+0x1e0>)
 8002e3e:	42a8      	cmp	r0, r5
 8002e40:	bf0c      	ite	eq
 8002e42:	f04f 0e04 	moveq.w	lr, #4
 8002e46:	f04f 0e07 	movne.w	lr, #7
 8002e4a:	fa0e f707 	lsl.w	r7, lr, r7
 8002e4e:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e52:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002e56:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002e60:	bf0c      	ite	eq
 8002e62:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002e64:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002e68:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002e6a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002e70:	bf0c      	ite	eq
 8002e72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002e74:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002e78:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002e7a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e7c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002e80:	bf0c      	ite	eq
 8002e82:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002e84:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002e88:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e90:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002e94:	bf0c      	ite	eq
 8002e96:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002e98:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9c:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8002e9e:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea0:	f102 0202 	add.w	r2, r2, #2
 8002ea4:	d186      	bne.n	8002db4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ea6:	b005      	add	sp, #20
 8002ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eac:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8002eb0:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb2:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb6:	2503      	movs	r5, #3
 8002eb8:	fa05 fe02 	lsl.w	lr, r5, r2
 8002ebc:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec0:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002ec4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ec6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec8:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002ed4:	409f      	lsls	r7, r3
 8002ed6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002eda:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002edc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002ee6:	4097      	lsls	r7, r2
 8002ee8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eec:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8002eee:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	fa01 f102 	lsl.w	r1, r1, r2
 8002ef4:	f47f af70 	bne.w	8002dd8 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8002ef8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002efc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f00:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002f04:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002f08:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f0a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f0e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f12:	fa07 f708 	lsl.w	r7, r7, r8
 8002f16:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f18:	270f      	movs	r7, #15
 8002f1a:	fa07 f808 	lsl.w	r8, r7, r8
 8002f1e:	9f00      	ldr	r7, [sp, #0]
 8002f20:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f24:	9f01      	ldr	r7, [sp, #4]
 8002f26:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8002f2a:	f8ce 7020 	str.w	r7, [lr, #32]
 8002f2e:	e753      	b.n	8002dd8 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	2503      	movs	r5, #3
 8002f32:	4095      	lsls	r5, r2
 8002f34:	43ed      	mvns	r5, r5
 8002f36:	e7d1      	b.n	8002edc <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f38:	fa0a f707 	lsl.w	r7, sl, r7
 8002f3c:	ea48 0807 	orr.w	r8, r8, r7
 8002f40:	e787      	b.n	8002e52 <HAL_GPIO_Init+0xbe>
 8002f42:	f04f 0e02 	mov.w	lr, #2
 8002f46:	fa0e f707 	lsl.w	r7, lr, r7
 8002f4a:	ea48 0807 	orr.w	r8, r8, r7
 8002f4e:	e780      	b.n	8002e52 <HAL_GPIO_Init+0xbe>
 8002f50:	f04f 0e03 	mov.w	lr, #3
 8002f54:	fa0e f707 	lsl.w	r7, lr, r7
 8002f58:	ea48 0807 	orr.w	r8, r8, r7
 8002f5c:	e779      	b.n	8002e52 <HAL_GPIO_Init+0xbe>
 8002f5e:	bf00      	nop
 8002f60:	40013c00 	.word	0x40013c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f78:	6903      	ldr	r3, [r0, #16]
 8002f7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002f7c:	bf14      	ite	ne
 8002f7e:	2001      	movne	r0, #1
 8002f80:	2000      	moveq	r0, #0
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	b902      	cbnz	r2, 8002f88 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f86:	0409      	lsls	r1, r1, #16
 8002f88:	6181      	str	r1, [r0, #24]
  }
}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002f8e:	6951      	ldr	r1, [r2, #20]
 8002f90:	4201      	tst	r1, r0
 8002f92:	d100      	bne.n	8002f96 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002f94:	4770      	bx	lr
{
 8002f96:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f98:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9a:	f7fe f99b 	bl	80012d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f9e:	bd08      	pop	{r3, pc}
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa8:	6804      	ldr	r4, [r0, #0]
{
 8002faa:	b083      	sub	sp, #12
 8002fac:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fae:	6823      	ldr	r3, [r4, #0]
{
 8002fb0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8002fb4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	468a      	mov	sl, r1
 8002fc0:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc2:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002fc4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002fc8:	d135      	bne.n	8003036 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fca:	6965      	ldr	r5, [r4, #20]
 8002fcc:	07e8      	lsls	r0, r5, #31
 8002fce:	d5fc      	bpl.n	8002fca <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd0:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8002fd4:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002fd6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002fda:	d003      	beq.n	8002fe4 <I2C_RequestMemoryWrite+0x40>
 8002fdc:	e04e      	b.n	800307c <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fde:	6961      	ldr	r1, [r4, #20]
 8002fe0:	054d      	lsls	r5, r1, #21
 8002fe2:	d45c      	bmi.n	800309e <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe4:	6961      	ldr	r1, [r4, #20]
 8002fe6:	078b      	lsls	r3, r1, #30
 8002fe8:	d5f9      	bpl.n	8002fde <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	6963      	ldr	r3, [r4, #20]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	69a3      	ldr	r3, [r4, #24]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ffc:	f040 8087 	bne.w	800310e <I2C_RequestMemoryWrite+0x16a>
 8003000:	6963      	ldr	r3, [r4, #20]
 8003002:	061a      	lsls	r2, r3, #24
 8003004:	d463      	bmi.n	80030ce <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	055b      	lsls	r3, r3, #21
 800300a:	d5f9      	bpl.n	8003000 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003010:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003014:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003020:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003022:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d066      	beq.n	8003100 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 8003032:	2001      	movs	r0, #1
 8003034:	e01f      	b.n	8003076 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003036:	6963      	ldr	r3, [r4, #20]
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	d4c9      	bmi.n	8002fd0 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7ff fc3c 	bl	80028b8 <HAL_GetTick>
 8003040:	eba0 000b 	sub.w	r0, r0, fp
 8003044:	4581      	cmp	r9, r0
 8003046:	d304      	bcc.n	8003052 <I2C_RequestMemoryWrite+0xae>
 8003048:	f1b9 0f00 	cmp.w	r9, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800304e:	6834      	ldr	r4, [r6, #0]
 8003050:	e7b8      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003052:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003054:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003056:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003058:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800305c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003062:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8003064:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306e:	680b      	ldr	r3, [r1, #0]
 8003070:	05dc      	lsls	r4, r3, #23
 8003072:	d435      	bmi.n	80030e0 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8003074:	2003      	movs	r0, #3
}
 8003076:	b003      	add	sp, #12
 8003078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307c:	6963      	ldr	r3, [r4, #20]
 800307e:	0798      	lsls	r0, r3, #30
 8003080:	d4b3      	bmi.n	8002fea <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003082:	6963      	ldr	r3, [r4, #20]
 8003084:	055a      	lsls	r2, r3, #21
 8003086:	d40a      	bmi.n	800309e <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7ff fc16 	bl	80028b8 <HAL_GetTick>
 800308c:	eba0 000b 	sub.w	r0, r0, fp
 8003090:	4581      	cmp	r9, r0
 8003092:	d34e      	bcc.n	8003132 <I2C_RequestMemoryWrite+0x18e>
 8003094:	f1b9 0f00 	cmp.w	r9, #0
 8003098:	d04b      	beq.n	8003132 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800309a:	6834      	ldr	r4, [r6, #0]
 800309c:	e79b      	b.n	8002fd6 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a4:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ae:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ba:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80030bc:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c0:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c6:	6433      	str	r3, [r6, #64]	; 0x40
}
 80030c8:	b003      	add	sp, #12
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ce:	f1b8 0f01 	cmp.w	r8, #1
 80030d2:	d109      	bne.n	80030e8 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80030d6:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d8:	6127      	str	r7, [r4, #16]
}
 80030da:	b003      	add	sp, #12
 80030dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e4:	6433      	str	r3, [r6, #64]	; 0x40
 80030e6:	e7c5      	b.n	8003074 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e8:	0a3b      	lsrs	r3, r7, #8
 80030ea:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ec:	f1b9 3fff 	cmp.w	r9, #4294967295
 80030f0:	d12e      	bne.n	8003150 <I2C_RequestMemoryWrite+0x1ac>
 80030f2:	6963      	ldr	r3, [r4, #20]
 80030f4:	0619      	lsls	r1, r3, #24
 80030f6:	d4ed      	bmi.n	80030d4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f8:	6963      	ldr	r3, [r4, #20]
 80030fa:	055a      	lsls	r2, r3, #21
 80030fc:	d5f9      	bpl.n	80030f2 <I2C_RequestMemoryWrite+0x14e>
 80030fe:	e785      	b.n	800300c <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	6832      	ldr	r2, [r6, #0]
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8003108:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e7b3      	b.n	8003076 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310e:	6963      	ldr	r3, [r4, #20]
 8003110:	061d      	lsls	r5, r3, #24
 8003112:	d4dc      	bmi.n	80030ce <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003114:	6963      	ldr	r3, [r4, #20]
 8003116:	0559      	lsls	r1, r3, #21
 8003118:	f53f af78 	bmi.w	800300c <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311c:	f7ff fbcc 	bl	80028b8 <HAL_GetTick>
 8003120:	eba0 000b 	sub.w	r0, r0, fp
 8003124:	4581      	cmp	r9, r0
 8003126:	d325      	bcc.n	8003174 <I2C_RequestMemoryWrite+0x1d0>
 8003128:	f1b9 0f00 	cmp.w	r9, #0
 800312c:	d022      	beq.n	8003174 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312e:	6834      	ldr	r4, [r6, #0]
 8003130:	e762      	b.n	8002ff8 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003142:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 800314c:	2001      	movs	r0, #1
 800314e:	e792      	b.n	8003076 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003150:	6963      	ldr	r3, [r4, #20]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	d4be      	bmi.n	80030d4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003156:	6963      	ldr	r3, [r4, #20]
 8003158:	0558      	lsls	r0, r3, #21
 800315a:	f53f af57 	bmi.w	800300c <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7ff fbab 	bl	80028b8 <HAL_GetTick>
 8003162:	eba0 000b 	sub.w	r0, r0, fp
 8003166:	4581      	cmp	r9, r0
 8003168:	d304      	bcc.n	8003174 <I2C_RequestMemoryWrite+0x1d0>
 800316a:	f1b9 0f00 	cmp.w	r9, #0
 800316e:	d001      	beq.n	8003174 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003170:	6834      	ldr	r4, [r6, #0]
 8003172:	e7bb      	b.n	80030ec <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003174:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003176:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003178:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800317a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800317e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003184:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800318e:	e74d      	b.n	800302c <I2C_RequestMemoryWrite+0x88>

08003190 <I2C_RequestMemoryRead>:
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003194:	6804      	ldr	r4, [r0, #0]
{
 8003196:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a0:	6823      	ldr	r3, [r4, #0]
{
 80031a2:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80031a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80031ac:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b0:	6023      	str	r3, [r4, #0]
{
 80031b2:	4606      	mov	r6, r0
 80031b4:	468b      	mov	fp, r1
 80031b6:	4617      	mov	r7, r2
 80031b8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80031bc:	d139      	bne.n	8003232 <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031be:	6965      	ldr	r5, [r4, #20]
 80031c0:	07eb      	lsls	r3, r5, #31
 80031c2:	d5fc      	bpl.n	80031be <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c4:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80031c8:	6123      	str	r3, [r4, #16]
 80031ca:	fa5f fb8b 	uxtb.w	fp, fp
 80031ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80031d2:	d003      	beq.n	80031dc <I2C_RequestMemoryRead+0x4c>
 80031d4:	e068      	b.n	80032a8 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d6:	6961      	ldr	r1, [r4, #20]
 80031d8:	054a      	lsls	r2, r1, #21
 80031da:	d450      	bmi.n	800327e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	6961      	ldr	r1, [r4, #20]
 80031de:	0789      	lsls	r1, r1, #30
 80031e0:	d5f9      	bpl.n	80031d6 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	6963      	ldr	r3, [r4, #20]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	69a3      	ldr	r3, [r4, #24]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80031f4:	f040 80b8 	bne.w	8003368 <I2C_RequestMemoryRead+0x1d8>
 80031f8:	6963      	ldr	r3, [r4, #20]
 80031fa:	0618      	lsls	r0, r3, #24
 80031fc:	d467      	bmi.n	80032ce <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fe:	6963      	ldr	r3, [r4, #20]
 8003200:	0559      	lsls	r1, r3, #21
 8003202:	d5f9      	bpl.n	80031f8 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800320c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003210:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003218:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800321a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003224:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d06c      	beq.n	8003304 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 800322a:	2001      	movs	r0, #1
}
 800322c:	b003      	add	sp, #12
 800322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003232:	6963      	ldr	r3, [r4, #20]
 8003234:	07dd      	lsls	r5, r3, #31
 8003236:	d4c5      	bmi.n	80031c4 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7ff fb3e 	bl	80028b8 <HAL_GetTick>
 800323c:	eba0 0009 	sub.w	r0, r0, r9
 8003240:	4582      	cmp	sl, r0
 8003242:	d304      	bcc.n	800324e <I2C_RequestMemoryRead+0xbe>
 8003244:	f1ba 0f00 	cmp.w	sl, #0
 8003248:	d001      	beq.n	800324e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324a:	6834      	ldr	r4, [r6, #0]
 800324c:	e7b4      	b.n	80031b8 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800324e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003250:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003252:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003254:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003258:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325e:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8003260:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	f042 0220 	orr.w	r2, r2, #32
 8003268:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800326a:	680b      	ldr	r3, [r1, #0]
 800326c:	05dc      	lsls	r4, r3, #23
 800326e:	d502      	bpl.n	8003276 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8003276:	2003      	movs	r0, #3
}
 8003278:	b003      	add	sp, #12
 800327a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003284:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800328e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003292:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329a:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800329c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6433      	str	r3, [r6, #64]	; 0x40
 80032a6:	e7c0      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a8:	6963      	ldr	r3, [r4, #20]
 80032aa:	079b      	lsls	r3, r3, #30
 80032ac:	d499      	bmi.n	80031e2 <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ae:	6963      	ldr	r3, [r4, #20]
 80032b0:	0558      	lsls	r0, r3, #21
 80032b2:	d4e4      	bmi.n	800327e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7ff fb00 	bl	80028b8 <HAL_GetTick>
 80032b8:	eba0 0009 	sub.w	r0, r0, r9
 80032bc:	4582      	cmp	sl, r0
 80032be:	f0c0 808b 	bcc.w	80033d8 <I2C_RequestMemoryRead+0x248>
 80032c2:	f1ba 0f00 	cmp.w	sl, #0
 80032c6:	f000 8087 	beq.w	80033d8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ca:	6834      	ldr	r4, [r6, #0]
 80032cc:	e77f      	b.n	80031ce <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ce:	f1b8 0f01 	cmp.w	r8, #1
 80032d2:	d10b      	bne.n	80032ec <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d4:	b2ff      	uxtb	r7, r7
 80032d6:	6127      	str	r7, [r4, #16]
 80032d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80032dc:	d16a      	bne.n	80033b4 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032de:	6963      	ldr	r3, [r4, #20]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	d416      	bmi.n	8003312 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e4:	6963      	ldr	r3, [r4, #20]
 80032e6:	055f      	lsls	r7, r3, #21
 80032e8:	d5f9      	bpl.n	80032de <I2C_RequestMemoryRead+0x14e>
 80032ea:	e78b      	b.n	8003204 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032ec:	0a3b      	lsrs	r3, r7, #8
 80032ee:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80032f4:	d17f      	bne.n	80033f6 <I2C_RequestMemoryRead+0x266>
 80032f6:	6963      	ldr	r3, [r4, #20]
 80032f8:	061d      	lsls	r5, r3, #24
 80032fa:	d4eb      	bmi.n	80032d4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	6963      	ldr	r3, [r4, #20]
 80032fe:	0558      	lsls	r0, r3, #21
 8003300:	d5f9      	bpl.n	80032f6 <I2C_RequestMemoryRead+0x166>
 8003302:	e77f      	b.n	8003204 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	6832      	ldr	r2, [r6, #0]
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 800330c:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e78c      	b.n	800322c <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800331a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800331e:	d113      	bne.n	8003348 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	6963      	ldr	r3, [r4, #20]
 8003322:	07d8      	lsls	r0, r3, #31
 8003324:	d5fc      	bpl.n	8003320 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003326:	f04b 0301 	orr.w	r3, fp, #1
 800332a:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800332c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003330:	d003      	beq.n	800333a <I2C_RequestMemoryRead+0x1aa>
 8003332:	e02b      	b.n	800338c <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003334:	6963      	ldr	r3, [r4, #20]
 8003336:	055b      	lsls	r3, r3, #21
 8003338:	d4a1      	bmi.n	800327e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333a:	6963      	ldr	r3, [r4, #20]
 800333c:	43db      	mvns	r3, r3
 800333e:	f013 0302 	ands.w	r3, r3, #2
 8003342:	d1f7      	bne.n	8003334 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8003344:	4618      	mov	r0, r3
 8003346:	e771      	b.n	800322c <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003348:	6963      	ldr	r3, [r4, #20]
 800334a:	07d9      	lsls	r1, r3, #31
 800334c:	d4eb      	bmi.n	8003326 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7ff fab3 	bl	80028b8 <HAL_GetTick>
 8003352:	eba0 0009 	sub.w	r0, r0, r9
 8003356:	4582      	cmp	sl, r0
 8003358:	f4ff af79 	bcc.w	800324e <I2C_RequestMemoryRead+0xbe>
 800335c:	f1ba 0f00 	cmp.w	sl, #0
 8003360:	f43f af75 	beq.w	800324e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003364:	6834      	ldr	r4, [r6, #0]
 8003366:	e7d8      	b.n	800331a <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003368:	6963      	ldr	r3, [r4, #20]
 800336a:	061a      	lsls	r2, r3, #24
 800336c:	d4af      	bmi.n	80032ce <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336e:	6963      	ldr	r3, [r4, #20]
 8003370:	055d      	lsls	r5, r3, #21
 8003372:	f53f af47 	bmi.w	8003204 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7ff fa9f 	bl	80028b8 <HAL_GetTick>
 800337a:	eba0 0009 	sub.w	r0, r0, r9
 800337e:	4582      	cmp	sl, r0
 8003380:	d34c      	bcc.n	800341c <I2C_RequestMemoryRead+0x28c>
 8003382:	f1ba 0f00 	cmp.w	sl, #0
 8003386:	d049      	beq.n	800341c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003388:	6834      	ldr	r4, [r6, #0]
 800338a:	e731      	b.n	80031f0 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338c:	6963      	ldr	r3, [r4, #20]
 800338e:	43db      	mvns	r3, r3
 8003390:	f013 0302 	ands.w	r3, r3, #2
 8003394:	d0d6      	beq.n	8003344 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003396:	6963      	ldr	r3, [r4, #20]
 8003398:	055a      	lsls	r2, r3, #21
 800339a:	f53f af70 	bmi.w	800327e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7ff fa8b 	bl	80028b8 <HAL_GetTick>
 80033a2:	eba0 0009 	sub.w	r0, r0, r9
 80033a6:	4582      	cmp	sl, r0
 80033a8:	d316      	bcc.n	80033d8 <I2C_RequestMemoryRead+0x248>
 80033aa:	f1ba 0f00 	cmp.w	sl, #0
 80033ae:	d013      	beq.n	80033d8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b0:	6834      	ldr	r4, [r6, #0]
 80033b2:	e7bb      	b.n	800332c <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b4:	6963      	ldr	r3, [r4, #20]
 80033b6:	061d      	lsls	r5, r3, #24
 80033b8:	d4ab      	bmi.n	8003312 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	055a      	lsls	r2, r3, #21
 80033be:	f53f af21 	bmi.w	8003204 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7ff fa79 	bl	80028b8 <HAL_GetTick>
 80033c6:	eba0 0009 	sub.w	r0, r0, r9
 80033ca:	4582      	cmp	sl, r0
 80033cc:	d326      	bcc.n	800341c <I2C_RequestMemoryRead+0x28c>
 80033ce:	f1ba 0f00 	cmp.w	sl, #0
 80033d2:	d023      	beq.n	800341c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	6834      	ldr	r4, [r6, #0]
 80033d6:	e77f      	b.n	80032d8 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033dc:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033de:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033e8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	f043 0320 	orr.w	r3, r3, #32
 80033f0:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e71a      	b.n	800322c <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f6:	6963      	ldr	r3, [r4, #20]
 80033f8:	0619      	lsls	r1, r3, #24
 80033fa:	f53f af6b 	bmi.w	80032d4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fe:	6963      	ldr	r3, [r4, #20]
 8003400:	055b      	lsls	r3, r3, #21
 8003402:	f53f aeff 	bmi.w	8003204 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7ff fa57 	bl	80028b8 <HAL_GetTick>
 800340a:	eba0 0009 	sub.w	r0, r0, r9
 800340e:	4582      	cmp	sl, r0
 8003410:	d304      	bcc.n	800341c <I2C_RequestMemoryRead+0x28c>
 8003412:	f1ba 0f00 	cmp.w	sl, #0
 8003416:	d001      	beq.n	800341c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003418:	6834      	ldr	r4, [r6, #0]
 800341a:	e769      	b.n	80032f0 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800341c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800341e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003420:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003422:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003426:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800342c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	f043 0320 	orr.w	r3, r3, #32
 8003434:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003436:	e6f5      	b.n	8003224 <I2C_RequestMemoryRead+0x94>

08003438 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003438:	2800      	cmp	r0, #0
 800343a:	f000 80b9 	beq.w	80035b0 <HAL_I2C_Init+0x178>
{
 800343e:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003440:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003444:	4604      	mov	r4, r0
 8003446:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8098 	beq.w	8003580 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8003450:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003470:	f001 fd22 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	494f      	ldr	r1, [pc, #316]	; (80035b4 <HAL_I2C_Init+0x17c>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d84f      	bhi.n	800351c <HAL_I2C_Init+0xe4>
 800347c:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <HAL_I2C_Init+0x180>)
 800347e:	4290      	cmp	r0, r2
 8003480:	d97c      	bls.n	800357c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003482:	4d4e      	ldr	r5, [pc, #312]	; (80035bc <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8003486:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800348a:	1e43      	subs	r3, r0, #1
 800348c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003490:	6822      	ldr	r2, [r4, #0]
 8003492:	6850      	ldr	r0, [r2, #4]
 8003494:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003498:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800349c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800349e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a0:	f101 0c01 	add.w	ip, r1, #1
 80034a4:	6a11      	ldr	r1, [r2, #32]
 80034a6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80034aa:	ea41 010c 	orr.w	r1, r1, ip
 80034ae:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034b0:	69d1      	ldr	r1, [r2, #28]
 80034b2:	f640 7efc 	movw	lr, #4092	; 0xffc
 80034b6:	3301      	adds	r3, #1
 80034b8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80034bc:	ea13 0f0e 	tst.w	r3, lr
 80034c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034c4:	d161      	bne.n	800358a <HAL_I2C_Init+0x152>
 80034c6:	2304      	movs	r3, #4
 80034c8:	430b      	orrs	r3, r1
 80034ca:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034cc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80034d0:	6811      	ldr	r1, [r2, #0]
 80034d2:	4303      	orrs	r3, r0
 80034d4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80034d8:	430b      	orrs	r3, r1
 80034da:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034dc:	6891      	ldr	r1, [r2, #8]
 80034de:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80034e2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80034e6:	4303      	orrs	r3, r0
 80034e8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80034f4:	68d1      	ldr	r1, [r2, #12]
 80034f6:	4303      	orrs	r3, r0
 80034f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003500:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003502:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8003504:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8003508:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800350a:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003512:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8003518:	4618      	mov	r0, r3
}
 800351a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351c:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <HAL_I2C_Init+0x188>)
 800351e:	4290      	cmp	r0, r2
 8003520:	d92c      	bls.n	800357c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003522:	4d26      	ldr	r5, [pc, #152]	; (80035bc <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003524:	4e27      	ldr	r6, [pc, #156]	; (80035c4 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003526:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	6855      	ldr	r5, [r2, #4]
 800352e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003532:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8003536:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003538:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003540:	fb05 f101 	mul.w	r1, r5, r1
 8003544:	fba6 5101 	umull	r5, r1, r6, r1
 8003548:	6a15      	ldr	r5, [r2, #32]
 800354a:	0989      	lsrs	r1, r1, #6
 800354c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003550:	3101      	adds	r1, #1
 8003552:	4329      	orrs	r1, r5
 8003554:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003556:	69d1      	ldr	r1, [r2, #28]
 8003558:	68a5      	ldr	r5, [r4, #8]
 800355a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800355e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003562:	b9ad      	cbnz	r5, 8003590 <HAL_I2C_Init+0x158>
 8003564:	3801      	subs	r0, #1
 8003566:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	b1d3      	cbz	r3, 80035ac <HAL_I2C_Init+0x174>
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	e7a5      	b.n	80034c8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
}
 800357e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003580:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003584:	f7fe ff44 	bl	8002410 <HAL_I2C_MspInit>
 8003588:	e762      	b.n	8003450 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	e79b      	b.n	80034c8 <HAL_I2C_Init+0x90>
 8003590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003594:	3801      	subs	r0, #1
 8003596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	b113      	cbz	r3, 80035ac <HAL_I2C_Init+0x174>
 80035a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035aa:	e78d      	b.n	80034c8 <HAL_I2C_Init+0x90>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e78b      	b.n	80034c8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80035b0:	2001      	movs	r0, #1
}
 80035b2:	4770      	bx	lr
 80035b4:	000186a0 	.word	0x000186a0
 80035b8:	001e847f 	.word	0x001e847f
 80035bc:	431bde83 	.word	0x431bde83
 80035c0:	003d08ff 	.word	0x003d08ff
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <HAL_I2C_Mem_Write>:
{
 80035c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035cc:	4604      	mov	r4, r0
 80035ce:	b083      	sub	sp, #12
 80035d0:	4699      	mov	r9, r3
 80035d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80035d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80035d8:	460f      	mov	r7, r1
 80035da:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff f96c 	bl	80028b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d004      	beq.n	80035f2 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80035e8:	2702      	movs	r7, #2
}
 80035ea:	4638      	mov	r0, r7
 80035ec:	b003      	add	sp, #12
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f2:	4605      	mov	r5, r0
 80035f4:	e005      	b.n	8003602 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7ff f95f 	bl	80028b8 <HAL_GetTick>
 80035fa:	1b40      	subs	r0, r0, r5
 80035fc:	2819      	cmp	r0, #25
 80035fe:	f200 80aa 	bhi.w	8003756 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	6983      	ldr	r3, [r0, #24]
 8003606:	ea6f 0c03 	mvn.w	ip, r3
 800360a:	f01c 0b02 	ands.w	fp, ip, #2
 800360e:	d0f2      	beq.n	80035f6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8003610:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d0e7      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x20>
 8003618:	2301      	movs	r3, #1
 800361a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361e:	6803      	ldr	r3, [r0, #0]
 8003620:	07db      	lsls	r3, r3, #31
 8003622:	d571      	bpl.n	8003708 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003624:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003626:	6807      	ldr	r7, [r0, #0]
 8003628:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 800362c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800362e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003630:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003632:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003634:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003638:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363c:	2040      	movs	r0, #64	; 0x40
 800363e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003642:	2000      	movs	r0, #0
 8003644:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003646:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800364c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364e:	4857      	ldr	r0, [pc, #348]	; (80037ac <HAL_I2C_Mem_Write+0x1e4>)
 8003650:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003652:	464b      	mov	r3, r9
 8003654:	4642      	mov	r2, r8
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff fca4 	bl	8002fa4 <I2C_RequestMemoryWrite>
 800365c:	4607      	mov	r7, r0
 800365e:	b9f8      	cbnz	r0, 80036a0 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 8003660:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80a0 	beq.w	80037a8 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	1c72      	adds	r2, r6, #1
 800366c:	d158      	bne.n	8003720 <HAL_I2C_Mem_Write+0x158>
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	0610      	lsls	r0, r2, #24
 8003672:	d41a      	bmi.n	80036aa <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	0551      	lsls	r1, r2, #21
 8003678:	d5f9      	bpl.n	800366e <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003684:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003690:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d038      	beq.n	8003712 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 80036a0:	2701      	movs	r7, #1
}
 80036a2:	4638      	mov	r0, r7
 80036a4:	b003      	add	sp, #12
 80036a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036aa:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80036ae:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b2:	4661      	mov	r1, ip
      hi2c->XferSize--;
 80036b4:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036bc:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80036be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80036c0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036c2:	3a01      	subs	r2, #1
 80036c4:	b292      	uxth	r2, r2
 80036c6:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036c8:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ca:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80036cc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ce:	0740      	lsls	r0, r0, #29
 80036d0:	d517      	bpl.n	8003702 <HAL_I2C_Mem_Write+0x13a>
 80036d2:	b942      	cbnz	r2, 80036e6 <HAL_I2C_Mem_Write+0x11e>
 80036d4:	1c72      	adds	r2, r6, #1
 80036d6:	d159      	bne.n	800378c <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	0750      	lsls	r0, r2, #29
 80036dc:	d449      	bmi.n	8003772 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	0551      	lsls	r1, r2, #21
 80036e2:	d5f9      	bpl.n	80036d8 <HAL_I2C_Mem_Write+0x110>
 80036e4:	e7c9      	b.n	800367a <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80036ea:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 80036ec:	f10c 0102 	add.w	r1, ip, #2
 80036f0:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80036f2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80036f4:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 80036f8:	3901      	subs	r1, #1
        hi2c->XferSize--;
 80036fa:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80036fc:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 80036fe:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003700:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003702:	2a00      	cmp	r2, #0
 8003704:	d1b1      	bne.n	800366a <HAL_I2C_Mem_Write+0xa2>
 8003706:	e7e5      	b.n	80036d4 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 8003708:	6803      	ldr	r3, [r0, #0]
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6003      	str	r3, [r0, #0]
 8003710:	e788      	b.n	8003624 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800371a:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e764      	b.n	80035ea <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	0612      	lsls	r2, r2, #24
 8003724:	d4c1      	bmi.n	80036aa <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	0551      	lsls	r1, r2, #21
 800372a:	d4a6      	bmi.n	800367a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7ff f8c4 	bl	80028b8 <HAL_GetTick>
 8003730:	1b40      	subs	r0, r0, r5
 8003732:	4286      	cmp	r6, r0
 8003734:	d301      	bcc.n	800373a <HAL_I2C_Mem_Write+0x172>
 8003736:	2e00      	cmp	r6, #0
 8003738:	d196      	bne.n	8003668 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800373a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800373c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800373e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003740:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003744:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800374a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	f043 0320 	orr.w	r3, r3, #32
 8003752:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003754:	e7a1      	b.n	800369a <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003756:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003758:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800375c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003760:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003766:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800376a:	f043 0320 	orr.w	r3, r3, #32
 800376e:	6423      	str	r3, [r4, #64]	; 0x40
 8003770:	e73a      	b.n	80035e8 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003782:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800378a:	e72e      	b.n	80035ea <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	0752      	lsls	r2, r2, #29
 8003790:	d4ef      	bmi.n	8003772 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	0551      	lsls	r1, r2, #21
 8003796:	f53f af70 	bmi.w	800367a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7ff f88d 	bl	80028b8 <HAL_GetTick>
 800379e:	1b40      	subs	r0, r0, r5
 80037a0:	4286      	cmp	r6, r0
 80037a2:	d3ca      	bcc.n	800373a <HAL_I2C_Mem_Write+0x172>
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	d0c8      	beq.n	800373a <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	e793      	b.n	80036d4 <HAL_I2C_Mem_Write+0x10c>
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <HAL_I2C_Mem_Read>:
{
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	4604      	mov	r4, r0
 80037b6:	b087      	sub	sp, #28
 80037b8:	4699      	mov	r9, r3
 80037ba:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80037be:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80037c0:	460f      	mov	r7, r1
 80037c2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff f878 	bl	80028b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d004      	beq.n	80037da <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80037d0:	2702      	movs	r7, #2
}
 80037d2:	4638      	mov	r0, r7
 80037d4:	b007      	add	sp, #28
 80037d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037da:	4606      	mov	r6, r0
 80037dc:	e005      	b.n	80037ea <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7ff f86b 	bl	80028b8 <HAL_GetTick>
 80037e2:	1b80      	subs	r0, r0, r6
 80037e4:	2819      	cmp	r0, #25
 80037e6:	f200 80d2 	bhi.w	800398e <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ea:	f8d4 c000 	ldr.w	ip, [r4]
 80037ee:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80037f2:	43c0      	mvns	r0, r0
 80037f4:	f010 0b02 	ands.w	fp, r0, #2
 80037f8:	d0f1      	beq.n	80037de <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80037fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d0e6      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x20>
 8003802:	2301      	movs	r3, #1
 8003804:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003808:	f8dc 3000 	ldr.w	r3, [ip]
 800380c:	07d9      	lsls	r1, r3, #31
 800380e:	d537      	bpl.n	8003880 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003810:	f8dc 0000 	ldr.w	r0, [ip]
 8003814:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003818:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 800381c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800381e:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003820:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003822:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003826:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800382a:	2040      	movs	r0, #64	; 0x40
 800382c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	2000      	movs	r0, #0
 8003832:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003834:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003838:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800383a:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383c:	4893      	ldr	r0, [pc, #588]	; (8003a8c <HAL_I2C_Mem_Read+0x2dc>)
 800383e:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003840:	4639      	mov	r1, r7
 8003842:	464b      	mov	r3, r9
 8003844:	4642      	mov	r2, r8
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff fca2 	bl	8003190 <I2C_RequestMemoryRead>
 800384c:	4607      	mov	r7, r0
 800384e:	2800      	cmp	r0, #0
 8003850:	f040 80ab 	bne.w	80039aa <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8003854:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003856:	b9d2      	cbnz	r2, 800388e <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	9002      	str	r0, [sp, #8]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	9202      	str	r2, [sp, #8]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	9202      	str	r2, [sp, #8]
 8003864:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	2220      	movs	r2, #32
 8003872:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003876:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800387e:	e7a8      	b.n	80037d2 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8003880:	f8dc 3000 	ldr.w	r3, [ip]
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	f8cc 3000 	str.w	r3, [ip]
 800388c:	e7c0      	b.n	8003810 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800388e:	2a01      	cmp	r2, #1
 8003890:	f000 812c 	beq.w	8003aec <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8003894:	2a02      	cmp	r2, #2
 8003896:	f000 80bd 	beq.w	8003a14 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	9005      	str	r0, [sp, #20]
 800389e:	6959      	ldr	r1, [r3, #20]
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	6999      	ldr	r1, [r3, #24]
 80038a4:	9105      	str	r1, [sp, #20]
 80038a6:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80038a8:	2a03      	cmp	r2, #3
 80038aa:	d849      	bhi.n	8003940 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 80038ac:	2a01      	cmp	r2, #1
 80038ae:	f000 80eb 	beq.w	8003a88 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 80038b2:	2a02      	cmp	r2, #2
 80038b4:	f000 8089 	beq.w	80039ca <HAL_I2C_Mem_Read+0x21a>
 80038b8:	1c69      	adds	r1, r5, #1
 80038ba:	f040 80bb 	bne.w	8003a34 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	0752      	lsls	r2, r2, #29
 80038c2:	d5fc      	bpl.n	80038be <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c4:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038cc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80038d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80038d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80038d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80038da:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80038dc:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80038de:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80038e0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80038e2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80038e4:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80038e6:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	f040 80af 	bne.w	8003a4c <HAL_I2C_Mem_Read+0x29c>
 80038ee:	6953      	ldr	r3, [r2, #20]
 80038f0:	075b      	lsls	r3, r3, #29
 80038f2:	d5fc      	bpl.n	80038ee <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	6913      	ldr	r3, [r2, #16]
 8003900:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003904:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003906:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 800390a:	3b01      	subs	r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8003912:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8003914:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8003918:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800391a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8003920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003922:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003924:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003926:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003928:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800392a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800392c:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800392e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003930:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003932:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003936:	2a00      	cmp	r2, #0
 8003938:	d099      	beq.n	800386e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 800393a:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393c:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 800393e:	d9b5      	bls.n	80038ac <HAL_I2C_Mem_Read+0xfc>
 8003940:	b95d      	cbnz	r5, 800395a <HAL_I2C_Mem_Read+0x1aa>
 8003942:	e0c5      	b.n	8003ad0 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	06d0      	lsls	r0, r2, #27
 8003948:	f100 80b2 	bmi.w	8003ab0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394c:	f7fe ffb4 	bl	80028b8 <HAL_GetTick>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	4285      	cmp	r5, r0
 8003954:	f0c0 8086 	bcc.w	8003a64 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	0652      	lsls	r2, r2, #25
 800395e:	d5f1      	bpl.n	8003944 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8003966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003968:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 800396a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800396c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800396e:	3b01      	subs	r3, #1
 8003970:	b29b      	uxth	r3, r3
 8003972:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003974:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8003976:	3a01      	subs	r2, #1
 8003978:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800397a:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800397e:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8003980:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003982:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003986:	d5d6      	bpl.n	8003936 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	6903      	ldr	r3, [r0, #16]
 800398a:	704b      	strb	r3, [r1, #1]
 800398c:	e036      	b.n	80039fc <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 800398e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003990:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003994:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003998:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800399e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	f043 0320 	orr.w	r3, r3, #32
 80039a6:	6423      	str	r3, [r4, #64]	; 0x40
 80039a8:	e712      	b.n	80037d0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 80039aa:	2701      	movs	r7, #1
}
 80039ac:	4638      	mov	r0, r7
 80039ae:	b007      	add	sp, #28
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	0750      	lsls	r0, r2, #29
 80039b8:	d40c      	bmi.n	80039d4 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe ff7d 	bl	80028b8 <HAL_GetTick>
 80039be:	1b80      	subs	r0, r0, r6
 80039c0:	4285      	cmp	r5, r0
 80039c2:	d34f      	bcc.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	d04d      	beq.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	1c69      	adds	r1, r5, #1
 80039cc:	d1f2      	bne.n	80039b4 <HAL_I2C_Mem_Read+0x204>
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	0752      	lsls	r2, r2, #29
 80039d2:	d5fc      	bpl.n	80039ce <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e0:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80039e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80039e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80039ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 80039f4:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 80039f8:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80039fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80039fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003a00:	3301      	adds	r3, #1
 8003a02:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003a06:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003a08:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003a0a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003a0c:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8003a0e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003a12:	e790      	b.n	8003936 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a1c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003a24:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	9004      	str	r0, [sp, #16]
 8003a28:	6959      	ldr	r1, [r3, #20]
 8003a2a:	9104      	str	r1, [sp, #16]
 8003a2c:	6999      	ldr	r1, [r3, #24]
 8003a2e:	9104      	str	r1, [sp, #16]
 8003a30:	9904      	ldr	r1, [sp, #16]
 8003a32:	e739      	b.n	80038a8 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	0750      	lsls	r0, r2, #29
 8003a38:	f53f af44 	bmi.w	80038c4 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe ff3c 	bl	80028b8 <HAL_GetTick>
 8003a40:	1b80      	subs	r0, r0, r6
 8003a42:	4285      	cmp	r5, r0
 8003a44:	d30e      	bcc.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
 8003a46:	b16d      	cbz	r5, 8003a64 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	e735      	b.n	80038b8 <HAL_I2C_Mem_Read+0x108>
 8003a4c:	6953      	ldr	r3, [r2, #20]
 8003a4e:	0758      	lsls	r0, r3, #29
 8003a50:	f53f af50 	bmi.w	80038f4 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7fe ff30 	bl	80028b8 <HAL_GetTick>
 8003a58:	1b80      	subs	r0, r0, r6
 8003a5a:	4285      	cmp	r5, r0
 8003a5c:	d302      	bcc.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	f47f af41 	bne.w	80038e6 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a64:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a66:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a68:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a6e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a74:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003a78:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
}
 8003a7e:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003a82:	b007      	add	sp, #28
 8003a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a88:	b95d      	cbnz	r5, 8003aa2 <HAL_I2C_Mem_Read+0x2f2>
 8003a8a:	e02b      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x334>
 8003a8c:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	06d2      	lsls	r2, r2, #27
 8003a94:	d40c      	bmi.n	8003ab0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe ff0f 	bl	80028b8 <HAL_GetTick>
 8003a9a:	1b80      	subs	r0, r0, r6
 8003a9c:	4285      	cmp	r5, r0
 8003a9e:	d3e1      	bcc.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	0651      	lsls	r1, r2, #25
 8003aa6:	d5f3      	bpl.n	8003a90 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003aae:	e7a5      	b.n	80039fc <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab2:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab6:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab8:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003abc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ac6:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003ac8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003acc:	2701      	movs	r7, #1
 8003ace:	e680      	b.n	80037d2 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	f53f af44 	bmi.w	8003960 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	06d1      	lsls	r1, r2, #27
 8003adc:	d4e8      	bmi.n	8003ab0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe feeb 	bl	80028b8 <HAL_GetTick>
 8003ae2:	e7bf      	b.n	8003a64 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	0650      	lsls	r0, r2, #25
 8003ae8:	d5f6      	bpl.n	8003ad8 <HAL_I2C_Mem_Read+0x328>
 8003aea:	e7dd      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003af4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	9003      	str	r0, [sp, #12]
 8003af8:	6959      	ldr	r1, [r3, #20]
 8003afa:	9103      	str	r1, [sp, #12]
 8003afc:	6999      	ldr	r1, [r3, #24]
 8003afe:	9103      	str	r1, [sp, #12]
 8003b00:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003b08:	6019      	str	r1, [r3, #0]
 8003b0a:	e6cd      	b.n	80038a8 <HAL_I2C_Mem_Read+0xf8>

08003b0c <HAL_I2C_MasterTxCpltCallback>:
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <HAL_I2C_MasterRxCpltCallback>:
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <HAL_I2C_SlaveTxCpltCallback>:
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_I2C_SlaveRxCpltCallback>:
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_I2C_AddrCallback>:
}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <HAL_I2C_ListenCpltCallback>:
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_I2C_MemTxCpltCallback>:
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b28:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8003b2c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003b2e:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003b30:	b959      	cbnz	r1, 8003b4a <I2C_MemoryTransmit_TXE_BTF+0x22>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b32:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b34:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b36:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b38:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b3a:	d00d      	beq.n	8003b58 <I2C_MemoryTransmit_TXE_BTF+0x30>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b40:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8003b42:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003b44:	3201      	adds	r2, #1
 8003b46:	6502      	str	r2, [r0, #80]	; 0x50
 8003b48:	4770      	bx	lr
  else if (hi2c->EventCount == 1U)
 8003b4a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003b4c:	2901      	cmp	r1, #1
 8003b4e:	d009      	beq.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x3c>
  else if (hi2c->EventCount == 2U)
 8003b50:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003b52:	2902      	cmp	r1, #2
 8003b54:	d00e      	beq.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 8003b56:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8003b5c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003b5e:	3202      	adds	r2, #2
 8003b60:	6502      	str	r2, [r0, #80]	; 0x50
 8003b62:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b64:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003b66:	6801      	ldr	r1, [r0, #0]
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8003b6c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003b6e:	3201      	adds	r2, #1
 8003b70:	6502      	str	r2, [r0, #80]	; 0x50
 8003b72:	4770      	bx	lr
 8003b74:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b76:	2a22      	cmp	r2, #34	; 0x22
 8003b78:	d01f      	beq.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b7a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003b7c:	b289      	uxth	r1, r1
 8003b7e:	b9c1      	cbnz	r1, 8003bb2 <I2C_MemoryTransmit_TXE_BTF+0x8a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b80:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003b82:	b289      	uxth	r1, r1
 8003b84:	2900      	cmp	r1, #0
 8003b86:	d1e6      	bne.n	8003b56 <I2C_MemoryTransmit_TXE_BTF+0x2e>
 8003b88:	2a21      	cmp	r2, #33	; 0x21
 8003b8a:	d1e4      	bne.n	8003b56 <I2C_MemoryTransmit_TXE_BTF+0x2e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8c:	6802      	ldr	r2, [r0, #0]
{
 8003b8e:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b90:	6854      	ldr	r4, [r2, #4]
 8003b92:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003b96:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	6814      	ldr	r4, [r2, #0]
 8003b9a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8003b9e:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ba2:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bac:	f7ff ffba 	bl	8003b24 <HAL_I2C_MemTxCpltCallback>
}
 8003bb0:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb2:	2a21      	cmp	r2, #33	; 0x21
 8003bb4:	d00a      	beq.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bba:	6801      	ldr	r1, [r0, #0]
 8003bbc:	680a      	ldr	r2, [r1, #0]
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc2:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8003bc4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003bc6:	3201      	adds	r2, #1
 8003bc8:	6502      	str	r2, [r0, #80]	; 0x50
 8003bca:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bcc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003bce:	6802      	ldr	r2, [r0, #0]
 8003bd0:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003bd4:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003bd6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bd8:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop

08003be4 <HAL_I2C_MemRxCpltCallback>:
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop

08003be8 <HAL_I2C_ErrorCallback>:
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop

08003bec <HAL_I2C_AbortCpltCallback>:
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <I2C_DMAAbort>:
{
 8003bf0:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bf2:	4b3a      	ldr	r3, [pc, #232]	; (8003cdc <I2C_DMAAbort+0xec>)
 8003bf4:	493a      	ldr	r1, [pc, #232]	; (8003ce0 <I2C_DMAAbort+0xf0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bf8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003bfa:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bfc:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 8003bfe:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c00:	fba1 1303 	umull	r1, r3, r1, r3
  __IO uint32_t count = 0U;
 8003c04:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c06:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c08:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c0c:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c16:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	e005      	b.n	8003c28 <I2C_DMAAbort+0x38>
    count--;
 8003c1c:	9b01      	ldr	r3, [sp, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	059b      	lsls	r3, r3, #22
 8003c26:	d506      	bpl.n	8003c36 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f6      	bne.n	8003c1c <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c30:	f043 0320 	orr.w	r3, r3, #32
 8003c34:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003c36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003c38:	b34c      	cbz	r4, 8003c8e <I2C_DMAAbort+0x9e>
  if (hi2c->hdmarx != NULL)
 8003c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8003c40:	b1f3      	cbz	r3, 8003c80 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c44:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003c4a:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8003c4c:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c4e:	6525      	str	r5, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c50:	2400      	movs	r4, #0
 8003c52:	651c      	str	r4, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d02a      	beq.n	8003cba <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c64:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003c68:	2928      	cmp	r1, #40	; 0x28
 8003c6a:	d019      	beq.n	8003ca0 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c78:	f7ff ffb6 	bl	8003be8 <HAL_I2C_ErrorCallback>
}
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c80:	6815      	ldr	r5, [r2, #0]
 8003c82:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003c86:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003c88:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c8a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8003c8c:	e7e2      	b.n	8003c54 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8003c8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c90:	b1f3      	cbz	r3, 8003cd0 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c94:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003c9a:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003c9c:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003c9e:	e7d7      	b.n	8003c50 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb0:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cb4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003cb8:	e7de      	b.n	8003c78 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cba:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cc2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cc6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cc8:	f7ff ff90 	bl	8003bec <HAL_I2C_AbortCpltCallback>
}
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd0:	6814      	ldr	r4, [r2, #0]
 8003cd2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003cd6:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003cd8:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003cda:	e7bb      	b.n	8003c54 <I2C_DMAAbort+0x64>
 8003cdc:	20000030 	.word	0x20000030
 8003ce0:	14f8b589 	.word	0x14f8b589

08003ce4 <I2C_ITError>:
{
 8003ce4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cea:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cee:	2b10      	cmp	r3, #16
{
 8003cf0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf2:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cf4:	d039      	beq.n	8003d6a <I2C_ITError+0x86>
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	2940      	cmp	r1, #64	; 0x40
 8003cfa:	d036      	beq.n	8003d6a <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfc:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003d00:	2928      	cmp	r1, #40	; 0x28
 8003d02:	d03d      	beq.n	8003d80 <I2C_ITError+0x9c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d04:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	0508      	lsls	r0, r1, #20
 8003d0a:	d407      	bmi.n	8003d1c <I2C_ITError+0x38>
 8003d0c:	2a60      	cmp	r2, #96	; 0x60
 8003d0e:	d005      	beq.n	8003d1c <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003d26:	d134      	bne.n	8003d92 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d28:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003d2c:	2960      	cmp	r1, #96	; 0x60
 8003d2e:	d075      	beq.n	8003e1c <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	0650      	lsls	r0, r2, #25
 8003d34:	d505      	bpl.n	8003d42 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff ff50 	bl	8003be8 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d4a:	0719      	lsls	r1, r3, #28
 8003d4c:	d004      	beq.n	8003d58 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	6853      	ldr	r3, [r2, #4]
 8003d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d56:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003d58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d5e:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8003d60:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d62:	d501      	bpl.n	8003d68 <I2C_ITError+0x84>
 8003d64:	2b28      	cmp	r3, #40	; 0x28
 8003d66:	d02f      	beq.n	8003dc8 <I2C_ITError+0xe4>
}
 8003d68:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d6a:	2a22      	cmp	r2, #34	; 0x22
 8003d6c:	d1c6      	bne.n	8003cfc <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	0512      	lsls	r2, r2, #20
 8003d7c:	d5c8      	bpl.n	8003d10 <I2C_ITError+0x2c>
 8003d7e:	e7cd      	b.n	8003d1c <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d84:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d86:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003d90:	d0ca      	beq.n	8003d28 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d92:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d94:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d01e      	beq.n	8003de2 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <I2C_ITError+0x164>)
 8003da6:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003da8:	f7fe feee 	bl	8002b88 <HAL_DMA_Abort_IT>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d0cb      	beq.n	8003d48 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8003db0:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003db2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003db4:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003dc4:	4798      	blx	r3
 8003dc6:	e7bf      	b.n	8003d48 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dca:	4920      	ldr	r1, [pc, #128]	; (8003e4c <I2C_ITError+0x168>)
 8003dcc:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dce:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd0:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dd2:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ddc:	f7ff fea0 	bl	8003b20 <HAL_I2C_ListenCpltCallback>
}
 8003de0:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003de2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <I2C_ITError+0x164>)
 8003de6:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003de8:	f7fe fece 	bl	8002b88 <HAL_DMA_Abort_IT>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d0ab      	beq.n	8003d48 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	0651      	lsls	r1, r2, #25
 8003df6:	d506      	bpl.n	8003e06 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8003dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003e00:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003e02:	3201      	adds	r2, #1
 8003e04:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003e06:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003e10:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003e18:	4798      	blx	r3
 8003e1a:	e795      	b.n	8003d48 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e22:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	0652      	lsls	r2, r2, #25
 8003e28:	d506      	bpl.n	8003e38 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003e32:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8003e34:	3201      	adds	r2, #1
 8003e36:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e3e:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003e40:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e42:	f7ff fed3 	bl	8003bec <HAL_I2C_AbortCpltCallback>
 8003e46:	e77f      	b.n	8003d48 <I2C_ITError+0x64>
 8003e48:	08003bf1 	.word	0x08003bf1
 8003e4c:	ffff0000 	.word	0xffff0000

08003e50 <HAL_I2C_EV_IRQHandler>:
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e52:	6803      	ldr	r3, [r0, #0]
{
 8003e54:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e56:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e58:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e5a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e5e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e62:	2910      	cmp	r1, #16
{
 8003e64:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e66:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e68:	fa5f fc81 	uxtb.w	ip, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e6c:	d024      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x68>
 8003e6e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8003e72:	d021      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x68>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e76:	2900      	cmp	r1, #0
 8003e78:	f000 8096 	beq.w	8003fa8 <HAL_I2C_EV_IRQHandler+0x158>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e7c:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8003e7e:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e80:	f011 0f02 	tst.w	r1, #2
 8003e84:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8003e88:	d059      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0xee>
 8003e8a:	0586      	lsls	r6, r0, #22
 8003e8c:	d559      	bpl.n	8003f42 <HAL_I2C_EV_IRQHandler+0xf2>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e90:	b102      	cbz	r2, 8003e94 <HAL_I2C_EV_IRQHandler+0x44>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e92:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e94:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e98:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003e9c:	2a28      	cmp	r2, #40	; 0x28
 8003e9e:	f000 821f 	beq.w	80042e0 <HAL_I2C_EV_IRQHandler+0x490>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	920c      	str	r2, [sp, #48]	; 0x30
 8003ea6:	6959      	ldr	r1, [r3, #20]
 8003ea8:	910c      	str	r1, [sp, #48]	; 0x30
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	930c      	str	r3, [sp, #48]	; 0x30
 8003eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003eb0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8003eb4:	b00e      	add	sp, #56	; 0x38
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb8:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eba:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003ebc:	f011 0f01 	tst.w	r1, #1
 8003ec0:	d11a      	bne.n	8003ef8 <HAL_I2C_EV_IRQHandler+0xa8>
 8003ec2:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8003ec6:	d0f5      	beq.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 8003ec8:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8003ecc:	d0f2      	beq.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ece:	070d      	lsls	r5, r1, #28
 8003ed0:	d56d      	bpl.n	8003fae <HAL_I2C_EV_IRQHandler+0x15e>
 8003ed2:	0585      	lsls	r5, r0, #22
 8003ed4:	f140 8083 	bpl.w	8003fde <HAL_I2C_EV_IRQHandler+0x18e>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ed8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003edc:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ede:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	f000 81e4 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x45e>
 8003ee6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	f000 81e0 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x45e>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e7dd      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef8:	0585      	lsls	r5, r0, #22
 8003efa:	d56e      	bpl.n	8003fda <HAL_I2C_EV_IRQHandler+0x18a>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003efe:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003f02:	f000 81ea 	beq.w	80042da <HAL_I2C_EV_IRQHandler+0x48a>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f08:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f0c:	bf04      	itt	eq
 8003f0e:	2208      	moveq	r2, #8
 8003f10:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f12:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003f16:	2a40      	cmp	r2, #64	; 0x40
 8003f18:	f000 81d8 	beq.w	80042cc <HAL_I2C_EV_IRQHandler+0x47c>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f1c:	6922      	ldr	r2, [r4, #16]
 8003f1e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003f22:	f000 81b3 	beq.w	800428c <HAL_I2C_EV_IRQHandler+0x43c>
      if (hi2c->EventCount == 0U)
 8003f26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	f040 81ef 	bne.w	800430c <HAL_I2C_EV_IRQHandler+0x4bc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f30:	11d2      	asrs	r2, r2, #7
 8003f32:	f002 0206 	and.w	r2, r2, #6
 8003f36:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003f3a:	611a      	str	r2, [r3, #16]
 8003f3c:	e7ba      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3e:	06cd      	lsls	r5, r1, #27
 8003f40:	d47c      	bmi.n	800403c <HAL_I2C_EV_IRQHandler+0x1ec>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f42:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003f46:	2a21      	cmp	r2, #33	; 0x21
 8003f48:	f000 80f5 	beq.w	8004136 <HAL_I2C_EV_IRQHandler+0x2e6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f4c:	064e      	lsls	r6, r1, #25
 8003f4e:	f140 8132 	bpl.w	80041b6 <HAL_I2C_EV_IRQHandler+0x366>
 8003f52:	0545      	lsls	r5, r0, #21
 8003f54:	f140 812f 	bpl.w	80041b6 <HAL_I2C_EV_IRQHandler+0x366>
 8003f58:	0749      	lsls	r1, r1, #29
 8003f5a:	f100 812f 	bmi.w	80041bc <HAL_I2C_EV_IRQHandler+0x36c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f5e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003f62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f64:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f66:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d0a3      	beq.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003f7e:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f80:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003f82:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d195      	bne.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 8003f88:	292a      	cmp	r1, #42	; 0x2a
 8003f8a:	d193      	bne.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f90:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f92:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f98:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f9a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f9c:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f9e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fa2:	f7ff fdb9 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
 8003fa6:	e785      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fa8:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003faa:	6959      	ldr	r1, [r3, #20]
 8003fac:	e768      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x30>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fae:	078d      	lsls	r5, r1, #30
 8003fb0:	d515      	bpl.n	8003fde <HAL_I2C_EV_IRQHandler+0x18e>
 8003fb2:	0585      	lsls	r5, r0, #22
 8003fb4:	d513      	bpl.n	8003fde <HAL_I2C_EV_IRQHandler+0x18e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fb6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fbc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fbe:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003fc2:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fc4:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fc6:	f000 81b3 	beq.w	8004330 <HAL_I2C_EV_IRQHandler+0x4e0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8003fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fd8:	e76c      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fda:	070d      	lsls	r5, r1, #28
 8003fdc:	d5e7      	bpl.n	8003fae <HAL_I2C_EV_IRQHandler+0x15e>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fde:	0775      	lsls	r5, r6, #29
 8003fe0:	f140 80f5 	bpl.w	80041ce <HAL_I2C_EV_IRQHandler+0x37e>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fe4:	685d      	ldr	r5, [r3, #4]
 8003fe6:	052e      	lsls	r6, r5, #20
 8003fe8:	f53f af64 	bmi.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fec:	060d      	lsls	r5, r1, #24
 8003fee:	f140 8115 	bpl.w	800421c <HAL_I2C_EV_IRQHandler+0x3cc>
 8003ff2:	0546      	lsls	r6, r0, #21
 8003ff4:	f140 8112 	bpl.w	800421c <HAL_I2C_EV_IRQHandler+0x3cc>
 8003ff8:	074d      	lsls	r5, r1, #29
 8003ffa:	f100 8112 	bmi.w	8004222 <HAL_I2C_EV_IRQHandler+0x3d2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ffe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004002:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004004:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004008:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800400c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800400e:	2800      	cmp	r0, #0
 8004010:	f040 823b 	bne.w	800448a <HAL_I2C_EV_IRQHandler+0x63a>
 8004014:	2a21      	cmp	r2, #33	; 0x21
 8004016:	f000 8341 	beq.w	800469c <HAL_I2C_EV_IRQHandler+0x84c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800401a:	2940      	cmp	r1, #64	; 0x40
 800401c:	f47f af4a 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004020:	2a22      	cmp	r2, #34	; 0x22
 8004022:	f47f af47 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount == 0U)
 8004026:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004028:	b292      	uxth	r2, r2
 800402a:	2a00      	cmp	r2, #0
 800402c:	f000 8270 	beq.w	8004510 <HAL_I2C_EV_IRQHandler+0x6c0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004030:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004034:	2a40      	cmp	r2, #64	; 0x40
 8004036:	f040 80b4 	bne.w	80041a2 <HAL_I2C_EV_IRQHandler+0x352>
 800403a:	e0fc      	b.n	8004236 <HAL_I2C_EV_IRQHandler+0x3e6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403c:	0585      	lsls	r5, r0, #22
 800403e:	d580      	bpl.n	8003f42 <HAL_I2C_EV_IRQHandler+0xf2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004040:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800404c:	960d      	str	r6, [sp, #52]	; 0x34
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	920d      	str	r2, [sp, #52]	; 0x34
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004068:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800406a:	d521      	bpl.n	80040b0 <HAL_I2C_EV_IRQHandler+0x260>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800406c:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8004070:	2a22      	cmp	r2, #34	; 0x22
 8004072:	f000 817a 	beq.w	800436a <HAL_I2C_EV_IRQHandler+0x51a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004076:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004078:	6802      	ldr	r2, [r0, #0]
 800407a:	6852      	ldr	r2, [r2, #4]
 800407c:	b292      	uxth	r2, r2
 800407e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004080:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004082:	b292      	uxth	r2, r2
 8004084:	b11a      	cbz	r2, 800408e <HAL_I2C_EV_IRQHandler+0x23e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004086:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004088:	f042 0204 	orr.w	r2, r2, #4
 800408c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004094:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004096:	f7fe fe79 	bl	8002d8c <HAL_DMA_GetState>
 800409a:	2801      	cmp	r0, #1
 800409c:	d008      	beq.n	80040b0 <HAL_I2C_EV_IRQHandler+0x260>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800409e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040a0:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_I2C_EV_IRQHandler+0x4b8>)
 80040a2:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040a4:	f7fe fd70 	bl	8002b88 <HAL_DMA_Abort_IT>
 80040a8:	b110      	cbz	r0, 80040b0 <HAL_I2C_EV_IRQHandler+0x260>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040ae:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80040b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b313      	cbz	r3, 80040fc <HAL_I2C_EV_IRQHandler+0x2ac>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	0752      	lsls	r2, r2, #29
 80040bc:	d50a      	bpl.n	80040d4 <HAL_I2C_EV_IRQHandler+0x284>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80040c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80040c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040c8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80040ca:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 80040cc:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ce:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80040d0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040d2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	0656      	lsls	r6, r2, #25
 80040d8:	d509      	bpl.n	80040ee <HAL_I2C_EV_IRQHandler+0x29e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80040e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80040e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040e4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80040e6:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80040e8:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80040ea:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80040ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b11b      	cbz	r3, 80040fc <HAL_I2C_EV_IRQHandler+0x2ac>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 80de 	bne.w	80042c0 <HAL_I2C_EV_IRQHandler+0x470>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004104:	2d2a      	cmp	r5, #42	; 0x2a
 8004106:	f000 8151 	beq.w	80043ac <HAL_I2C_EV_IRQHandler+0x55c>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800410a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800410e:	2b28      	cmp	r3, #40	; 0x28
 8004110:	f000 8154 	beq.w	80043bc <HAL_I2C_EV_IRQHandler+0x56c>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004116:	2b22      	cmp	r3, #34	; 0x22
 8004118:	d002      	beq.n	8004120 <HAL_I2C_EV_IRQHandler+0x2d0>
 800411a:	2d22      	cmp	r5, #34	; 0x22
 800411c:	f47f aeca 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004122:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004124:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004126:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8004128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004130:	f7ff fcf2 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
 8004134:	e6be      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004136:	060d      	lsls	r5, r1, #24
 8004138:	d528      	bpl.n	800418c <HAL_I2C_EV_IRQHandler+0x33c>
 800413a:	0546      	lsls	r6, r0, #21
 800413c:	d526      	bpl.n	800418c <HAL_I2C_EV_IRQHandler+0x33c>
 800413e:	074d      	lsls	r5, r1, #29
 8004140:	d427      	bmi.n	8004192 <HAL_I2C_EV_IRQHandler+0x342>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004142:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8004146:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004148:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800414a:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800414c:	2900      	cmp	r1, #0
 800414e:	f43f aeb1 	beq.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004152:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004154:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004158:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800415a:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800415c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800415e:	3901      	subs	r1, #1
 8004160:	b289      	uxth	r1, r1
 8004162:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004164:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004166:	b289      	uxth	r1, r1
 8004168:	2900      	cmp	r1, #0
 800416a:	f47f aea3 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 800416e:	2829      	cmp	r0, #41	; 0x29
 8004170:	f47f aea0 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004174:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004176:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004178:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800417c:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800417e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004180:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004182:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004186:	f7ff fcc5 	bl	8003b14 <HAL_I2C_SlaveTxCpltCallback>
 800418a:	e693      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418c:	0749      	lsls	r1, r1, #29
 800418e:	f57f ae91 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 8004192:	0582      	lsls	r2, r0, #22
 8004194:	f57f ae8e 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 8004198:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800419a:	b292      	uxth	r2, r2
 800419c:	2a00      	cmp	r2, #0
 800419e:	f43f ae89 	beq.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80041a8:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80041aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80041ac:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041b4:	e67e      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b6:	074a      	lsls	r2, r1, #29
 80041b8:	f57f ae7c 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 80041bc:	0586      	lsls	r6, r0, #22
 80041be:	f57f ae79 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 80041c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041c4:	b292      	uxth	r2, r2
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	f43f ae74 	beq.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 80041cc:	e01b      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x3b6>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	0515      	lsls	r5, r2, #20
 80041d2:	f53f ae6f 	bmi.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041d6:	064a      	lsls	r2, r1, #25
 80041d8:	d433      	bmi.n	8004242 <HAL_I2C_EV_IRQHandler+0x3f2>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041da:	0749      	lsls	r1, r1, #29
 80041dc:	f57f ae6a 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 80041e0:	0582      	lsls	r2, r0, #22
 80041e2:	f57f ae67 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80041e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041ea:	b292      	uxth	r2, r2
 80041ec:	2a04      	cmp	r2, #4
 80041ee:	f000 8119 	beq.w	8004424 <HAL_I2C_EV_IRQHandler+0x5d4>
  else if (hi2c->XferCount == 3U)
 80041f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041f4:	b292      	uxth	r2, r2
 80041f6:	2a03      	cmp	r2, #3
 80041f8:	f000 8159 	beq.w	80044ae <HAL_I2C_EV_IRQHandler+0x65e>
  else if (hi2c->XferCount == 2U)
 80041fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041fe:	b292      	uxth	r2, r2
 8004200:	2a02      	cmp	r2, #2
 8004202:	f000 818a 	beq.w	800451a <HAL_I2C_EV_IRQHandler+0x6ca>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 800420c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800420e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004210:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8004212:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8004214:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8004216:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004218:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 800421a:	e64b      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421c:	0749      	lsls	r1, r1, #29
 800421e:	f57f ae49 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 8004222:	0586      	lsls	r6, r0, #22
 8004224:	f57f ae46 	bpl.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004228:	2a21      	cmp	r2, #33	; 0x21
 800422a:	f000 8103 	beq.w	8004434 <HAL_I2C_EV_IRQHandler+0x5e4>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800422e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8004232:	f47f ae3f 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004236:	4620      	mov	r0, r4
}
 8004238:	b00e      	add	sp, #56	; 0x38
 800423a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800423e:	f7ff bc73 	b.w	8003b28 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004242:	0546      	lsls	r6, r0, #21
 8004244:	d5c9      	bpl.n	80041da <HAL_I2C_EV_IRQHandler+0x38a>
 8004246:	074d      	lsls	r5, r1, #29
 8004248:	f3c1 0280 	ubfx	r2, r1, #2, #1
 800424c:	d4c8      	bmi.n	80041e0 <HAL_I2C_EV_IRQHandler+0x390>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800424e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004252:	2922      	cmp	r1, #34	; 0x22
 8004254:	f47f ae2e 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    tmp = hi2c->XferCount;
 8004258:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800425a:	b289      	uxth	r1, r1
    if (tmp > 3U)
 800425c:	2903      	cmp	r1, #3
 800425e:	f240 81cc 	bls.w	80045fa <HAL_I2C_EV_IRQHandler+0x7aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8004268:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800426a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8004276:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8004278:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 800427a:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 800427c:	f47f ae1a 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	6853      	ldr	r3, [r2, #4]
 8004284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	e613      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800428c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004290:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004292:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004294:	bf16      	itet	ne
 8004296:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800429a:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800429e:	b2d2      	uxtbne	r2, r2
 80042a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80042a4:	b11a      	cbz	r2, 80042ae <HAL_I2C_EV_IRQHandler+0x45e>
 80042a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042a8:	2a00      	cmp	r2, #0
 80042aa:	f47f ae20 	bne.w	8003eee <HAL_I2C_EV_IRQHandler+0x9e>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	f43f adff 	beq.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 80042b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	f47f ae18 	bne.w	8003eee <HAL_I2C_EV_IRQHandler+0x9e>
 80042be:	e5f9      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    I2C_ITError(hi2c);
 80042c0:	4620      	mov	r0, r4
}
 80042c2:	b00e      	add	sp, #56	; 0x38
 80042c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 80042c8:	f7ff bd0c 	b.w	8003ce4 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 80042cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042ce:	bb4a      	cbnz	r2, 8004324 <HAL_I2C_EV_IRQHandler+0x4d4>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d6:	611a      	str	r2, [r3, #16]
 80042d8:	e5ec      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042da:	2201      	movs	r2, #1
 80042dc:	62e2      	str	r2, [r4, #44]	; 0x2c
 80042de:	e618      	b.n	8003f12 <HAL_I2C_EV_IRQHandler+0xc2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042e8:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042ea:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 80042ee:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042f2:	bf54      	ite	pl
 80042f4:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042f6:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80042f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042fc:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff fc0b 	bl	8003b1c <HAL_I2C_AddrCallback>
 8004306:	e5d5      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 8004308:	08003bf1 	.word	0x08003bf1
      else if (hi2c->EventCount == 1U)
 800430c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800430e:	2a01      	cmp	r2, #1
 8004310:	f47f add0 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004314:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004316:	11d2      	asrs	r2, r2, #7
 8004318:	f002 0206 	and.w	r2, r2, #6
 800431c:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e5c7      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004324:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e5c1      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004330:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004332:	b911      	cbnz	r1, 800433a <HAL_I2C_EV_IRQHandler+0x4ea>
 8004334:	2a40      	cmp	r2, #64	; 0x40
 8004336:	f000 80a1 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x62c>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800433a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800433c:	b922      	cbnz	r2, 8004348 <HAL_I2C_EV_IRQHandler+0x4f8>
 800433e:	6921      	ldr	r1, [r4, #16]
 8004340:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8004344:	f000 80a5 	beq.w	8004492 <HAL_I2C_EV_IRQHandler+0x642>
      if (hi2c->XferCount == 0U)
 8004348:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800434a:	b292      	uxth	r2, r2
 800434c:	2a00      	cmp	r2, #0
 800434e:	d142      	bne.n	80043d6 <HAL_I2C_EV_IRQHandler+0x586>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	9203      	str	r2, [sp, #12]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	9203      	str	r2, [sp, #12]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	9203      	str	r2, [sp, #12]
 800435a:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	6523      	str	r3, [r4, #80]	; 0x50
 8004368:	e5a4      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800436a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800436c:	6802      	ldr	r2, [r0, #0]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	b292      	uxth	r2, r2
 8004372:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004374:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004376:	b292      	uxth	r2, r2
 8004378:	b11a      	cbz	r2, 8004382 <HAL_I2C_EV_IRQHandler+0x532>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800437a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800437c:	f042 0204 	orr.w	r2, r2, #4
 8004380:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800438a:	f7fe fcff 	bl	8002d8c <HAL_DMA_GetState>
 800438e:	2801      	cmp	r0, #1
 8004390:	f43f ae8e 	beq.w	80040b0 <HAL_I2C_EV_IRQHandler+0x260>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004394:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004396:	4ba1      	ldr	r3, [pc, #644]	; (800461c <HAL_I2C_EV_IRQHandler+0x7cc>)
 8004398:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800439a:	f7fe fbf5 	bl	8002b88 <HAL_DMA_Abort_IT>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f43f ae86 	beq.w	80040b0 <HAL_I2C_EV_IRQHandler+0x260>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80043a8:	4798      	blx	r3
 80043aa:	e681      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x260>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043ac:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b6:	f7ff fbaf 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
 80043ba:	e6a6      	b.n	800410a <HAL_I2C_EV_IRQHandler+0x2ba>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043be:	4998      	ldr	r1, [pc, #608]	; (8004620 <HAL_I2C_EV_IRQHandler+0x7d0>)
 80043c0:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80043c4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80043c6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043d0:	f7ff fba6 	bl	8003b20 <HAL_I2C_ListenCpltCallback>
 80043d4:	e56e      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      else if (hi2c->XferCount == 1U)
 80043d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043d8:	b292      	uxth	r2, r2
 80043da:	2a01      	cmp	r2, #1
 80043dc:	d076      	beq.n	80044cc <HAL_I2C_EV_IRQHandler+0x67c>
      else if (hi2c->XferCount == 2U)
 80043de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043e0:	b292      	uxth	r2, r2
 80043e2:	2a02      	cmp	r2, #2
 80043e4:	f000 80eb 	beq.w	80045be <HAL_I2C_EV_IRQHandler+0x76e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ee:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	0512      	lsls	r2, r2, #20
 80043f4:	d50e      	bpl.n	8004414 <HAL_I2C_EV_IRQHandler+0x5c4>
 80043f6:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80043fa:	d007      	beq.n	800440c <HAL_I2C_EV_IRQHandler+0x5bc>
 80043fc:	3801      	subs	r0, #1
 80043fe:	281f      	cmp	r0, #31
 8004400:	d808      	bhi.n	8004414 <HAL_I2C_EV_IRQHandler+0x5c4>
 8004402:	4a88      	ldr	r2, [pc, #544]	; (8004624 <HAL_I2C_EV_IRQHandler+0x7d4>)
 8004404:	fa22 f000 	lsr.w	r0, r2, r0
 8004408:	07c6      	lsls	r6, r0, #31
 800440a:	d503      	bpl.n	8004414 <HAL_I2C_EV_IRQHandler+0x5c4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004412:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004414:	2200      	movs	r2, #0
 8004416:	9209      	str	r2, [sp, #36]	; 0x24
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	9209      	str	r2, [sp, #36]	; 0x24
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	9309      	str	r3, [sp, #36]	; 0x24
 8004420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004422:	e79f      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004424:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8004432:	e6eb      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x3bc>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004436:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800443a:	2a21      	cmp	r2, #33	; 0x21
 800443c:	f47f ad3a 	bne.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount != 0U)
 8004440:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004442:	b292      	uxth	r2, r2
 8004444:	2a00      	cmp	r2, #0
 8004446:	f47f aeac 	bne.w	80041a2 <HAL_I2C_EV_IRQHandler+0x352>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800444a:	2908      	cmp	r1, #8
 800444c:	f000 809f 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
 8004450:	2920      	cmp	r1, #32
 8004452:	f000 809c 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
 8004456:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800445a:	f000 8098 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004464:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004466:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8004468:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800446a:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004470:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8004472:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004476:	f7ff fb49 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
 800447a:	e51b      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447c:	9101      	str	r1, [sp, #4]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	9201      	str	r2, [sp, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	e514      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800448a:	2a21      	cmp	r2, #33	; 0x21
 800448c:	f43f adcb 	beq.w	8004026 <HAL_I2C_EV_IRQHandler+0x1d6>
 8004490:	e5c3      	b.n	800401a <HAL_I2C_EV_IRQHandler+0x1ca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	9202      	str	r2, [sp, #8]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	9202      	str	r2, [sp, #8]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	9202      	str	r2, [sp, #8]
 800449c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044a8:	3301      	adds	r3, #1
 80044aa:	6523      	str	r3, [r4, #80]	; 0x50
 80044ac:	e502      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ae:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044b0:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044b8:	f43f aea5 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x3b6>
 80044bc:	2902      	cmp	r1, #2
 80044be:	f43f aea2 	beq.w	8004206 <HAL_I2C_EV_IRQHandler+0x3b6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e69c      	b.n	8004206 <HAL_I2C_EV_IRQHandler+0x3b6>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80044cc:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80044d0:	f000 8103 	beq.w	80046da <HAL_I2C_EV_IRQHandler+0x88a>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044d4:	2808      	cmp	r0, #8
 80044d6:	f000 80d1 	beq.w	800467c <HAL_I2C_EV_IRQHandler+0x82c>
 80044da:	2820      	cmp	r0, #32
 80044dc:	f000 80ce 	beq.w	800467c <HAL_I2C_EV_IRQHandler+0x82c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044e0:	2d12      	cmp	r5, #18
 80044e2:	f000 813d 	beq.w	8004760 <HAL_I2C_EV_IRQHandler+0x910>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044e6:	2810      	cmp	r0, #16
 80044e8:	f200 813c 	bhi.w	8004764 <HAL_I2C_EV_IRQHandler+0x914>
 80044ec:	4a4e      	ldr	r2, [pc, #312]	; (8004628 <HAL_I2C_EV_IRQHandler+0x7d8>)
 80044ee:	fa22 f000 	lsr.w	r0, r2, r0
 80044f2:	07c1      	lsls	r1, r0, #31
 80044f4:	f140 8136 	bpl.w	8004764 <HAL_I2C_EV_IRQHandler+0x914>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044fe:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004500:	2200      	movs	r2, #0
 8004502:	9206      	str	r2, [sp, #24]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	9206      	str	r2, [sp, #24]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	9306      	str	r3, [sp, #24]
 800450c:	9b06      	ldr	r3, [sp, #24]
 800450e:	e729      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e4cc      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800451a:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800451e:	f000 80d8 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x882>
 8004522:	2910      	cmp	r1, #16
 8004524:	f000 80d5 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x882>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004528:	2904      	cmp	r1, #4
 800452a:	f000 810a 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x8f2>
 800452e:	2902      	cmp	r1, #2
 8004530:	f000 8107 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x8f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8004540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004542:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8004546:	3b01      	subs	r3, #1
 8004548:	b29b      	uxth	r3, r3
 800454a:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454c:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 800454e:	1c51      	adds	r1, r2, #1
 8004550:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004552:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8004554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004556:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8004558:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004560:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8004562:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8004568:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800456a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800456c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800456e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004572:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	f000 80c3 	beq.w	8004702 <HAL_I2C_EV_IRQHandler+0x8b2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457c:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800457e:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004584:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004586:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004588:	f7ff fac2 	bl	8003b10 <HAL_I2C_MasterRxCpltCallback>
 800458c:	e492      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004594:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004598:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800459a:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80045a0:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045a2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b0:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 80045b2:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b4:	f47f af5f 	bne.w	8004476 <HAL_I2C_EV_IRQHandler+0x626>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80045b8:	f7ff fab4 	bl	8003b24 <HAL_I2C_MemTxCpltCallback>
 80045bc:	e47a      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045be:	2810      	cmp	r0, #16
 80045c0:	f240 80a8 	bls.w	8004714 <HAL_I2C_EV_IRQHandler+0x8c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d2:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	0516      	lsls	r6, r2, #20
 80045d8:	d507      	bpl.n	80045ea <HAL_I2C_EV_IRQHandler+0x79a>
 80045da:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80045de:	f040 80a6 	bne.w	800472e <HAL_I2C_EV_IRQHandler+0x8de>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2200      	movs	r2, #0
 80045ec:	9208      	str	r2, [sp, #32]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	9208      	str	r2, [sp, #32]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	9308      	str	r3, [sp, #32]
 80045f6:	9b08      	ldr	r3, [sp, #32]
 80045f8:	e6b4      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80045fc:	2802      	cmp	r0, #2
 80045fe:	d087      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x6c0>
 8004600:	2901      	cmp	r1, #1
 8004602:	d885      	bhi.n	8004510 <HAL_I2C_EV_IRQHandler+0x6c0>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004604:	4909      	ldr	r1, [pc, #36]	; (800462c <HAL_I2C_EV_IRQHandler+0x7dc>)
  __IO uint32_t count = 0U;
 8004606:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004608:	6809      	ldr	r1, [r1, #0]
 800460a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800460e:	fbb1 f1f0 	udiv	r1, r1, r0
 8004612:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004616:	910b      	str	r1, [sp, #44]	; 0x2c
 8004618:	e00f      	b.n	800463a <HAL_I2C_EV_IRQHandler+0x7ea>
 800461a:	bf00      	nop
 800461c:	08003bf1 	.word	0x08003bf1
 8004620:	ffff0000 	.word	0xffff0000
 8004624:	80008081 	.word	0x80008081
 8004628:	00010014 	.word	0x00010014
 800462c:	20000030 	.word	0x20000030
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8004636:	f000 809a 	beq.w	800476e <HAL_I2C_EV_IRQHandler+0x91e>
    count--;
 800463a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800463c:	3a01      	subs	r2, #1
 800463e:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8004640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004642:	2900      	cmp	r1, #0
 8004644:	d1f4      	bne.n	8004630 <HAL_I2C_EV_IRQHandler+0x7e0>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004656:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 800465c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800465e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004660:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004662:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8004664:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8004666:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8004668:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800466a:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 800466c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8004670:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004676:	f7ff fab7 	bl	8003be8 <HAL_I2C_ErrorCallback>
 800467a:	e41b      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467c:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	9107      	str	r1, [sp, #28]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	9207      	str	r2, [sp, #28]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	9207      	str	r2, [sp, #28]
 8004690:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e663      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800469c:	2d08      	cmp	r5, #8
 800469e:	f43f af76 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
 80046a2:	2d20      	cmp	r5, #32
 80046a4:	f43f af73 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
 80046a8:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80046ac:	f43f af6f 	beq.w	800458e <HAL_I2C_EV_IRQHandler+0x73e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b6:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046b8:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046be:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c4:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ca:	f7ff fa1f 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
 80046ce:	f7ff bbf1 	b.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e72f      	b.n	800453a <HAL_I2C_EV_IRQHandler+0x6ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80046e8:	d02f      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x8fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f4:	9104      	str	r1, [sp, #16]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	9204      	str	r2, [sp, #16]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	9304      	str	r3, [sp, #16]
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	e630      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	2300      	movs	r3, #0
 8004704:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004708:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800470c:	f7ff fa6a 	bl	8003be4 <HAL_I2C_MemRxCpltCallback>
 8004710:	f7ff bbd0 	b.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004714:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <HAL_I2C_EV_IRQHandler+0x964>)
 8004716:	40c2      	lsrs	r2, r0
 8004718:	07d2      	lsls	r2, r2, #31
 800471a:	f57f af53 	bpl.w	80045c4 <HAL_I2C_EV_IRQHandler+0x774>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	0515      	lsls	r5, r2, #20
 800472a:	f57f af5e 	bpl.w	80045ea <HAL_I2C_EV_IRQHandler+0x79a>
 800472e:	3801      	subs	r0, #1
 8004730:	281f      	cmp	r0, #31
 8004732:	f63f af5a 	bhi.w	80045ea <HAL_I2C_EV_IRQHandler+0x79a>
 8004736:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <HAL_I2C_EV_IRQHandler+0x968>)
 8004738:	40c2      	lsrs	r2, r0
 800473a:	07d1      	lsls	r1, r2, #31
 800473c:	f57f af55 	bpl.w	80045ea <HAL_I2C_EV_IRQHandler+0x79a>
 8004740:	e74f      	b.n	80045e2 <HAL_I2C_EV_IRQHandler+0x792>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e6f7      	b.n	800453a <HAL_I2C_EV_IRQHandler+0x6ea>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474a:	9205      	str	r2, [sp, #20]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	9205      	str	r2, [sp, #20]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	9205      	str	r2, [sp, #20]
 8004754:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e601      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x514>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004760:	2801      	cmp	r0, #1
 8004762:	d18b      	bne.n	800467c <HAL_I2C_EV_IRQHandler+0x82c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e6c8      	b.n	8004500 <HAL_I2C_EV_IRQHandler+0x6b0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004776:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800477e:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8004784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004786:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8004788:	2120      	movs	r1, #32
        hi2c->XferCount--;
 800478a:	b29b      	uxth	r3, r3
 800478c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800478e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->pBuffPtr++;
 8004792:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004794:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8004798:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479a:	2940      	cmp	r1, #64	; 0x40
        hi2c->pBuffPtr++;
 800479c:	6263      	str	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479e:	f47f aeee 	bne.w	800457e <HAL_I2C_EV_IRQHandler+0x72e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047a6:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 80047a8:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047aa:	f7ff fa1b 	bl	8003be4 <HAL_I2C_MemRxCpltCallback>
 80047ae:	f7ff bb81 	b.w	8003eb4 <HAL_I2C_EV_IRQHandler+0x64>
 80047b2:	bf00      	nop
 80047b4:	00010014 	.word	0x00010014
 80047b8:	80008081 	.word	0x80008081

080047bc <HAL_I2C_ER_IRQHandler>:
{
 80047bc:	b530      	push	{r4, r5, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047be:	6803      	ldr	r3, [r0, #0]
 80047c0:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80047c2:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047c4:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047c8:	05e5      	lsls	r5, r4, #23
{
 80047ca:	b083      	sub	sp, #12
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047cc:	fa5f fc81 	uxtb.w	ip, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d0:	d533      	bpl.n	800483a <HAL_I2C_ER_IRQHandler+0x7e>
 80047d2:	05d1      	lsls	r1, r2, #23
 80047d4:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 80047d8:	d52f      	bpl.n	800483a <HAL_I2C_ER_IRQHandler+0x7e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047de:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047e0:	05a2      	lsls	r2, r4, #22
 80047e2:	d43c      	bmi.n	800485e <HAL_I2C_ER_IRQHandler+0xa2>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047e4:	0562      	lsls	r2, r4, #21
 80047e6:	d572      	bpl.n	80048ce <HAL_I2C_ER_IRQHandler+0x112>
    error |= HAL_I2C_ERROR_BERR;
 80047e8:	2101      	movs	r1, #1
    tmp2 = hi2c->XferCount;
 80047ea:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    tmp3 = hi2c->State;
 80047ec:	f890 e03d 	ldrb.w	lr, [r0, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80047f0:	6b05      	ldr	r5, [r0, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047f2:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 80047f6:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 80047f8:	fa5f fe8e 	uxtb.w	lr, lr
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047fc:	d03d      	beq.n	800487a <HAL_I2C_ER_IRQHandler+0xbe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004802:	f1bc 0f10 	cmp.w	ip, #16
      error |= HAL_I2C_ERROR_AF;
 8004806:	f041 0104 	orr.w	r1, r1, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480a:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800480c:	d002      	beq.n	8004814 <HAL_I2C_ER_IRQHandler+0x58>
 800480e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8004812:	d103      	bne.n	800481c <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800481c:	0522      	lsls	r2, r4, #20
 800481e:	d504      	bpl.n	800482a <HAL_I2C_ER_IRQHandler+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004820:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8004824:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004828:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800482a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800482c:	4319      	orrs	r1, r3
 800482e:	6401      	str	r1, [r0, #64]	; 0x40
}
 8004830:	b003      	add	sp, #12
 8004832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 8004836:	f7ff ba55 	b.w	8003ce4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800483a:	05a5      	lsls	r5, r4, #22
 800483c:	d503      	bpl.n	8004846 <HAL_I2C_ER_IRQHandler+0x8a>
 800483e:	05d1      	lsls	r1, r2, #23
 8004840:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8004844:	d417      	bmi.n	8004876 <HAL_I2C_ER_IRQHandler+0xba>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004846:	0565      	lsls	r5, r4, #21
 8004848:	f3c4 2180 	ubfx	r1, r4, #10, #1
 800484c:	d403      	bmi.n	8004856 <HAL_I2C_ER_IRQHandler+0x9a>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800484e:	0524      	lsls	r4, r4, #20
 8004850:	d434      	bmi.n	80048bc <HAL_I2C_ER_IRQHandler+0x100>
}
 8004852:	b003      	add	sp, #12
 8004854:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004856:	05d1      	lsls	r1, r2, #23
 8004858:	d5fb      	bpl.n	8004852 <HAL_I2C_ER_IRQHandler+0x96>
 800485a:	2100      	movs	r1, #0
 800485c:	e7c5      	b.n	80047ea <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800485e:	2103      	movs	r1, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004860:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004864:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004866:	0562      	lsls	r2, r4, #21
 8004868:	d4bf      	bmi.n	80047ea <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800486a:	0524      	lsls	r4, r4, #20
 800486c:	d5dd      	bpl.n	800482a <HAL_I2C_ER_IRQHandler+0x6e>
 800486e:	f01e 0f01 	tst.w	lr, #1
 8004872:	d1d5      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0x64>
 8004874:	e7d9      	b.n	800482a <HAL_I2C_ER_IRQHandler+0x6e>
 8004876:	2102      	movs	r1, #2
 8004878:	e7f2      	b.n	8004860 <HAL_I2C_ER_IRQHandler+0xa4>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800487a:	b9ca      	cbnz	r2, 80048b0 <HAL_I2C_ER_IRQHandler+0xf4>
 800487c:	f00e 02f7 	and.w	r2, lr, #247	; 0xf7
 8004880:	2a21      	cmp	r2, #33	; 0x21
 8004882:	d004      	beq.n	800488e <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004884:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8004888:	d112      	bne.n	80048b0 <HAL_I2C_ER_IRQHandler+0xf4>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800488a:	2d21      	cmp	r5, #33	; 0x21
 800488c:	d110      	bne.n	80048b0 <HAL_I2C_ER_IRQHandler+0xf4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004892:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004894:	2d08      	cmp	r5, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004896:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004898:	d01e      	beq.n	80048d8 <HAL_I2C_ER_IRQHandler+0x11c>
 800489a:	2d20      	cmp	r5, #32
 800489c:	d01c      	beq.n	80048d8 <HAL_I2C_ER_IRQHandler+0x11c>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800489e:	2a21      	cmp	r2, #33	; 0x21
 80048a0:	d037      	beq.n	8004912 <HAL_I2C_ER_IRQHandler+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a6:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a8:	0525      	lsls	r5, r4, #20
 80048aa:	d50c      	bpl.n	80048c6 <HAL_I2C_ER_IRQHandler+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ac:	6803      	ldr	r3, [r0, #0]
 80048ae:	e7b7      	b.n	8004820 <HAL_I2C_ER_IRQHandler+0x64>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b4:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80048b6:	f041 0104 	orr.w	r1, r1, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048ba:	e7af      	b.n	800481c <HAL_I2C_ER_IRQHandler+0x60>
 80048bc:	ea4f 2e12 	mov.w	lr, r2, lsr #8
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048c0:	f01e 0f01 	tst.w	lr, #1
 80048c4:	d1ac      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0x64>
  if (error != HAL_I2C_ERROR_NONE)
 80048c6:	2900      	cmp	r1, #0
 80048c8:	d1af      	bne.n	800482a <HAL_I2C_ER_IRQHandler+0x6e>
}
 80048ca:	b003      	add	sp, #12
 80048cc:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ce:	0525      	lsls	r5, r4, #20
    error |= HAL_I2C_ERROR_BERR;
 80048d0:	f04f 0101 	mov.w	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048d4:	d4f4      	bmi.n	80048c0 <HAL_I2C_ER_IRQHandler+0x104>
 80048d6:	e7a8      	b.n	800482a <HAL_I2C_ER_IRQHandler+0x6e>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048d8:	2a28      	cmp	r2, #40	; 0x28
 80048da:	d1e0      	bne.n	800489e <HAL_I2C_ER_IRQHandler+0xe2>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048dc:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_I2C_ER_IRQHandler+0x18c>)
 80048de:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	9101      	str	r1, [sp, #4]
 80048e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ee:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f0:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048f2:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80048fc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004900:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004904:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004908:	f7ff f90a 	bl	8003b20 <HAL_I2C_ListenCpltCallback>
 800490c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004910:	e7ca      	b.n	80048a8 <HAL_I2C_ER_IRQHandler+0xec>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004912:	4d0d      	ldr	r5, [pc, #52]	; (8004948 <HAL_I2C_ER_IRQHandler+0x18c>)
 8004914:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004916:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004918:	2220      	movs	r2, #32
 800491a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800491e:	2200      	movs	r2, #0
 8004920:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	9101      	str	r1, [sp, #4]
 8004928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800492c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004932:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004934:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004936:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493e:	f7ff f8e9 	bl	8003b14 <HAL_I2C_SlaveTxCpltCallback>
 8004942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004946:	e7af      	b.n	80048a8 <HAL_I2C_ER_IRQHandler+0xec>
 8004948:	ffff0000 	.word	0xffff0000

0800494c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800494c:	2800      	cmp	r0, #0
 800494e:	f000 81a2 	beq.w	8004c96 <HAL_RCC_OscConfig+0x34a>
{
 8004952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004956:	6803      	ldr	r3, [r0, #0]
 8004958:	07dd      	lsls	r5, r3, #31
{
 800495a:	b082      	sub	sp, #8
 800495c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	d52f      	bpl.n	80049c0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004960:	499e      	ldr	r1, [pc, #632]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004962:	688a      	ldr	r2, [r1, #8]
 8004964:	f002 020c 	and.w	r2, r2, #12
 8004968:	2a04      	cmp	r2, #4
 800496a:	f000 80ed 	beq.w	8004b48 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	688a      	ldr	r2, [r1, #8]
 8004970:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004974:	2a08      	cmp	r2, #8
 8004976:	f000 80e3 	beq.w	8004b40 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	f000 80ec 	beq.w	8004b5c <HAL_RCC_OscConfig+0x210>
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	f000 8175 	beq.w	8004c76 <HAL_RCC_OscConfig+0x32a>
 800498c:	4d93      	ldr	r5, [pc, #588]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 800498e:	682a      	ldr	r2, [r5, #0]
 8004990:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	682a      	ldr	r2, [r5, #0]
 8004998:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800499c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 80e1 	bne.w	8004b66 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fd ff88 	bl	80028b8 <HAL_GetTick>
 80049a8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	e005      	b.n	80049b8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fd ff84 	bl	80028b8 <HAL_GetTick>
 80049b0:	1b80      	subs	r0, r0, r6
 80049b2:	2864      	cmp	r0, #100	; 0x64
 80049b4:	f200 8101 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	039b      	lsls	r3, r3, #14
 80049bc:	d4f6      	bmi.n	80049ac <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	079f      	lsls	r7, r3, #30
 80049c2:	d528      	bpl.n	8004a16 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c4:	4a85      	ldr	r2, [pc, #532]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 80049c6:	6891      	ldr	r1, [r2, #8]
 80049c8:	f011 0f0c 	tst.w	r1, #12
 80049cc:	f000 8090 	beq.w	8004af0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d0:	6891      	ldr	r1, [r2, #8]
 80049d2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	2908      	cmp	r1, #8
 80049d8:	f000 8086 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049dc:	68e3      	ldr	r3, [r4, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 810e 	beq.w	8004c00 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e6:	4e7d      	ldr	r6, [pc, #500]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80049ec:	f7fd ff64 	bl	80028b8 <HAL_GetTick>
 80049f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd ff60 	bl	80028b8 <HAL_GetTick>
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	2802      	cmp	r0, #2
 80049fc:	f200 80dd 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	6833      	ldr	r3, [r6, #0]
 8004a02:	0798      	lsls	r0, r3, #30
 8004a04:	d5f6      	bpl.n	80049f4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	6833      	ldr	r3, [r6, #0]
 8004a08:	6922      	ldr	r2, [r4, #16]
 8004a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a12:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	071a      	lsls	r2, r3, #28
 8004a18:	d451      	bmi.n	8004abe <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1a:	0758      	lsls	r0, r3, #29
 8004a1c:	d52f      	bpl.n	8004a7e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4a6f      	ldr	r2, [pc, #444]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004a20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a22:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004a26:	d07f      	beq.n	8004b28 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004a28:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4e6e      	ldr	r6, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	05d9      	lsls	r1, r3, #23
 8004a30:	f140 80b3 	bpl.w	8004b9a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	68a3      	ldr	r3, [r4, #8]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	f000 80c3 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x276>
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	f000 812c 	beq.w	8004c9a <HAL_RCC_OscConfig+0x34e>
 8004a42:	4e66      	ldr	r6, [pc, #408]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004a44:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	6732      	str	r2, [r6, #112]	; 0x70
 8004a4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 80b9 	bne.w	8004bcc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5a:	f7fd ff2d 	bl	80028b8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	e005      	b.n	8004a72 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd ff27 	bl	80028b8 <HAL_GetTick>
 8004a6a:	1bc0      	subs	r0, r0, r7
 8004a6c:	4540      	cmp	r0, r8
 8004a6e:	f200 80a4 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a72:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004a74:	0798      	lsls	r0, r3, #30
 8004a76:	d4f6      	bmi.n	8004a66 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	f040 8106 	bne.w	8004c8a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	69a0      	ldr	r0, [r4, #24]
 8004a80:	b1c8      	cbz	r0, 8004ab6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a82:	4d56      	ldr	r5, [pc, #344]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004a84:	68ab      	ldr	r3, [r5, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	f000 80c9 	beq.w	8004c22 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a90:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <HAL_RCC_OscConfig+0x294>)
 8004a92:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a94:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a98:	f000 8109 	beq.w	8004cae <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd ff0c 	bl	80028b8 <HAL_GetTick>
 8004aa0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa2:	e005      	b.n	8004ab0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fd ff08 	bl	80028b8 <HAL_GetTick>
 8004aa8:	1b00      	subs	r0, r0, r4
 8004aaa:	2802      	cmp	r0, #2
 8004aac:	f200 8085 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	019b      	lsls	r3, r3, #6
 8004ab4:	d4f6      	bmi.n	8004aa4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2000      	movs	r0, #0
}
 8004ab8:	b002      	add	sp, #8
 8004aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004abe:	6963      	ldr	r3, [r4, #20]
 8004ac0:	b30b      	cbz	r3, 8004b06 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac4:	4e45      	ldr	r6, [pc, #276]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004acc:	f7fd fef4 	bl	80028b8 <HAL_GetTick>
 8004ad0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	e004      	b.n	8004ade <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fd fef0 	bl	80028b8 <HAL_GetTick>
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	2802      	cmp	r0, #2
 8004adc:	d86d      	bhi.n	8004bba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004ae0:	079b      	lsls	r3, r3, #30
 8004ae2:	d5f7      	bpl.n	8004ad4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	e798      	b.n	8004a1a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae8:	6852      	ldr	r2, [r2, #4]
 8004aea:	0256      	lsls	r6, r2, #9
 8004aec:	f53f af76 	bmi.w	80049dc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af0:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	0795      	lsls	r5, r2, #30
 8004af6:	d544      	bpl.n	8004b82 <HAL_RCC_OscConfig+0x236>
 8004af8:	68e2      	ldr	r2, [r4, #12]
 8004afa:	2a01      	cmp	r2, #1
 8004afc:	d041      	beq.n	8004b82 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
}
 8004b00:	b002      	add	sp, #8
 8004b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004b06:	4a36      	ldr	r2, [pc, #216]	; (8004be0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	4e34      	ldr	r6, [pc, #208]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004b0a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004b0e:	f7fd fed3 	bl	80028b8 <HAL_GetTick>
 8004b12:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	e004      	b.n	8004b20 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b16:	f7fd fecf 	bl	80028b8 <HAL_GetTick>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	2802      	cmp	r0, #2
 8004b1e:	d84c      	bhi.n	8004bba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004b22:	079f      	lsls	r7, r3, #30
 8004b24:	d4f7      	bmi.n	8004b16 <HAL_RCC_OscConfig+0x1ca>
 8004b26:	e7dd      	b.n	8004ae4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6413      	str	r3, [r2, #64]	; 0x40
 8004b32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	e774      	b.n	8004a2a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b40:	684a      	ldr	r2, [r1, #4]
 8004b42:	0250      	lsls	r0, r2, #9
 8004b44:	f57f af19 	bpl.w	800497a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	0391      	lsls	r1, r2, #14
 8004b4e:	f57f af37 	bpl.w	80049c0 <HAL_RCC_OscConfig+0x74>
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	f47f af33 	bne.w	80049c0 <HAL_RCC_OscConfig+0x74>
 8004b5a:	e7d0      	b.n	8004afe <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b66:	f7fd fea7 	bl	80028b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4e1c      	ldr	r6, [pc, #112]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004b6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e004      	b.n	8004b7a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fd fea2 	bl	80028b8 <HAL_GetTick>
 8004b74:	1b40      	subs	r0, r0, r5
 8004b76:	2864      	cmp	r0, #100	; 0x64
 8004b78:	d81f      	bhi.n	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	6833      	ldr	r3, [r6, #0]
 8004b7c:	039a      	lsls	r2, r3, #14
 8004b7e:	d5f7      	bpl.n	8004b70 <HAL_RCC_OscConfig+0x224>
 8004b80:	e71d      	b.n	80049be <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4916      	ldr	r1, [pc, #88]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004b84:	6920      	ldr	r0, [r4, #16]
 8004b86:	680a      	ldr	r2, [r1, #0]
 8004b88:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004b8c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004b90:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	071a      	lsls	r2, r3, #28
 8004b94:	f57f af41 	bpl.w	8004a1a <HAL_RCC_OscConfig+0xce>
 8004b98:	e791      	b.n	8004abe <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9a:	6833      	ldr	r3, [r6, #0]
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fe89 	bl	80028b8 <HAL_GetTick>
 8004ba6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	6833      	ldr	r3, [r6, #0]
 8004baa:	05da      	lsls	r2, r3, #23
 8004bac:	f53f af42 	bmi.w	8004a34 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb0:	f7fd fe82 	bl	80028b8 <HAL_GetTick>
 8004bb4:	1bc0      	subs	r0, r0, r7
 8004bb6:	2802      	cmp	r0, #2
 8004bb8:	d9f6      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004bba:	2003      	movs	r0, #3
}
 8004bbc:	b002      	add	sp, #8
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc2:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
 8004bc4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fe74 	bl	80028b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	4f02      	ldr	r7, [pc, #8]	; (8004bdc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004bd2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2a6>
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470000 	.word	0x42470000
 8004be4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd fe66 	bl	80028b8 <HAL_GetTick>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	4540      	cmp	r0, r8
 8004bf0:	d8e3      	bhi.n	8004bba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf4:	079b      	lsls	r3, r3, #30
 8004bf6:	d5f7      	bpl.n	8004be8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	f43f af40 	beq.w	8004a7e <HAL_RCC_OscConfig+0x132>
 8004bfe:	e044      	b.n	8004c8a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004c00:	4a42      	ldr	r2, [pc, #264]	; (8004d0c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	4e43      	ldr	r6, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004c04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c06:	f7fd fe57 	bl	80028b8 <HAL_GetTick>
 8004c0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0c:	e004      	b.n	8004c18 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fe53 	bl	80028b8 <HAL_GetTick>
 8004c12:	1b40      	subs	r0, r0, r5
 8004c14:	2802      	cmp	r0, #2
 8004c16:	d8d0      	bhi.n	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	0799      	lsls	r1, r3, #30
 8004c1c:	d4f7      	bmi.n	8004c0e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	e6f9      	b.n	8004a16 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c22:	2801      	cmp	r0, #1
 8004c24:	f43f af48 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004c28:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	4291      	cmp	r1, r2
 8004c32:	f47f af64 	bne.w	8004afe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c38:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3c:	4291      	cmp	r1, r2
 8004c3e:	f47f af5e 	bne.w	8004afe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c44:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004c48:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004c4e:	f47f af56 	bne.w	8004afe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c54:	0852      	lsrs	r2, r2, #1
 8004c56:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004c5a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004c60:	f47f af4d 	bne.w	8004afe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c66:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004c6e:	bf14      	ite	ne
 8004c70:	2001      	movne	r0, #1
 8004c72:	2000      	moveq	r0, #0
 8004c74:	e720      	b.n	8004ab8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x3c4>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c86:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c88:	e76d      	b.n	8004b66 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <HAL_RCC_OscConfig+0x3c4>)
 8004c8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6413      	str	r3, [r2, #64]	; 0x40
 8004c94:	e6f3      	b.n	8004a7e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004c96:	2001      	movs	r0, #1
}
 8004c98:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_RCC_OscConfig+0x3c4>)
 8004c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c9e:	f042 0204 	orr.w	r2, r2, #4
 8004ca2:	671a      	str	r2, [r3, #112]	; 0x70
 8004ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cac:	e78e      	b.n	8004bcc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8004cae:	f7fd fe03 	bl	80028b8 <HAL_GetTick>
 8004cb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fd fdff 	bl	80028b8 <HAL_GetTick>
 8004cba:	1b80      	subs	r0, r0, r6
 8004cbc:	2802      	cmp	r0, #2
 8004cbe:	f63f af7c 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	682b      	ldr	r3, [r5, #0]
 8004cc4:	0199      	lsls	r1, r3, #6
 8004cc6:	d4f6      	bmi.n	8004cb6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cc8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004cd4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004cd8:	0852      	lsrs	r2, r2, #1
 8004cda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004cde:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004ce0:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004ce6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004cea:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004cec:	f7fd fde4 	bl	80028b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4d07      	ldr	r5, [pc, #28]	; (8004d10 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8004cf2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf4:	e005      	b.n	8004d02 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fd fddf 	bl	80028b8 <HAL_GetTick>
 8004cfa:	1b00      	subs	r0, r0, r4
 8004cfc:	2802      	cmp	r0, #2
 8004cfe:	f63f af5c 	bhi.w	8004bba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	019a      	lsls	r2, r3, #6
 8004d06:	d5f6      	bpl.n	8004cf6 <HAL_RCC_OscConfig+0x3aa>
 8004d08:	e6d5      	b.n	8004ab6 <HAL_RCC_OscConfig+0x16a>
 8004d0a:	bf00      	nop
 8004d0c:	42470000 	.word	0x42470000
 8004d10:	40023800 	.word	0x40023800

08004d14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004d16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d18:	688b      	ldr	r3, [r1, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d01b      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x46>
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d117      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d26:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d28:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d34:	d113      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d36:	480f      	ldr	r0, [pc, #60]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x60>)
 8004d38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d3c:	fba1 0100 	umull	r0, r1, r1, r0
 8004d40:	f7fb fe5c 	bl	80009fc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d50:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d54:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004d56:	4807      	ldr	r0, [pc, #28]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004d58:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d5a:	4807      	ldr	r0, [pc, #28]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004d5c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x64>)
 8004d60:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d64:	2300      	movs	r3, #0
 8004d66:	fba1 0100 	umull	r0, r1, r1, r0
 8004d6a:	f7fb fe47 	bl	80009fc <__aeabi_uldivmod>
 8004d6e:	e7e9      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x30>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	007a1200 	.word	0x007a1200

08004d7c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f000 8087 	beq.w	8004e90 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d82:	4a48      	ldr	r2, [pc, #288]	; (8004ea4 <HAL_RCC_ClockConfig+0x128>)
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	428b      	cmp	r3, r1
{
 8004d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	460d      	mov	r5, r1
 8004d92:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d94:	d209      	bcs.n	8004daa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	b2cb      	uxtb	r3, r1
 8004d98:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d002      	beq.n	8004daa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0798      	lsls	r0, r3, #30
 8004dae:	d514      	bpl.n	8004dda <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	0759      	lsls	r1, r3, #29
 8004db2:	d504      	bpl.n	8004dbe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db4:	493c      	ldr	r1, [pc, #240]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004db6:	688a      	ldr	r2, [r1, #8]
 8004db8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004dbc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	071a      	lsls	r2, r3, #28
 8004dc0:	d504      	bpl.n	8004dcc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc2:	4939      	ldr	r1, [pc, #228]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004dc4:	688a      	ldr	r2, [r1, #8]
 8004dc6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004dca:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4936      	ldr	r1, [pc, #216]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004dce:	68a0      	ldr	r0, [r4, #8]
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004dd6:	4302      	orrs	r2, r0
 8004dd8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dda:	07df      	lsls	r7, r3, #31
 8004ddc:	d521      	bpl.n	8004e22 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	2a01      	cmp	r2, #1
 8004de2:	d057      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de4:	1e93      	subs	r3, r2, #2
 8004de6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dec:	d94d      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	0799      	lsls	r1, r3, #30
 8004df0:	d5d8      	bpl.n	8004da4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	4e2d      	ldr	r6, [pc, #180]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004df4:	68b3      	ldr	r3, [r6, #8]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004dfe:	f7fd fd5b 	bl	80028b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e02:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004e06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e08:	e004      	b.n	8004e14 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0a:	f7fd fd55 	bl	80028b8 <HAL_GetTick>
 8004e0e:	1bc0      	subs	r0, r0, r7
 8004e10:	4540      	cmp	r0, r8
 8004e12:	d844      	bhi.n	8004e9e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e14:	68b3      	ldr	r3, [r6, #8]
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e20:	d1f3      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e22:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <HAL_RCC_ClockConfig+0x128>)
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	d906      	bls.n	8004e3c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	b2eb      	uxtb	r3, r5
 8004e30:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	d1b3      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	075a      	lsls	r2, r3, #29
 8004e40:	d506      	bpl.n	8004e50 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e42:	4919      	ldr	r1, [pc, #100]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004e44:	68e0      	ldr	r0, [r4, #12]
 8004e46:	688a      	ldr	r2, [r1, #8]
 8004e48:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004e4c:	4302      	orrs	r2, r0
 8004e4e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	071b      	lsls	r3, r3, #28
 8004e52:	d507      	bpl.n	8004e64 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004e56:	6921      	ldr	r1, [r4, #16]
 8004e58:	6893      	ldr	r3, [r2, #8]
 8004e5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e64:	f7ff ff56 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004e68:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004e6a:	4c10      	ldr	r4, [pc, #64]	; (8004eac <HAL_RCC_ClockConfig+0x130>)
 8004e6c:	6892      	ldr	r2, [r2, #8]
 8004e6e:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <HAL_RCC_ClockConfig+0x134>)
 8004e70:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004e74:	4603      	mov	r3, r0
 8004e76:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004e78:	480e      	ldr	r0, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004e7c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004e80:	f7fd fcd0 	bl	8002824 <HAL_InitTick>
  return HAL_OK;
 8004e84:	2000      	movs	r0, #0
}
 8004e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	0198      	lsls	r0, r3, #6
 8004e8c:	d4b1      	bmi.n	8004df2 <HAL_RCC_ClockConfig+0x76>
 8004e8e:	e789      	b.n	8004da4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
}
 8004e92:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <HAL_RCC_ClockConfig+0x12c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	039e      	lsls	r6, r3, #14
 8004e9a:	d4aa      	bmi.n	8004df2 <HAL_RCC_ClockConfig+0x76>
 8004e9c:	e782      	b.n	8004da4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004e9e:	2003      	movs	r0, #3
 8004ea0:	e781      	b.n	8004da6 <HAL_RCC_ClockConfig+0x2a>
 8004ea2:	bf00      	nop
 8004ea4:	40023c00 	.word	0x40023c00
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	080074a4 	.word	0x080074a4
 8004eb0:	20000030 	.word	0x20000030
 8004eb4:	20000038 	.word	0x20000038

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004eba:	4905      	ldr	r1, [pc, #20]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	4a05      	ldr	r2, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004ec6:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ec8:	40d8      	lsrs	r0, r3
 8004eca:	4770      	bx	lr
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	20000030 	.word	0x20000030
 8004ed4:	080074b4 	.word	0x080074b4

08004ed8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004eda:	4905      	ldr	r1, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	4a05      	ldr	r2, [pc, #20]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ee8:	40d8      	lsrs	r0, r3
 8004eea:	4770      	bx	lr
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	20000030 	.word	0x20000030
 8004ef4:	080074b4 	.word	0x080074b4

08004ef8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d076      	beq.n	8004fea <HAL_TIM_Base_Init+0xf2>
{
 8004efc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f02:	4604      	mov	r4, r0
 8004f04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d055      	beq.n	8004fb8 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0e:	4938      	ldr	r1, [pc, #224]	; (8004ff0 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	2302      	movs	r3, #2
 8004f12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f16:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004f18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1a:	d052      	beq.n	8004fc2 <HAL_TIM_Base_Init+0xca>
 8004f1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f20:	d021      	beq.n	8004f66 <HAL_TIM_Base_Init+0x6e>
 8004f22:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004f26:	428a      	cmp	r2, r1
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIM_Base_Init+0x6e>
 8004f2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f2e:	428a      	cmp	r2, r1
 8004f30:	d019      	beq.n	8004f66 <HAL_TIM_Base_Init+0x6e>
 8004f32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f36:	428a      	cmp	r2, r1
 8004f38:	d015      	beq.n	8004f66 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004f3e:	428a      	cmp	r2, r1
 8004f40:	d015      	beq.n	8004f6e <HAL_TIM_Base_Init+0x76>
 8004f42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d011      	beq.n	8004f6e <HAL_TIM_Base_Init+0x76>
 8004f4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f4e:	428a      	cmp	r2, r1
 8004f50:	d00d      	beq.n	8004f6e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f52:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f62:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	e010      	b.n	8004f88 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004f66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004f80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004f82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f86:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004f94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004f98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004fb4:	2000      	movs	r0, #0
}
 8004fb6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004fb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004fbc:	f7fd fa70 	bl	80024a0 <HAL_TIM_Base_MspInit>
 8004fc0:	e7a4      	b.n	8004f0c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004fc2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fca:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd2:	69a1      	ldr	r1, [r4, #24]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004fda:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	68e3      	ldr	r3, [r4, #12]
 8004fde:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe4:	6963      	ldr	r3, [r4, #20]
 8004fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe8:	e7ce      	b.n	8004f88 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8004fea:	2001      	movs	r0, #1
}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d124      	bne.n	8005046 <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	6803      	ldr	r3, [r0, #0]
 8004ffe:	4a14      	ldr	r2, [pc, #80]	; (8005050 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	d012      	beq.n	8005030 <HAL_TIM_Base_Start+0x3c>
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d00f      	beq.n	8005030 <HAL_TIM_Base_Start+0x3c>
 8005010:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <HAL_TIM_Base_Start+0x3c>
 8005018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <HAL_TIM_Base_Start+0x3c>
 8005020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <HAL_TIM_Base_Start+0x3c>
 8005028:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800502c:	4293      	cmp	r3, r2
 800502e:	d104      	bne.n	800503a <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	2a06      	cmp	r2, #6
 8005038:	d007      	beq.n	800504a <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8005040:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	4770      	bx	lr
    return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
 8005048:	4770      	bx	lr
  return HAL_OK;
 800504a:	2000      	movs	r0, #0
}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000

08005054 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005054:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005058:	2b01      	cmp	r3, #1
 800505a:	d127      	bne.n	80050ac <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	4915      	ldr	r1, [pc, #84]	; (80050b4 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	2202      	movs	r2, #2
 8005062:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005066:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	d011      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d00e      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005078:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <HAL_TIM_Base_Start_IT+0x64>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 800507e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 800508e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005092:	4293      	cmp	r3, r2
 8005094:	d104      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	2a06      	cmp	r2, #6
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	4770      	bx	lr
    return HAL_ERROR;
 80050ac:	2001      	movs	r0, #1
 80050ae:	4770      	bx	lr
  return HAL_OK;
 80050b0:	2000      	movs	r0, #0
}
 80050b2:	4770      	bx	lr
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400

080050bc <HAL_TIM_PWM_MspInit>:
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d076      	beq.n	80051b2 <HAL_TIM_PWM_Init+0xf2>
{
 80050c4:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050ca:	4604      	mov	r4, r0
 80050cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d055      	beq.n	8005180 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d6:	4938      	ldr	r1, [pc, #224]	; (80051b8 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	2302      	movs	r3, #2
 80050da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050de:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80050e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e2:	d052      	beq.n	800518a <HAL_TIM_PWM_Init+0xca>
 80050e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80050e8:	d021      	beq.n	800512e <HAL_TIM_PWM_Init+0x6e>
 80050ea:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80050ee:	428a      	cmp	r2, r1
 80050f0:	d01d      	beq.n	800512e <HAL_TIM_PWM_Init+0x6e>
 80050f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050f6:	428a      	cmp	r2, r1
 80050f8:	d019      	beq.n	800512e <HAL_TIM_PWM_Init+0x6e>
 80050fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050fe:	428a      	cmp	r2, r1
 8005100:	d015      	beq.n	800512e <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005102:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005106:	428a      	cmp	r2, r1
 8005108:	d015      	beq.n	8005136 <HAL_TIM_PWM_Init+0x76>
 800510a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800510e:	428a      	cmp	r2, r1
 8005110:	d011      	beq.n	8005136 <HAL_TIM_PWM_Init+0x76>
 8005112:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005116:	428a      	cmp	r2, r1
 8005118:	d00d      	beq.n	8005136 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800511c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005122:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005124:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005126:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800512a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800512c:	e010      	b.n	8005150 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800512e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005134:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005146:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005148:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800514a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800514e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005150:	2301      	movs	r3, #1
 8005152:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800515c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005160:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005164:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800516c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005178:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800517c:	2000      	movs	r0, #0
}
 800517e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005180:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005184:	f7ff ff9a 	bl	80050bc <HAL_TIM_PWM_MspInit>
 8005188:	e7a4      	b.n	80050d4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800518a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005192:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005198:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519a:	69a1      	ldr	r1, [r4, #24]
 800519c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80051a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	68e3      	ldr	r3, [r4, #12]
 80051a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80051ac:	6963      	ldr	r3, [r4, #20]
 80051ae:	6313      	str	r3, [r2, #48]	; 0x30
 80051b0:	e7ce      	b.n	8005150 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80051b2:	2001      	movs	r0, #1
}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000

080051bc <HAL_TIM_PWM_Start>:
 80051bc:	bb99      	cbnz	r1, 8005226 <HAL_TIM_PWM_Start+0x6a>
 80051be:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d143      	bne.n	800524e <HAL_TIM_PWM_Start+0x92>
 80051c6:	2302      	movs	r3, #2
 80051c8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80051cc:	6803      	ldr	r3, [r0, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	6a18      	ldr	r0, [r3, #32]
 80051d2:	f001 011f 	and.w	r1, r1, #31
 80051d6:	fa02 f101 	lsl.w	r1, r2, r1
 80051da:	ea20 0001 	bic.w	r0, r0, r1
 80051de:	6218      	str	r0, [r3, #32]
 80051e0:	6a18      	ldr	r0, [r3, #32]
 80051e2:	4a25      	ldr	r2, [pc, #148]	; (8005278 <HAL_TIM_PWM_Start+0xbc>)
 80051e4:	4301      	orrs	r1, r0
 80051e6:	4293      	cmp	r3, r2
 80051e8:	6219      	str	r1, [r3, #32]
 80051ea:	d040      	beq.n	800526e <HAL_TIM_PWM_Start+0xb2>
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_PWM_Start+0x54>
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_TIM_PWM_Start+0xc0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <HAL_TIM_PWM_Start+0x54>
 80051f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_PWM_Start+0x54>
 8005200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <HAL_TIM_PWM_Start+0x54>
 8005208:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800520c:	4293      	cmp	r3, r2
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0x5e>
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	f002 0207 	and.w	r2, r2, #7
 8005216:	2a06      	cmp	r2, #6
 8005218:	d027      	beq.n	800526a <HAL_TIM_PWM_Start+0xae>
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	2000      	movs	r0, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	4770      	bx	lr
 8005226:	2904      	cmp	r1, #4
 8005228:	d013      	beq.n	8005252 <HAL_TIM_PWM_Start+0x96>
 800522a:	2908      	cmp	r1, #8
 800522c:	d00b      	beq.n	8005246 <HAL_TIM_PWM_Start+0x8a>
 800522e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10b      	bne.n	800524e <HAL_TIM_PWM_Start+0x92>
 8005236:	2904      	cmp	r1, #4
 8005238:	d00f      	beq.n	800525a <HAL_TIM_PWM_Start+0x9e>
 800523a:	2908      	cmp	r1, #8
 800523c:	d011      	beq.n	8005262 <HAL_TIM_PWM_Start+0xa6>
 800523e:	2302      	movs	r3, #2
 8005240:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005244:	e7c2      	b.n	80051cc <HAL_TIM_PWM_Start+0x10>
 8005246:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800524a:	2b01      	cmp	r3, #1
 800524c:	d009      	beq.n	8005262 <HAL_TIM_PWM_Start+0xa6>
 800524e:	2001      	movs	r0, #1
 8005250:	4770      	bx	lr
 8005252:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005256:	2b01      	cmp	r3, #1
 8005258:	d1f9      	bne.n	800524e <HAL_TIM_PWM_Start+0x92>
 800525a:	2302      	movs	r3, #2
 800525c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005260:	e7b4      	b.n	80051cc <HAL_TIM_PWM_Start+0x10>
 8005262:	2302      	movs	r3, #2
 8005264:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005268:	e7b0      	b.n	80051cc <HAL_TIM_PWM_Start+0x10>
 800526a:	2000      	movs	r0, #0
 800526c:	4770      	bx	lr
 800526e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005274:	645a      	str	r2, [r3, #68]	; 0x44
 8005276:	e7cb      	b.n	8005210 <HAL_TIM_PWM_Start+0x54>
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400

08005280 <HAL_TIM_IC_MspInit>:
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005284:	2800      	cmp	r0, #0
 8005286:	d076      	beq.n	8005376 <HAL_TIM_IC_Init+0xf2>
{
 8005288:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800528a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800528e:	4604      	mov	r4, r0
 8005290:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005294:	2b00      	cmp	r3, #0
 8005296:	d055      	beq.n	8005344 <HAL_TIM_IC_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800529a:	4938      	ldr	r1, [pc, #224]	; (800537c <HAL_TIM_IC_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	2302      	movs	r3, #2
 800529e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80052a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a6:	d052      	beq.n	800534e <HAL_TIM_IC_Init+0xca>
 80052a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80052ac:	d021      	beq.n	80052f2 <HAL_TIM_IC_Init+0x6e>
 80052ae:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80052b2:	428a      	cmp	r2, r1
 80052b4:	d01d      	beq.n	80052f2 <HAL_TIM_IC_Init+0x6e>
 80052b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052ba:	428a      	cmp	r2, r1
 80052bc:	d019      	beq.n	80052f2 <HAL_TIM_IC_Init+0x6e>
 80052be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052c2:	428a      	cmp	r2, r1
 80052c4:	d015      	beq.n	80052f2 <HAL_TIM_IC_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80052ca:	428a      	cmp	r2, r1
 80052cc:	d015      	beq.n	80052fa <HAL_TIM_IC_Init+0x76>
 80052ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052d2:	428a      	cmp	r2, r1
 80052d4:	d011      	beq.n	80052fa <HAL_TIM_IC_Init+0x76>
 80052d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052da:	428a      	cmp	r2, r1
 80052dc:	d00d      	beq.n	80052fa <HAL_TIM_IC_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052de:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80052e8:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80052ea:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052ee:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f0:	e010      	b.n	8005314 <HAL_TIM_IC_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80052f2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052f8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052fc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005308:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800530c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800530e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005310:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005312:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005314:	2301      	movs	r3, #1
 8005316:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005318:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005320:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005324:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005328:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005334:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800533c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005340:	2000      	movs	r0, #0
}
 8005342:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005344:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005348:	f7ff ff9a 	bl	8005280 <HAL_TIM_IC_MspInit>
 800534c:	e7a4      	b.n	8005298 <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800534e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005350:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005356:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535e:	69a1      	ldr	r1, [r4, #24]
 8005360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005364:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005366:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005368:	68e3      	ldr	r3, [r4, #12]
 800536a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	6963      	ldr	r3, [r4, #20]
 8005372:	6313      	str	r3, [r2, #48]	; 0x30
 8005374:	e7ce      	b.n	8005314 <HAL_TIM_IC_Init+0x90>
    return HAL_ERROR;
 8005376:	2001      	movs	r0, #1
}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000

08005380 <HAL_TIM_IC_Start_DMA>:
{
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005384:	2900      	cmp	r1, #0
 8005386:	d156      	bne.n	8005436 <HAL_TIM_IC_Start_DMA+0xb6>
 8005388:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800538c:	f894 c042 	ldrb.w	ip, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005390:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005392:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005396:	2802      	cmp	r0, #2
 8005398:	d048      	beq.n	800542c <HAL_TIM_IC_Start_DMA+0xac>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800539a:	f1bc 0f02 	cmp.w	ip, #2
 800539e:	d066      	beq.n	800546e <HAL_TIM_IC_Start_DMA+0xee>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80053a0:	2801      	cmp	r0, #1
 80053a2:	d146      	bne.n	8005432 <HAL_TIM_IC_Start_DMA+0xb2>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80053a4:	f1bc 0f01 	cmp.w	ip, #1
 80053a8:	d143      	bne.n	8005432 <HAL_TIM_IC_Start_DMA+0xb2>
    if ((pData == NULL) && (Length > 0U))
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d03f      	beq.n	800542e <HAL_TIM_IC_Start_DMA+0xae>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d15f      	bne.n	8005472 <HAL_TIM_IC_Start_DMA+0xf2>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b2:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80053b4:	4d6b      	ldr	r5, [pc, #428]	; (8005564 <HAL_TIM_IC_Start_DMA+0x1e4>)
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b6:	2002      	movs	r0, #2
 80053b8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053c0:	6a08      	ldr	r0, [r1, #32]
 80053c2:	f020 0001 	bic.w	r0, r0, #1
 80053c6:	6208      	str	r0, [r1, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c8:	6a08      	ldr	r0, [r1, #32]
 80053ca:	f040 0001 	orr.w	r0, r0, #1
 80053ce:	6208      	str	r0, [r1, #32]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80053d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053d2:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80053d4:	4d64      	ldr	r5, [pc, #400]	; (8005568 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80053d6:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80053d8:	4d64      	ldr	r5, [pc, #400]	; (800556c <HAL_TIM_IC_Start_DMA+0x1ec>)
 80053da:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80053dc:	3134      	adds	r1, #52	; 0x34
 80053de:	f7fd fb93 	bl	8002b08 <HAL_DMA_Start_IT>
 80053e2:	bb30      	cbnz	r0, 8005432 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	68eb      	ldr	r3, [r5, #12]
 80053e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ec:	60eb      	str	r3, [r5, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	4b60      	ldr	r3, [pc, #384]	; (8005570 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80053f0:	429d      	cmp	r5, r3
 80053f2:	d012      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x9a>
 80053f4:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80053f8:	d00f      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x9a>
 80053fa:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80053fe:	429d      	cmp	r5, r3
 8005400:	d00b      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x9a>
 8005402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005406:	429d      	cmp	r5, r3
 8005408:	d007      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x9a>
 800540a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540e:	429d      	cmp	r5, r3
 8005410:	d003      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x9a>
 8005412:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8005416:	429d      	cmp	r5, r3
 8005418:	d104      	bne.n	8005424 <HAL_TIM_IC_Start_DMA+0xa4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	68ab      	ldr	r3, [r5, #8]
 800541c:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	2b06      	cmp	r3, #6
 8005422:	d003      	beq.n	800542c <HAL_TIM_IC_Start_DMA+0xac>
    __HAL_TIM_ENABLE(htim);
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	602b      	str	r3, [r5, #0]
}
 800542c:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) && (Length > 0U))
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0bd      	beq.n	80053ae <HAL_TIM_IC_Start_DMA+0x2e>
    return HAL_ERROR;
 8005432:	2001      	movs	r0, #1
}
 8005434:	bd70      	pop	{r4, r5, r6, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005436:	2904      	cmp	r1, #4
 8005438:	d009      	beq.n	800544e <HAL_TIM_IC_Start_DMA+0xce>
 800543a:	2908      	cmp	r1, #8
 800543c:	d00f      	beq.n	800545e <HAL_TIM_IC_Start_DMA+0xde>
 800543e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005442:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005446:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005448:	fa5f fc8c 	uxtb.w	ip, ip
 800544c:	e7a3      	b.n	8005396 <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800544e:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005452:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005456:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005458:	fa5f fc8c 	uxtb.w	ip, ip
 800545c:	e79b      	b.n	8005396 <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800545e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005462:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005466:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005468:	fa5f fc8c 	uxtb.w	ip, ip
 800546c:	e793      	b.n	8005396 <HAL_TIM_IC_Start_DMA+0x16>
    return HAL_BUSY;
 800546e:	4660      	mov	r0, ip
}
 8005470:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	2904      	cmp	r1, #4
 8005474:	d040      	beq.n	80054f8 <HAL_TIM_IC_Start_DMA+0x178>
 8005476:	2908      	cmp	r1, #8
 8005478:	d01d      	beq.n	80054b6 <HAL_TIM_IC_Start_DMA+0x136>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800547a:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547c:	2002      	movs	r0, #2
 800547e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 8005486:	6a2e      	ldr	r6, [r5, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005488:	f001 0c1f 	and.w	ip, r1, #31
 800548c:	2001      	movs	r0, #1
 800548e:	fa00 f00c 	lsl.w	r0, r0, ip
  TIMx->CCER &= ~tmp;
 8005492:	ea26 0600 	bic.w	r6, r6, r0
 8005496:	622e      	str	r6, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005498:	6a2e      	ldr	r6, [r5, #32]
  switch (Channel)
 800549a:	3904      	subs	r1, #4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800549c:	4330      	orrs	r0, r6
 800549e:	6228      	str	r0, [r5, #32]
  switch (Channel)
 80054a0:	2908      	cmp	r1, #8
 80054a2:	d806      	bhi.n	80054b2 <HAL_TIM_IC_Start_DMA+0x132>
 80054a4:	e8df f001 	tbb	[pc, r1]
 80054a8:	05050536 	.word	0x05050536
 80054ac:	05050515 	.word	0x05050515
 80054b0:	49          	.byte	0x49
 80054b1:	00          	.byte	0x00
 80054b2:	2001      	movs	r0, #1
 80054b4:	e79b      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x6e>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b6:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b8:	2102      	movs	r1, #2
 80054ba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  TIMx->CCER &= ~tmp;
 80054c2:	6a29      	ldr	r1, [r5, #32]
 80054c4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80054c8:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054ca:	6a29      	ldr	r1, [r5, #32]
 80054cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80054d0:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80054d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80054d4:	f105 013c 	add.w	r1, r5, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80054d8:	4d22      	ldr	r5, [pc, #136]	; (8005564 <HAL_TIM_IC_Start_DMA+0x1e4>)
 80054da:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80054dc:	4d22      	ldr	r5, [pc, #136]	; (8005568 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80054de:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80054e0:	4d22      	ldr	r5, [pc, #136]	; (800556c <HAL_TIM_IC_Start_DMA+0x1ec>)
 80054e2:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80054e4:	f7fd fb10 	bl	8002b08 <HAL_DMA_Start_IT>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d1a2      	bne.n	8005432 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	68eb      	ldr	r3, [r5, #12]
 80054f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054f4:	60eb      	str	r3, [r5, #12]
      break;
 80054f6:	e77a      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x6e>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f8:	6825      	ldr	r5, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	2102      	movs	r1, #2
 80054fc:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8005504:	6a29      	ldr	r1, [r5, #32]
 8005506:	f021 0110 	bic.w	r1, r1, #16
 800550a:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800550c:	6a29      	ldr	r1, [r5, #32]
 800550e:	f041 0110 	orr.w	r1, r1, #16
 8005512:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005514:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005516:	f105 0138 	add.w	r1, r5, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800551a:	4d12      	ldr	r5, [pc, #72]	; (8005564 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800551c:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800551e:	4d12      	ldr	r5, [pc, #72]	; (8005568 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8005520:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005522:	4d12      	ldr	r5, [pc, #72]	; (800556c <HAL_TIM_IC_Start_DMA+0x1ec>)
 8005524:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005526:	f7fd faef 	bl	8002b08 <HAL_DMA_Start_IT>
 800552a:	2800      	cmp	r0, #0
 800552c:	d181      	bne.n	8005432 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800552e:	6825      	ldr	r5, [r4, #0]
 8005530:	68eb      	ldr	r3, [r5, #12]
 8005532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005536:	60eb      	str	r3, [r5, #12]
      break;
 8005538:	e759      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800553a:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800553c:	f105 0140 	add.w	r1, r5, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005540:	4d08      	ldr	r5, [pc, #32]	; (8005564 <HAL_TIM_IC_Start_DMA+0x1e4>)
 8005542:	63c5      	str	r5, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005544:	4d08      	ldr	r5, [pc, #32]	; (8005568 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8005546:	6405      	str	r5, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005548:	4d08      	ldr	r5, [pc, #32]	; (800556c <HAL_TIM_IC_Start_DMA+0x1ec>)
 800554a:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800554c:	f7fd fadc 	bl	8002b08 <HAL_DMA_Start_IT>
 8005550:	2800      	cmp	r0, #0
 8005552:	f47f af6e 	bne.w	8005432 <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	68eb      	ldr	r3, [r5, #12]
 800555a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800555e:	60eb      	str	r3, [r5, #12]
      break;
 8005560:	e745      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x6e>
 8005562:	bf00      	nop
 8005564:	08005a95 	.word	0x08005a95
 8005568:	08005b2d 	.word	0x08005b2d
 800556c:	08005ce9 	.word	0x08005ce9
 8005570:	40010000 	.word	0x40010000

08005574 <HAL_TIM_IC_ConfigChannel>:
{
 8005574:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005576:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800557a:	2801      	cmp	r0, #1
 800557c:	f000 80cc 	beq.w	8005718 <HAL_TIM_IC_ConfigChannel+0x1a4>
 8005580:	2001      	movs	r0, #1
{
 8005582:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005584:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005588:	b15a      	cbz	r2, 80055a2 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 800558a:	2a04      	cmp	r2, #4
 800558c:	d04c      	beq.n	8005628 <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 800558e:	2a08      	cmp	r2, #8
 8005590:	f000 809a 	beq.w	80056c8 <HAL_TIM_IC_ConfigChannel+0x154>
  else if (Channel == TIM_CHANNEL_4)
 8005594:	2a0c      	cmp	r2, #12
 8005596:	d071      	beq.n	800567c <HAL_TIM_IC_ConfigChannel+0x108>
  __HAL_UNLOCK(htim);
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800559e:	bcf0      	pop	{r4, r5, r6, r7}
 80055a0:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 80055a2:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055a4:	f8df c174 	ldr.w	ip, [pc, #372]	; 800571c <HAL_TIM_IC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a8:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 80055aa:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ac:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 80055b0:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055b4:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b6:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b8:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 80055ba:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055bc:	d015      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
 80055be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80055c2:	d012      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
 80055c4:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 80055c8:	4562      	cmp	r2, ip
 80055ca:	d00e      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
 80055cc:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80055d0:	4562      	cmp	r2, ip
 80055d2:	d00a      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
 80055d4:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80055d8:	4562      	cmp	r2, ip
 80055da:	d006      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
 80055dc:	f50c 3c9a 	add.w	ip, ip, #78848	; 0x13400
 80055e0:	4562      	cmp	r2, ip
 80055e2:	d002      	beq.n	80055ea <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055e4:	f047 0c01 	orr.w	ip, r7, #1
 80055e8:	e003      	b.n	80055f2 <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055ea:	f027 0c03 	bic.w	ip, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 80055ee:	ea45 0c0c 	orr.w	ip, r5, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055f2:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f4:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055f8:	b2c0      	uxtb	r0, r0
 80055fa:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005600:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005604:	f004 000a 	and.w	r0, r4, #10
 8005608:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 800560a:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800560c:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800560e:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005610:	f020 000c 	bic.w	r0, r0, #12
 8005614:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005616:	6991      	ldr	r1, [r2, #24]
 8005618:	4321      	orrs	r1, r4
 800561a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2000      	movs	r0, #0
}
 8005624:	bcf0      	pop	{r4, r5, r6, r7}
 8005626:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562e:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005630:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005632:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005636:	f000 04a0 	and.w	r4, r0, #160	; 0xa0
    TIM_TI2_SetConfig(htim->Instance,
 800563a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563c:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800563e:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8005640:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005642:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005646:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800564a:	0300      	lsls	r0, r0, #12
 800564c:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005652:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8005654:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005656:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005658:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800565c:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer;
 800565e:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005660:	6994      	ldr	r4, [r2, #24]
 8005662:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8005666:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005668:	6991      	ldr	r1, [r2, #24]
 800566a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800566e:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2000      	movs	r0, #0
}
 8005678:	bcf0      	pop	{r4, r5, r6, r7}
 800567a:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005682:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005684:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005686:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800568a:	f400 4420 	and.w	r4, r0, #40960	; 0xa000
    TIM_TI4_SetConfig(htim->Instance,
 800568e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005690:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005692:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8005694:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005696:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800569a:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800569c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056a0:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056a6:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80056a8:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 80056aa:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056ac:	f420 4020 	bic.w	r0, r0, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056b0:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer ;
 80056b2:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056b4:	69d4      	ldr	r4, [r2, #28]
 80056b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80056ba:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056bc:	69d1      	ldr	r1, [r2, #28]
 80056be:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056c4:	61d1      	str	r1, [r2, #28]
 80056c6:	e767      	b.n	8005598 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	e9d1 0400 	ldrd	r0, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ce:	6a16      	ldr	r6, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056d0:	0200      	lsls	r0, r0, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d2:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056d6:	f400 6520 	and.w	r5, r0, #2560	; 0xa00
    TIM_TI3_SetConfig(htim->Instance,
 80056da:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056dc:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056de:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80056e0:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056e2:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 80056e6:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056e8:	0100      	lsls	r0, r0, #4
 80056ea:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056ec:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056f0:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80056f2:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 80056f4:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056f6:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056fa:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 80056fc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056fe:	69d4      	ldr	r4, [r2, #28]
 8005700:	f024 040c 	bic.w	r4, r4, #12
 8005704:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005706:	69d1      	ldr	r1, [r2, #28]
 8005708:	4331      	orrs	r1, r6
 800570a:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005712:	2000      	movs	r0, #0
}
 8005714:	bcf0      	pop	{r4, r5, r6, r7}
 8005716:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005718:	2002      	movs	r0, #2
}
 800571a:	4770      	bx	lr
 800571c:	40010000 	.word	0x40010000

08005720 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005720:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	f000 80ca 	beq.w	80058be <HAL_TIM_PWM_ConfigChannel+0x19e>
 800572a:	2301      	movs	r3, #1
{
 800572c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800572e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005732:	2a0c      	cmp	r2, #12
 8005734:	d808      	bhi.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x28>
 8005736:	e8df f002 	tbb	[pc, r2]
 800573a:	073d      	.short	0x073d
 800573c:	07680707 	.word	0x07680707
 8005740:	07960707 	.word	0x07960707
 8005744:	0707      	.short	0x0707
 8005746:	0e          	.byte	0x0e
 8005747:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005748:	2300      	movs	r3, #0
 800574a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800574e:	2201      	movs	r2, #1
}
 8005750:	4610      	mov	r0, r2
 8005752:	bcf0      	pop	{r4, r5, r6, r7}
 8005754:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005756:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005760:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005762:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005764:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005766:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005768:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005770:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005776:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577a:	4e6b      	ldr	r6, [pc, #428]	; (8005928 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800577c:	42b3      	cmp	r3, r6
 800577e:	f000 80bd 	beq.w	80058fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
  TIMx->CR2 = tmpcr2;
 8005782:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005784:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005786:	684c      	ldr	r4, [r1, #4]
 8005788:	641c      	str	r4, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800578a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800578c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005796:	69dc      	ldr	r4, [r3, #28]
 8005798:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800579c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80057a4:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 80057a6:	2300      	movs	r3, #0
 80057a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2200      	movs	r2, #0
}
 80057ae:	4610      	mov	r0, r2
 80057b0:	bcf0      	pop	{r4, r5, r6, r7}
 80057b2:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80057b6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80057c0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80057c2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80057c4:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80057ca:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 80057cc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80057ce:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d4:	4e54      	ldr	r6, [pc, #336]	; (8005928 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80057d6:	42b3      	cmp	r3, r6
 80057d8:	d074      	beq.n	80058c4 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 80057da:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057dc:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80057de:	684c      	ldr	r4, [r1, #4]
 80057e0:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80057e2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057e6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ee:	699c      	ldr	r4, [r3, #24]
 80057f0:	f024 0404 	bic.w	r4, r4, #4
 80057f4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f6:	6999      	ldr	r1, [r3, #24]
 80057f8:	4329      	orrs	r1, r5
 80057fa:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80057fc:	2300      	movs	r3, #0
 80057fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2200      	movs	r2, #0
}
 8005804:	4610      	mov	r0, r2
 8005806:	bcf0      	pop	{r4, r5, r6, r7}
 8005808:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800580a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	f022 0210 	bic.w	r2, r2, #16
 8005814:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005816:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005818:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800581a:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005824:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005826:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800582a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800582e:	4e3e      	ldr	r6, [pc, #248]	; (8005928 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005830:	42b3      	cmp	r3, r6
 8005832:	d054      	beq.n	80058de <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8005834:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005836:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005838:	684c      	ldr	r4, [r1, #4]
 800583a:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800583c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800583e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005840:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	699c      	ldr	r4, [r3, #24]
 800584a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800584e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005856:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005858:	2300      	movs	r3, #0
 800585a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800585e:	2200      	movs	r2, #0
}
 8005860:	4610      	mov	r0, r2
 8005862:	bcf0      	pop	{r4, r5, r6, r7}
 8005864:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005866:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005868:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005870:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005872:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005874:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005876:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005878:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800587c:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005880:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005884:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005888:	4e27      	ldr	r6, [pc, #156]	; (8005928 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800588a:	42b3      	cmp	r3, r6
 800588c:	d03c      	beq.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 800588e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005890:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005892:	684c      	ldr	r4, [r1, #4]
 8005894:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005896:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005898:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800589c:	f042 0208 	orr.w	r2, r2, #8
 80058a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a2:	69dc      	ldr	r4, [r3, #28]
 80058a4:	f024 0404 	bic.w	r4, r4, #4
 80058a8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	4329      	orrs	r1, r5
 80058ae:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 80058b0:	2300      	movs	r3, #0
 80058b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2200      	movs	r2, #0
}
 80058b8:	4610      	mov	r0, r2
 80058ba:	bcf0      	pop	{r4, r5, r6, r7}
 80058bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80058be:	2202      	movs	r2, #2
}
 80058c0:	4610      	mov	r0, r2
 80058c2:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80058c4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c6:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80058ca:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80058cc:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d0:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80058da:	4335      	orrs	r5, r6
 80058dc:	e77d      	b.n	80057da <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058de:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058e4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e8:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ec:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f0:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f6:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80058fa:	e79b      	b.n	8005834 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058fc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058fe:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005902:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005906:	e73c      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005908:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800590a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005912:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005916:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800591a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800591c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005920:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8005924:	e7b3      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x16e>
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000

0800592c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800592c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d075      	beq.n	8005a20 <HAL_TIM_ConfigClockSource+0xf4>
 8005934:	4602      	mov	r2, r0
{
 8005936:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800593a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005940:	2001      	movs	r0, #1
 8005942:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005946:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005950:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	2b60      	cmp	r3, #96	; 0x60
 8005956:	d065      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xf8>
 8005958:	d824      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x78>
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d07c      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0x12c>
 800595e:	d94b      	bls.n	80059f8 <HAL_TIM_ConfigClockSource+0xcc>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d117      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005964:	6848      	ldr	r0, [r1, #4]
 8005966:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005968:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596a:	6a23      	ldr	r3, [r4, #32]
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005974:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800597c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005982:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005984:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005986:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800598c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005992:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005994:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005996:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005998:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800599c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80059a0:	bc30      	pop	{r4, r5}
 80059a2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	d038      	beq.n	8005a1c <HAL_TIM_ConfigClockSource+0xf0>
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d110      	bne.n	80059d2 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80059b4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b6:	432b      	orrs	r3, r5
 80059b8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ba:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80059c2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80059c4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ce:	60a3      	str	r3, [r4, #8]
      break;
 80059d0:	e7e0      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80059d2:	2b70      	cmp	r3, #112	; 0x70
 80059d4:	d1de      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80059da:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059dc:	432b      	orrs	r3, r5
 80059de:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80059e8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80059ea:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80059ec:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80059f4:	60a3      	str	r3, [r4, #8]
      break;
 80059f6:	e7cd      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d002      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xd6>
 80059fc:	d90a      	bls.n	8005a14 <HAL_TIM_ConfigClockSource+0xe8>
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	d1c8      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005a02:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a04:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005a10:	60a3      	str	r3, [r4, #8]
}
 8005a12:	e7bf      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005a14:	f033 0110 	bics.w	r1, r3, #16
 8005a18:	d1bc      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
 8005a1a:	e7f2      	b.n	8005a02 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7b9      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8005a20:	2002      	movs	r0, #2
}
 8005a22:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a26:	68cb      	ldr	r3, [r1, #12]
 8005a28:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	f020 0010 	bic.w	r0, r0, #16
 8005a2e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a30:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a32:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8005a3a:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3c:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8005a46:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005a48:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005a54:	60a3      	str	r3, [r4, #8]
}
 8005a56:	e79d      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a58:	6848      	ldr	r0, [r1, #4]
 8005a5a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005a5c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5e:	6a23      	ldr	r3, [r4, #32]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a66:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a68:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005a70:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a72:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005a76:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005a78:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005a7a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a80:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005a86:	60a3      	str	r3, [r4, #8]
}
 8005a88:	e784      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x68>
 8005a8a:	bf00      	nop

08005a8c <HAL_TIM_OC_DelayElapsedCallback>:
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <HAL_TIM_IC_CaptureCallback>:
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <TIM_DMACaptureCplt>:
{
 8005a94:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a96:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	d01e      	beq.n	8005adc <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005aa0:	4283      	cmp	r3, r0
 8005aa2:	d00b      	beq.n	8005abc <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005aa6:	4283      	cmp	r3, r0
 8005aa8:	d027      	beq.n	8005afa <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005aaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aac:	4283      	cmp	r3, r0
 8005aae:	d02f      	beq.n	8005b10 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff ffed 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	7723      	strb	r3, [r4, #28]
}
 8005aba:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005abc:	2202      	movs	r2, #2
 8005abe:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f4      	bne.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_IC_CaptureCallback(htim);
 8005acc:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	f7ff ffdd 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	7723      	strb	r3, [r4, #28]
}
 8005ada:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005adc:	2201      	movs	r2, #1
 8005ade:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e4      	bne.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_IC_CaptureCallback(htim);
 8005af0:	f7ff ffce 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af4:	2300      	movs	r3, #0
 8005af6:	7723      	strb	r3, [r4, #28]
}
 8005af8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005afa:	2204      	movs	r2, #4
 8005afc:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1d5      	bne.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	2301      	movs	r3, #1
 8005b06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b0e:	e7cf      	b.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b10:	2208      	movs	r2, #8
 8005b12:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1ca      	bne.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b24:	e7c4      	b.n	8005ab0 <TIM_DMACaptureCplt+0x1c>
 8005b26:	bf00      	nop

08005b28 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <TIM_DMACaptureHalfCplt>:
{
 8005b2c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b2e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b32:	4283      	cmp	r3, r0
 8005b34:	d018      	beq.n	8005b68 <TIM_DMACaptureHalfCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b38:	4283      	cmp	r3, r0
 8005b3a:	d00d      	beq.n	8005b58 <TIM_DMACaptureHalfCplt+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b3e:	4283      	cmp	r3, r0
 8005b40:	d01a      	beq.n	8005b78 <TIM_DMACaptureHalfCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b44:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b46:	bf04      	itt	eq
 8005b48:	2308      	moveq	r3, #8
 8005b4a:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff ffeb 	bl	8005b28 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	2300      	movs	r3, #0
 8005b54:	7723      	strb	r3, [r4, #28]
}
 8005b56:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7ff ffe3 	bl	8005b28 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	7723      	strb	r3, [r4, #28]
}
 8005b66:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff ffdb 	bl	8005b28 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	2300      	movs	r3, #0
 8005b74:	7723      	strb	r3, [r4, #28]
}
 8005b76:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff ffd3 	bl	8005b28 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	2300      	movs	r3, #0
 8005b84:	7723      	strb	r3, [r4, #28]
}
 8005b86:	bd10      	pop	{r4, pc}

08005b88 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop

08005b8c <HAL_TIM_TriggerCallback>:
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b90:	6803      	ldr	r3, [r0, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	0791      	lsls	r1, r2, #30
{
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b9a:	d502      	bpl.n	8005ba2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	0792      	lsls	r2, r2, #30
 8005ba0:	d45f      	bmi.n	8005c62 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	0750      	lsls	r0, r2, #29
 8005ba6:	d502      	bpl.n	8005bae <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	0751      	lsls	r1, r2, #29
 8005bac:	d446      	bmi.n	8005c3c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	0712      	lsls	r2, r2, #28
 8005bb2:	d502      	bpl.n	8005bba <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	0710      	lsls	r0, r2, #28
 8005bb8:	d42e      	bmi.n	8005c18 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	06d2      	lsls	r2, r2, #27
 8005bbe:	d502      	bpl.n	8005bc6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	06d0      	lsls	r0, r2, #27
 8005bc4:	d418      	bmi.n	8005bf8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	07d1      	lsls	r1, r2, #31
 8005bca:	d502      	bpl.n	8005bd2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	07d2      	lsls	r2, r2, #31
 8005bd0:	d45d      	bmi.n	8005c8e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	0610      	lsls	r0, r2, #24
 8005bd6:	d502      	bpl.n	8005bde <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	0611      	lsls	r1, r2, #24
 8005bdc:	d45f      	bmi.n	8005c9e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	0652      	lsls	r2, r2, #25
 8005be2:	d502      	bpl.n	8005bea <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	0650      	lsls	r0, r2, #25
 8005be8:	d461      	bmi.n	8005cae <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	0691      	lsls	r1, r2, #26
 8005bee:	d502      	bpl.n	8005bf6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	0692      	lsls	r2, r2, #26
 8005bf4:	d443      	bmi.n	8005c7e <HAL_TIM_IRQHandler+0xee>
}
 8005bf6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bfe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c00:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005c08:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c0a:	d064      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	f7ff ff40 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c10:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c12:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c14:	7722      	strb	r2, [r4, #28]
 8005c16:	e7d6      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c18:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c1c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c1e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c20:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c28:	d152      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	f7ff ff2f 	bl	8005a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f7ff ffaa 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c34:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c36:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c38:	7722      	strb	r2, [r4, #28]
 8005c3a:	e7be      	b.n	8005bba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c3c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c40:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c42:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c44:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c4e:	d13c      	bne.n	8005cca <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c50:	f7ff ff1c 	bl	8005a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff ff97 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c5c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	7722      	strb	r2, [r4, #28]
 8005c60:	e7a5      	b.n	8005bae <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c62:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c66:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c68:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c6a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	079b      	lsls	r3, r3, #30
 8005c70:	d025      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	f7ff ff0d 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c78:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	7722      	strb	r2, [r4, #28]
 8005c7c:	e791      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005c82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c84:	611a      	str	r2, [r3, #16]
}
 8005c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005c8a:	f000 b8a7 	b.w	8005ddc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c8e:	f06f 0201 	mvn.w	r2, #1
 8005c92:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c94:	4620      	mov	r0, r4
 8005c96:	f7fb fb27 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	e799      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ca2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f89b 	bl	8005de0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	e797      	b.n	8005bde <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7ff ff69 	bl	8005b8c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	e795      	b.n	8005bea <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	f7ff fee5 	bl	8005a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff ff60 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8005cc8:	e7d5      	b.n	8005c76 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	f7ff fee1 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 8005cce:	e7c4      	b.n	8005c5a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd0:	f7ff fede 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e7ae      	b.n	8005c34 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	f7ff fed9 	bl	8005a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff ff54 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ce0:	e796      	b.n	8005c10 <HAL_TIM_IRQHandler+0x80>
 8005ce2:	bf00      	nop

08005ce4 <HAL_TIM_ErrorCallback>:
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop

08005ce8 <TIM_DMAError>:
{
 8005ce8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	d01c      	beq.n	8005d2c <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cf4:	4283      	cmp	r3, r0
 8005cf6:	d00e      	beq.n	8005d16 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cfa:	4283      	cmp	r3, r0
 8005cfc:	d020      	beq.n	8005d40 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d00:	4283      	cmp	r3, r0
 8005d02:	d028      	beq.n	8005d56 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff ffea 	bl	8005ce4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d10:	2300      	movs	r3, #0
 8005d12:	7723      	strb	r3, [r4, #28]
}
 8005d14:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d18:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d1e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff ffdf 	bl	8005ce4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	2300      	movs	r3, #0
 8005d28:	7723      	strb	r3, [r4, #28]
}
 8005d2a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8005d34:	4620      	mov	r0, r4
 8005d36:	f7ff ffd5 	bl	8005ce4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	7723      	strb	r3, [r4, #28]
}
 8005d3e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d42:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d48:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff ffca 	bl	8005ce4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d50:	2300      	movs	r3, #0
 8005d52:	7723      	strb	r3, [r4, #28]
}
 8005d54:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d58:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7ff ffbf 	bl	8005ce4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	2300      	movs	r3, #0
 8005d68:	7723      	strb	r3, [r4, #28]
}
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d02f      	beq.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d74:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d76:	2202      	movs	r2, #2
{
 8005d78:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005d7e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d80:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005d82:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d88:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d012      	beq.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d00f      	beq.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005db0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db8:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dbe:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005dc2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005dce:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005dd0:	4618      	mov	r0, r3
}
 8005dd2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005dd4:	2002      	movs	r0, #2
}
 8005dd6:	4770      	bx	lr
 8005dd8:	40010000 	.word	0x40010000

08005ddc <HAL_TIMEx_CommutCallback>:
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop

08005de0 <HAL_TIMEx_BreakCallback>:
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop

08005de4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f000 808f 	beq.w	8005f08 <HAL_UART_Init+0x124>
{
 8005dea:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005df0:	4604      	mov	r4, r0
 8005df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8081 	beq.w	8005efe <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dfc:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfe:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005e00:	2224      	movs	r2, #36	; 0x24
 8005e02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0e:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e10:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e12:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005e16:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e18:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1a:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e1c:	4302      	orrs	r2, r0
 8005e1e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005e20:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e22:	4302      	orrs	r2, r0
 8005e24:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005e26:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005e2a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e2e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005e30:	430a      	orrs	r2, r1
 8005e32:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e38:	4934      	ldr	r1, [pc, #208]	; (8005f0c <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e3e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e40:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e42:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e44:	d035      	beq.n	8005eb2 <HAL_UART_Init+0xce>
 8005e46:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <HAL_UART_Init+0x12c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d032      	beq.n	8005eb2 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7ff f834 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e50:	69e3      	ldr	r3, [r4, #28]
 8005e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e56:	d032      	beq.n	8005ebe <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e58:	6863      	ldr	r3, [r4, #4]
 8005e5a:	2119      	movs	r1, #25
 8005e5c:	009a      	lsls	r2, r3, #2
 8005e5e:	fba0 0101 	umull	r0, r1, r0, r1
 8005e62:	0f9b      	lsrs	r3, r3, #30
 8005e64:	f7fa fdca 	bl	80009fc <__aeabi_uldivmod>
 8005e68:	492a      	ldr	r1, [pc, #168]	; (8005f14 <HAL_UART_Init+0x130>)
 8005e6a:	fba1 3200 	umull	r3, r2, r1, r0
 8005e6e:	0952      	lsrs	r2, r2, #5
 8005e70:	2564      	movs	r5, #100	; 0x64
 8005e72:	fb05 0012 	mls	r0, r5, r2, r0
 8005e76:	0100      	lsls	r0, r0, #4
 8005e78:	3032      	adds	r0, #50	; 0x32
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	fba1 1000 	umull	r1, r0, r1, r0
 8005e80:	0112      	lsls	r2, r2, #4
 8005e82:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8005e86:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e96:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005e98:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005e9c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8005eae:	4628      	mov	r0, r5
}
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb2:	f7ff f811 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb6:	69e3      	ldr	r3, [r4, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d1cc      	bne.n	8005e58 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ebe:	6862      	ldr	r2, [r4, #4]
 8005ec0:	2119      	movs	r1, #25
 8005ec2:	1892      	adds	r2, r2, r2
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	fba0 0101 	umull	r0, r1, r0, r1
 8005ece:	f7fa fd95 	bl	80009fc <__aeabi_uldivmod>
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_UART_Init+0x130>)
 8005ed4:	fba3 2100 	umull	r2, r1, r3, r0
 8005ed8:	094d      	lsrs	r5, r1, #5
 8005eda:	2264      	movs	r2, #100	; 0x64
 8005edc:	fb02 0215 	mls	r2, r2, r5, r0
 8005ee0:	00d2      	lsls	r2, r2, #3
 8005ee2:	3232      	adds	r2, #50	; 0x32
 8005ee4:	fba3 3202 	umull	r3, r2, r3, r2
 8005ee8:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005eec:	0912      	lsrs	r2, r2, #4
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8005ef4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005ef8:	440a      	add	r2, r1
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	e7c4      	b.n	8005e88 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005efe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005f02:	f7fc fb85 	bl	8002610 <HAL_UART_MspInit>
 8005f06:	e779      	b.n	8005dfc <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005f08:	2001      	movs	r0, #1
}
 8005f0a:	4770      	bx	lr
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	40011400 	.word	0x40011400
 8005f14:	51eb851f 	.word	0x51eb851f

08005f18 <__assert_func>:
 8005f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <__assert_func+0x2c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4605      	mov	r5, r0
 8005f24:	68d8      	ldr	r0, [r3, #12]
 8005f26:	b14c      	cbz	r4, 8005f3c <__assert_func+0x24>
 8005f28:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <__assert_func+0x30>)
 8005f2a:	9100      	str	r1, [sp, #0]
 8005f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f30:	4906      	ldr	r1, [pc, #24]	; (8005f4c <__assert_func+0x34>)
 8005f32:	462b      	mov	r3, r5
 8005f34:	f000 f814 	bl	8005f60 <fiprintf>
 8005f38:	f000 fbfe 	bl	8006738 <abort>
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <__assert_func+0x38>)
 8005f3e:	461c      	mov	r4, r3
 8005f40:	e7f3      	b.n	8005f2a <__assert_func+0x12>
 8005f42:	bf00      	nop
 8005f44:	2000003c 	.word	0x2000003c
 8005f48:	080074c4 	.word	0x080074c4
 8005f4c:	080074d1 	.word	0x080074d1
 8005f50:	080074ff 	.word	0x080074ff

08005f54 <__errno>:
 8005f54:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <__errno+0x8>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	2000003c 	.word	0x2000003c

08005f60 <fiprintf>:
 8005f60:	b40e      	push	{r1, r2, r3}
 8005f62:	b503      	push	{r0, r1, lr}
 8005f64:	4601      	mov	r1, r0
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	4805      	ldr	r0, [pc, #20]	; (8005f80 <fiprintf+0x20>)
 8005f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	f000 f85d 	bl	8006030 <_vfiprintf_r>
 8005f76:	b002      	add	sp, #8
 8005f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f7c:	b003      	add	sp, #12
 8005f7e:	4770      	bx	lr
 8005f80:	2000003c 	.word	0x2000003c

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 ffe2 	bl	8006f60 <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	080075a0 	.word	0x080075a0
 8005fc0:	080075a0 	.word	0x080075a0
 8005fc4:	080075a0 	.word	0x080075a0
 8005fc8:	080075a4 	.word	0x080075a4

08005fcc <memset>:
 8005fcc:	4402      	add	r2, r0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <__sfputc_r>:
 8005fdc:	6893      	ldr	r3, [r2, #8]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	b410      	push	{r4}
 8005fe4:	6093      	str	r3, [r2, #8]
 8005fe6:	da08      	bge.n	8005ffa <__sfputc_r+0x1e>
 8005fe8:	6994      	ldr	r4, [r2, #24]
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	db01      	blt.n	8005ff2 <__sfputc_r+0x16>
 8005fee:	290a      	cmp	r1, #10
 8005ff0:	d103      	bne.n	8005ffa <__sfputc_r+0x1e>
 8005ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff6:	f000 badf 	b.w	80065b8 <__swbuf_r>
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	1c58      	adds	r0, r3, #1
 8005ffe:	6010      	str	r0, [r2, #0]
 8006000:	7019      	strb	r1, [r3, #0]
 8006002:	4608      	mov	r0, r1
 8006004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006008:	4770      	bx	lr

0800600a <__sfputs_r>:
 800600a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600c:	4606      	mov	r6, r0
 800600e:	460f      	mov	r7, r1
 8006010:	4614      	mov	r4, r2
 8006012:	18d5      	adds	r5, r2, r3
 8006014:	42ac      	cmp	r4, r5
 8006016:	d101      	bne.n	800601c <__sfputs_r+0x12>
 8006018:	2000      	movs	r0, #0
 800601a:	e007      	b.n	800602c <__sfputs_r+0x22>
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	463a      	mov	r2, r7
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ffda 	bl	8005fdc <__sfputc_r>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d1f3      	bne.n	8006014 <__sfputs_r+0xa>
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006030 <_vfiprintf_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	460d      	mov	r5, r1
 8006036:	b09d      	sub	sp, #116	; 0x74
 8006038:	4614      	mov	r4, r2
 800603a:	4698      	mov	r8, r3
 800603c:	4606      	mov	r6, r0
 800603e:	b118      	cbz	r0, 8006048 <_vfiprintf_r+0x18>
 8006040:	6983      	ldr	r3, [r0, #24]
 8006042:	b90b      	cbnz	r3, 8006048 <_vfiprintf_r+0x18>
 8006044:	f000 fc9a 	bl	800697c <__sinit>
 8006048:	4b89      	ldr	r3, [pc, #548]	; (8006270 <_vfiprintf_r+0x240>)
 800604a:	429d      	cmp	r5, r3
 800604c:	d11b      	bne.n	8006086 <_vfiprintf_r+0x56>
 800604e:	6875      	ldr	r5, [r6, #4]
 8006050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006052:	07d9      	lsls	r1, r3, #31
 8006054:	d405      	bmi.n	8006062 <_vfiprintf_r+0x32>
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	059a      	lsls	r2, r3, #22
 800605a:	d402      	bmi.n	8006062 <_vfiprintf_r+0x32>
 800605c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800605e:	f000 fd2b 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	071b      	lsls	r3, r3, #28
 8006066:	d501      	bpl.n	800606c <_vfiprintf_r+0x3c>
 8006068:	692b      	ldr	r3, [r5, #16]
 800606a:	b9eb      	cbnz	r3, 80060a8 <_vfiprintf_r+0x78>
 800606c:	4629      	mov	r1, r5
 800606e:	4630      	mov	r0, r6
 8006070:	f000 faf4 	bl	800665c <__swsetup_r>
 8006074:	b1c0      	cbz	r0, 80060a8 <_vfiprintf_r+0x78>
 8006076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006078:	07dc      	lsls	r4, r3, #31
 800607a:	d50e      	bpl.n	800609a <_vfiprintf_r+0x6a>
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	b01d      	add	sp, #116	; 0x74
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	4b7b      	ldr	r3, [pc, #492]	; (8006274 <_vfiprintf_r+0x244>)
 8006088:	429d      	cmp	r5, r3
 800608a:	d101      	bne.n	8006090 <_vfiprintf_r+0x60>
 800608c:	68b5      	ldr	r5, [r6, #8]
 800608e:	e7df      	b.n	8006050 <_vfiprintf_r+0x20>
 8006090:	4b79      	ldr	r3, [pc, #484]	; (8006278 <_vfiprintf_r+0x248>)
 8006092:	429d      	cmp	r5, r3
 8006094:	bf08      	it	eq
 8006096:	68f5      	ldreq	r5, [r6, #12]
 8006098:	e7da      	b.n	8006050 <_vfiprintf_r+0x20>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	0598      	lsls	r0, r3, #22
 800609e:	d4ed      	bmi.n	800607c <_vfiprintf_r+0x4c>
 80060a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060a2:	f000 fd0a 	bl	8006aba <__retarget_lock_release_recursive>
 80060a6:	e7e9      	b.n	800607c <_vfiprintf_r+0x4c>
 80060a8:	2300      	movs	r3, #0
 80060aa:	9309      	str	r3, [sp, #36]	; 0x24
 80060ac:	2320      	movs	r3, #32
 80060ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b6:	2330      	movs	r3, #48	; 0x30
 80060b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800627c <_vfiprintf_r+0x24c>
 80060bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c0:	f04f 0901 	mov.w	r9, #1
 80060c4:	4623      	mov	r3, r4
 80060c6:	469a      	mov	sl, r3
 80060c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060cc:	b10a      	cbz	r2, 80060d2 <_vfiprintf_r+0xa2>
 80060ce:	2a25      	cmp	r2, #37	; 0x25
 80060d0:	d1f9      	bne.n	80060c6 <_vfiprintf_r+0x96>
 80060d2:	ebba 0b04 	subs.w	fp, sl, r4
 80060d6:	d00b      	beq.n	80060f0 <_vfiprintf_r+0xc0>
 80060d8:	465b      	mov	r3, fp
 80060da:	4622      	mov	r2, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ff93 	bl	800600a <__sfputs_r>
 80060e4:	3001      	adds	r0, #1
 80060e6:	f000 80aa 	beq.w	800623e <_vfiprintf_r+0x20e>
 80060ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ec:	445a      	add	r2, fp
 80060ee:	9209      	str	r2, [sp, #36]	; 0x24
 80060f0:	f89a 3000 	ldrb.w	r3, [sl]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80a2 	beq.w	800623e <_vfiprintf_r+0x20e>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006104:	f10a 0a01 	add.w	sl, sl, #1
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	9307      	str	r3, [sp, #28]
 800610c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006110:	931a      	str	r3, [sp, #104]	; 0x68
 8006112:	4654      	mov	r4, sl
 8006114:	2205      	movs	r2, #5
 8006116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611a:	4858      	ldr	r0, [pc, #352]	; (800627c <_vfiprintf_r+0x24c>)
 800611c:	f7fa f860 	bl	80001e0 <memchr>
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	b9d8      	cbnz	r0, 800615c <_vfiprintf_r+0x12c>
 8006124:	06d1      	lsls	r1, r2, #27
 8006126:	bf44      	itt	mi
 8006128:	2320      	movmi	r3, #32
 800612a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800612e:	0713      	lsls	r3, r2, #28
 8006130:	bf44      	itt	mi
 8006132:	232b      	movmi	r3, #43	; 0x2b
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	f89a 3000 	ldrb.w	r3, [sl]
 800613c:	2b2a      	cmp	r3, #42	; 0x2a
 800613e:	d015      	beq.n	800616c <_vfiprintf_r+0x13c>
 8006140:	9a07      	ldr	r2, [sp, #28]
 8006142:	4654      	mov	r4, sl
 8006144:	2000      	movs	r0, #0
 8006146:	f04f 0c0a 	mov.w	ip, #10
 800614a:	4621      	mov	r1, r4
 800614c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006150:	3b30      	subs	r3, #48	; 0x30
 8006152:	2b09      	cmp	r3, #9
 8006154:	d94e      	bls.n	80061f4 <_vfiprintf_r+0x1c4>
 8006156:	b1b0      	cbz	r0, 8006186 <_vfiprintf_r+0x156>
 8006158:	9207      	str	r2, [sp, #28]
 800615a:	e014      	b.n	8006186 <_vfiprintf_r+0x156>
 800615c:	eba0 0308 	sub.w	r3, r0, r8
 8006160:	fa09 f303 	lsl.w	r3, r9, r3
 8006164:	4313      	orrs	r3, r2
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	46a2      	mov	sl, r4
 800616a:	e7d2      	b.n	8006112 <_vfiprintf_r+0xe2>
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	1d19      	adds	r1, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	9103      	str	r1, [sp, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	bfbb      	ittet	lt
 8006178:	425b      	neglt	r3, r3
 800617a:	f042 0202 	orrlt.w	r2, r2, #2
 800617e:	9307      	strge	r3, [sp, #28]
 8006180:	9307      	strlt	r3, [sp, #28]
 8006182:	bfb8      	it	lt
 8006184:	9204      	strlt	r2, [sp, #16]
 8006186:	7823      	ldrb	r3, [r4, #0]
 8006188:	2b2e      	cmp	r3, #46	; 0x2e
 800618a:	d10c      	bne.n	80061a6 <_vfiprintf_r+0x176>
 800618c:	7863      	ldrb	r3, [r4, #1]
 800618e:	2b2a      	cmp	r3, #42	; 0x2a
 8006190:	d135      	bne.n	80061fe <_vfiprintf_r+0x1ce>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d1a      	adds	r2, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9203      	str	r2, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a2:	3402      	adds	r4, #2
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800628c <_vfiprintf_r+0x25c>
 80061aa:	7821      	ldrb	r1, [r4, #0]
 80061ac:	2203      	movs	r2, #3
 80061ae:	4650      	mov	r0, sl
 80061b0:	f7fa f816 	bl	80001e0 <memchr>
 80061b4:	b140      	cbz	r0, 80061c8 <_vfiprintf_r+0x198>
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	eba0 000a 	sub.w	r0, r0, sl
 80061bc:	fa03 f000 	lsl.w	r0, r3, r0
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	4303      	orrs	r3, r0
 80061c4:	3401      	adds	r4, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061cc:	482c      	ldr	r0, [pc, #176]	; (8006280 <_vfiprintf_r+0x250>)
 80061ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d2:	2206      	movs	r2, #6
 80061d4:	f7fa f804 	bl	80001e0 <memchr>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d03f      	beq.n	800625c <_vfiprintf_r+0x22c>
 80061dc:	4b29      	ldr	r3, [pc, #164]	; (8006284 <_vfiprintf_r+0x254>)
 80061de:	bb1b      	cbnz	r3, 8006228 <_vfiprintf_r+0x1f8>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	3307      	adds	r3, #7
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	3308      	adds	r3, #8
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	443b      	add	r3, r7
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	e767      	b.n	80060c4 <_vfiprintf_r+0x94>
 80061f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f8:	460c      	mov	r4, r1
 80061fa:	2001      	movs	r0, #1
 80061fc:	e7a5      	b.n	800614a <_vfiprintf_r+0x11a>
 80061fe:	2300      	movs	r3, #0
 8006200:	3401      	adds	r4, #1
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 0c0a 	mov.w	ip, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006210:	3a30      	subs	r2, #48	; 0x30
 8006212:	2a09      	cmp	r2, #9
 8006214:	d903      	bls.n	800621e <_vfiprintf_r+0x1ee>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0c5      	beq.n	80061a6 <_vfiprintf_r+0x176>
 800621a:	9105      	str	r1, [sp, #20]
 800621c:	e7c3      	b.n	80061a6 <_vfiprintf_r+0x176>
 800621e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006222:	4604      	mov	r4, r0
 8006224:	2301      	movs	r3, #1
 8006226:	e7f0      	b.n	800620a <_vfiprintf_r+0x1da>
 8006228:	ab03      	add	r3, sp, #12
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	462a      	mov	r2, r5
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <_vfiprintf_r+0x258>)
 8006230:	a904      	add	r1, sp, #16
 8006232:	4630      	mov	r0, r6
 8006234:	f3af 8000 	nop.w
 8006238:	4607      	mov	r7, r0
 800623a:	1c78      	adds	r0, r7, #1
 800623c:	d1d6      	bne.n	80061ec <_vfiprintf_r+0x1bc>
 800623e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006240:	07d9      	lsls	r1, r3, #31
 8006242:	d405      	bmi.n	8006250 <_vfiprintf_r+0x220>
 8006244:	89ab      	ldrh	r3, [r5, #12]
 8006246:	059a      	lsls	r2, r3, #22
 8006248:	d402      	bmi.n	8006250 <_vfiprintf_r+0x220>
 800624a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800624c:	f000 fc35 	bl	8006aba <__retarget_lock_release_recursive>
 8006250:	89ab      	ldrh	r3, [r5, #12]
 8006252:	065b      	lsls	r3, r3, #25
 8006254:	f53f af12 	bmi.w	800607c <_vfiprintf_r+0x4c>
 8006258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625a:	e711      	b.n	8006080 <_vfiprintf_r+0x50>
 800625c:	ab03      	add	r3, sp, #12
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	462a      	mov	r2, r5
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <_vfiprintf_r+0x258>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	4630      	mov	r0, r6
 8006268:	f000 f880 	bl	800636c <_printf_i>
 800626c:	e7e4      	b.n	8006238 <_vfiprintf_r+0x208>
 800626e:	bf00      	nop
 8006270:	08007558 	.word	0x08007558
 8006274:	08007578 	.word	0x08007578
 8006278:	08007538 	.word	0x08007538
 800627c:	08007504 	.word	0x08007504
 8006280:	0800750e 	.word	0x0800750e
 8006284:	00000000 	.word	0x00000000
 8006288:	0800600b 	.word	0x0800600b
 800628c:	0800750a 	.word	0x0800750a

08006290 <_printf_common>:
 8006290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	4616      	mov	r6, r2
 8006296:	4699      	mov	r9, r3
 8006298:	688a      	ldr	r2, [r1, #8]
 800629a:	690b      	ldr	r3, [r1, #16]
 800629c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	bfb8      	it	lt
 80062a4:	4613      	movlt	r3, r2
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ac:	4607      	mov	r7, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	b10a      	cbz	r2, 80062b6 <_printf_common+0x26>
 80062b2:	3301      	adds	r3, #1
 80062b4:	6033      	str	r3, [r6, #0]
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	0699      	lsls	r1, r3, #26
 80062ba:	bf42      	ittt	mi
 80062bc:	6833      	ldrmi	r3, [r6, #0]
 80062be:	3302      	addmi	r3, #2
 80062c0:	6033      	strmi	r3, [r6, #0]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	f015 0506 	ands.w	r5, r5, #6
 80062c8:	d106      	bne.n	80062d8 <_printf_common+0x48>
 80062ca:	f104 0a19 	add.w	sl, r4, #25
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	6832      	ldr	r2, [r6, #0]
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dc26      	bgt.n	8006326 <_printf_common+0x96>
 80062d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062dc:	1e13      	subs	r3, r2, #0
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	bf18      	it	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	0692      	lsls	r2, r2, #26
 80062e6:	d42b      	bmi.n	8006340 <_printf_common+0xb0>
 80062e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ec:	4649      	mov	r1, r9
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c0      	blx	r8
 80062f2:	3001      	adds	r0, #1
 80062f4:	d01e      	beq.n	8006334 <_printf_common+0xa4>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	68e5      	ldr	r5, [r4, #12]
 80062fa:	6832      	ldr	r2, [r6, #0]
 80062fc:	f003 0306 	and.w	r3, r3, #6
 8006300:	2b04      	cmp	r3, #4
 8006302:	bf08      	it	eq
 8006304:	1aad      	subeq	r5, r5, r2
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	6922      	ldr	r2, [r4, #16]
 800630a:	bf0c      	ite	eq
 800630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006310:	2500      	movne	r5, #0
 8006312:	4293      	cmp	r3, r2
 8006314:	bfc4      	itt	gt
 8006316:	1a9b      	subgt	r3, r3, r2
 8006318:	18ed      	addgt	r5, r5, r3
 800631a:	2600      	movs	r6, #0
 800631c:	341a      	adds	r4, #26
 800631e:	42b5      	cmp	r5, r6
 8006320:	d11a      	bne.n	8006358 <_printf_common+0xc8>
 8006322:	2000      	movs	r0, #0
 8006324:	e008      	b.n	8006338 <_printf_common+0xa8>
 8006326:	2301      	movs	r3, #1
 8006328:	4652      	mov	r2, sl
 800632a:	4649      	mov	r1, r9
 800632c:	4638      	mov	r0, r7
 800632e:	47c0      	blx	r8
 8006330:	3001      	adds	r0, #1
 8006332:	d103      	bne.n	800633c <_printf_common+0xac>
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633c:	3501      	adds	r5, #1
 800633e:	e7c6      	b.n	80062ce <_printf_common+0x3e>
 8006340:	18e1      	adds	r1, r4, r3
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	2030      	movs	r0, #48	; 0x30
 8006346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800634a:	4422      	add	r2, r4
 800634c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006354:	3302      	adds	r3, #2
 8006356:	e7c7      	b.n	80062e8 <_printf_common+0x58>
 8006358:	2301      	movs	r3, #1
 800635a:	4622      	mov	r2, r4
 800635c:	4649      	mov	r1, r9
 800635e:	4638      	mov	r0, r7
 8006360:	47c0      	blx	r8
 8006362:	3001      	adds	r0, #1
 8006364:	d0e6      	beq.n	8006334 <_printf_common+0xa4>
 8006366:	3601      	adds	r6, #1
 8006368:	e7d9      	b.n	800631e <_printf_common+0x8e>
	...

0800636c <_printf_i>:
 800636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	7e0f      	ldrb	r7, [r1, #24]
 8006372:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006374:	2f78      	cmp	r7, #120	; 0x78
 8006376:	4691      	mov	r9, r2
 8006378:	4680      	mov	r8, r0
 800637a:	460c      	mov	r4, r1
 800637c:	469a      	mov	sl, r3
 800637e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006382:	d807      	bhi.n	8006394 <_printf_i+0x28>
 8006384:	2f62      	cmp	r7, #98	; 0x62
 8006386:	d80a      	bhi.n	800639e <_printf_i+0x32>
 8006388:	2f00      	cmp	r7, #0
 800638a:	f000 80d8 	beq.w	800653e <_printf_i+0x1d2>
 800638e:	2f58      	cmp	r7, #88	; 0x58
 8006390:	f000 80a3 	beq.w	80064da <_printf_i+0x16e>
 8006394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800639c:	e03a      	b.n	8006414 <_printf_i+0xa8>
 800639e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063a2:	2b15      	cmp	r3, #21
 80063a4:	d8f6      	bhi.n	8006394 <_printf_i+0x28>
 80063a6:	a101      	add	r1, pc, #4	; (adr r1, 80063ac <_printf_i+0x40>)
 80063a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ac:	08006405 	.word	0x08006405
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006395 	.word	0x08006395
 80063b8:	08006395 	.word	0x08006395
 80063bc:	08006395 	.word	0x08006395
 80063c0:	08006395 	.word	0x08006395
 80063c4:	08006419 	.word	0x08006419
 80063c8:	08006395 	.word	0x08006395
 80063cc:	08006395 	.word	0x08006395
 80063d0:	08006395 	.word	0x08006395
 80063d4:	08006395 	.word	0x08006395
 80063d8:	08006525 	.word	0x08006525
 80063dc:	08006449 	.word	0x08006449
 80063e0:	08006507 	.word	0x08006507
 80063e4:	08006395 	.word	0x08006395
 80063e8:	08006395 	.word	0x08006395
 80063ec:	08006547 	.word	0x08006547
 80063f0:	08006395 	.word	0x08006395
 80063f4:	08006449 	.word	0x08006449
 80063f8:	08006395 	.word	0x08006395
 80063fc:	08006395 	.word	0x08006395
 8006400:	0800650f 	.word	0x0800650f
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	1d1a      	adds	r2, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	602a      	str	r2, [r5, #0]
 800640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006414:	2301      	movs	r3, #1
 8006416:	e0a3      	b.n	8006560 <_printf_i+0x1f4>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	6829      	ldr	r1, [r5, #0]
 800641c:	0606      	lsls	r6, r0, #24
 800641e:	f101 0304 	add.w	r3, r1, #4
 8006422:	d50a      	bpl.n	800643a <_printf_i+0xce>
 8006424:	680e      	ldr	r6, [r1, #0]
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	2e00      	cmp	r6, #0
 800642a:	da03      	bge.n	8006434 <_printf_i+0xc8>
 800642c:	232d      	movs	r3, #45	; 0x2d
 800642e:	4276      	negs	r6, r6
 8006430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006434:	485e      	ldr	r0, [pc, #376]	; (80065b0 <_printf_i+0x244>)
 8006436:	230a      	movs	r3, #10
 8006438:	e019      	b.n	800646e <_printf_i+0x102>
 800643a:	680e      	ldr	r6, [r1, #0]
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006442:	bf18      	it	ne
 8006444:	b236      	sxthne	r6, r6
 8006446:	e7ef      	b.n	8006428 <_printf_i+0xbc>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	6820      	ldr	r0, [r4, #0]
 800644c:	1d19      	adds	r1, r3, #4
 800644e:	6029      	str	r1, [r5, #0]
 8006450:	0601      	lsls	r1, r0, #24
 8006452:	d501      	bpl.n	8006458 <_printf_i+0xec>
 8006454:	681e      	ldr	r6, [r3, #0]
 8006456:	e002      	b.n	800645e <_printf_i+0xf2>
 8006458:	0646      	lsls	r6, r0, #25
 800645a:	d5fb      	bpl.n	8006454 <_printf_i+0xe8>
 800645c:	881e      	ldrh	r6, [r3, #0]
 800645e:	4854      	ldr	r0, [pc, #336]	; (80065b0 <_printf_i+0x244>)
 8006460:	2f6f      	cmp	r7, #111	; 0x6f
 8006462:	bf0c      	ite	eq
 8006464:	2308      	moveq	r3, #8
 8006466:	230a      	movne	r3, #10
 8006468:	2100      	movs	r1, #0
 800646a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800646e:	6865      	ldr	r5, [r4, #4]
 8006470:	60a5      	str	r5, [r4, #8]
 8006472:	2d00      	cmp	r5, #0
 8006474:	bfa2      	ittt	ge
 8006476:	6821      	ldrge	r1, [r4, #0]
 8006478:	f021 0104 	bicge.w	r1, r1, #4
 800647c:	6021      	strge	r1, [r4, #0]
 800647e:	b90e      	cbnz	r6, 8006484 <_printf_i+0x118>
 8006480:	2d00      	cmp	r5, #0
 8006482:	d04d      	beq.n	8006520 <_printf_i+0x1b4>
 8006484:	4615      	mov	r5, r2
 8006486:	fbb6 f1f3 	udiv	r1, r6, r3
 800648a:	fb03 6711 	mls	r7, r3, r1, r6
 800648e:	5dc7      	ldrb	r7, [r0, r7]
 8006490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006494:	4637      	mov	r7, r6
 8006496:	42bb      	cmp	r3, r7
 8006498:	460e      	mov	r6, r1
 800649a:	d9f4      	bls.n	8006486 <_printf_i+0x11a>
 800649c:	2b08      	cmp	r3, #8
 800649e:	d10b      	bne.n	80064b8 <_printf_i+0x14c>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	07de      	lsls	r6, r3, #31
 80064a4:	d508      	bpl.n	80064b8 <_printf_i+0x14c>
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	6861      	ldr	r1, [r4, #4]
 80064aa:	4299      	cmp	r1, r3
 80064ac:	bfde      	ittt	le
 80064ae:	2330      	movle	r3, #48	; 0x30
 80064b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b8:	1b52      	subs	r2, r2, r5
 80064ba:	6122      	str	r2, [r4, #16]
 80064bc:	f8cd a000 	str.w	sl, [sp]
 80064c0:	464b      	mov	r3, r9
 80064c2:	aa03      	add	r2, sp, #12
 80064c4:	4621      	mov	r1, r4
 80064c6:	4640      	mov	r0, r8
 80064c8:	f7ff fee2 	bl	8006290 <_printf_common>
 80064cc:	3001      	adds	r0, #1
 80064ce:	d14c      	bne.n	800656a <_printf_i+0x1fe>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	b004      	add	sp, #16
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064da:	4835      	ldr	r0, [pc, #212]	; (80065b0 <_printf_i+0x244>)
 80064dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064e0:	6829      	ldr	r1, [r5, #0]
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064e8:	6029      	str	r1, [r5, #0]
 80064ea:	061d      	lsls	r5, r3, #24
 80064ec:	d514      	bpl.n	8006518 <_printf_i+0x1ac>
 80064ee:	07df      	lsls	r7, r3, #31
 80064f0:	bf44      	itt	mi
 80064f2:	f043 0320 	orrmi.w	r3, r3, #32
 80064f6:	6023      	strmi	r3, [r4, #0]
 80064f8:	b91e      	cbnz	r6, 8006502 <_printf_i+0x196>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	f023 0320 	bic.w	r3, r3, #32
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	2310      	movs	r3, #16
 8006504:	e7b0      	b.n	8006468 <_printf_i+0xfc>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	f043 0320 	orr.w	r3, r3, #32
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	2378      	movs	r3, #120	; 0x78
 8006510:	4828      	ldr	r0, [pc, #160]	; (80065b4 <_printf_i+0x248>)
 8006512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006516:	e7e3      	b.n	80064e0 <_printf_i+0x174>
 8006518:	0659      	lsls	r1, r3, #25
 800651a:	bf48      	it	mi
 800651c:	b2b6      	uxthmi	r6, r6
 800651e:	e7e6      	b.n	80064ee <_printf_i+0x182>
 8006520:	4615      	mov	r5, r2
 8006522:	e7bb      	b.n	800649c <_printf_i+0x130>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	6826      	ldr	r6, [r4, #0]
 8006528:	6961      	ldr	r1, [r4, #20]
 800652a:	1d18      	adds	r0, r3, #4
 800652c:	6028      	str	r0, [r5, #0]
 800652e:	0635      	lsls	r5, r6, #24
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	d501      	bpl.n	8006538 <_printf_i+0x1cc>
 8006534:	6019      	str	r1, [r3, #0]
 8006536:	e002      	b.n	800653e <_printf_i+0x1d2>
 8006538:	0670      	lsls	r0, r6, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0x1c8>
 800653c:	8019      	strh	r1, [r3, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	6123      	str	r3, [r4, #16]
 8006542:	4615      	mov	r5, r2
 8006544:	e7ba      	b.n	80064bc <_printf_i+0x150>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	1d1a      	adds	r2, r3, #4
 800654a:	602a      	str	r2, [r5, #0]
 800654c:	681d      	ldr	r5, [r3, #0]
 800654e:	6862      	ldr	r2, [r4, #4]
 8006550:	2100      	movs	r1, #0
 8006552:	4628      	mov	r0, r5
 8006554:	f7f9 fe44 	bl	80001e0 <memchr>
 8006558:	b108      	cbz	r0, 800655e <_printf_i+0x1f2>
 800655a:	1b40      	subs	r0, r0, r5
 800655c:	6060      	str	r0, [r4, #4]
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	2300      	movs	r3, #0
 8006564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006568:	e7a8      	b.n	80064bc <_printf_i+0x150>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	462a      	mov	r2, r5
 800656e:	4649      	mov	r1, r9
 8006570:	4640      	mov	r0, r8
 8006572:	47d0      	blx	sl
 8006574:	3001      	adds	r0, #1
 8006576:	d0ab      	beq.n	80064d0 <_printf_i+0x164>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	079b      	lsls	r3, r3, #30
 800657c:	d413      	bmi.n	80065a6 <_printf_i+0x23a>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	4298      	cmp	r0, r3
 8006584:	bfb8      	it	lt
 8006586:	4618      	movlt	r0, r3
 8006588:	e7a4      	b.n	80064d4 <_printf_i+0x168>
 800658a:	2301      	movs	r3, #1
 800658c:	4632      	mov	r2, r6
 800658e:	4649      	mov	r1, r9
 8006590:	4640      	mov	r0, r8
 8006592:	47d0      	blx	sl
 8006594:	3001      	adds	r0, #1
 8006596:	d09b      	beq.n	80064d0 <_printf_i+0x164>
 8006598:	3501      	adds	r5, #1
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	9903      	ldr	r1, [sp, #12]
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	42ab      	cmp	r3, r5
 80065a2:	dcf2      	bgt.n	800658a <_printf_i+0x21e>
 80065a4:	e7eb      	b.n	800657e <_printf_i+0x212>
 80065a6:	2500      	movs	r5, #0
 80065a8:	f104 0619 	add.w	r6, r4, #25
 80065ac:	e7f5      	b.n	800659a <_printf_i+0x22e>
 80065ae:	bf00      	nop
 80065b0:	08007515 	.word	0x08007515
 80065b4:	08007526 	.word	0x08007526

080065b8 <__swbuf_r>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	460e      	mov	r6, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	4605      	mov	r5, r0
 80065c0:	b118      	cbz	r0, 80065ca <__swbuf_r+0x12>
 80065c2:	6983      	ldr	r3, [r0, #24]
 80065c4:	b90b      	cbnz	r3, 80065ca <__swbuf_r+0x12>
 80065c6:	f000 f9d9 	bl	800697c <__sinit>
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <__swbuf_r+0x98>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d12b      	bne.n	8006628 <__swbuf_r+0x70>
 80065d0:	686c      	ldr	r4, [r5, #4]
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	071a      	lsls	r2, r3, #28
 80065da:	d52f      	bpl.n	800663c <__swbuf_r+0x84>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	b36b      	cbz	r3, 800663c <__swbuf_r+0x84>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	1ac0      	subs	r0, r0, r3
 80065e6:	6963      	ldr	r3, [r4, #20]
 80065e8:	b2f6      	uxtb	r6, r6
 80065ea:	4283      	cmp	r3, r0
 80065ec:	4637      	mov	r7, r6
 80065ee:	dc04      	bgt.n	80065fa <__swbuf_r+0x42>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f92e 	bl	8006854 <_fflush_r>
 80065f8:	bb30      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60a3      	str	r3, [r4, #8]
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	6022      	str	r2, [r4, #0]
 8006606:	701e      	strb	r6, [r3, #0]
 8006608:	6963      	ldr	r3, [r4, #20]
 800660a:	3001      	adds	r0, #1
 800660c:	4283      	cmp	r3, r0
 800660e:	d004      	beq.n	800661a <__swbuf_r+0x62>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	07db      	lsls	r3, r3, #31
 8006614:	d506      	bpl.n	8006624 <__swbuf_r+0x6c>
 8006616:	2e0a      	cmp	r6, #10
 8006618:	d104      	bne.n	8006624 <__swbuf_r+0x6c>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f919 	bl	8006854 <_fflush_r>
 8006622:	b988      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 8006624:	4638      	mov	r0, r7
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <__swbuf_r+0x9c>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <__swbuf_r+0x7a>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7cf      	b.n	80065d2 <__swbuf_r+0x1a>
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <__swbuf_r+0xa0>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7ca      	b.n	80065d2 <__swbuf_r+0x1a>
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f80c 	bl	800665c <__swsetup_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0cb      	beq.n	80065e0 <__swbuf_r+0x28>
 8006648:	f04f 37ff 	mov.w	r7, #4294967295
 800664c:	e7ea      	b.n	8006624 <__swbuf_r+0x6c>
 800664e:	bf00      	nop
 8006650:	08007558 	.word	0x08007558
 8006654:	08007578 	.word	0x08007578
 8006658:	08007538 	.word	0x08007538

0800665c <__swsetup_r>:
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <__swsetup_r+0xcc>)
 800665e:	b570      	push	{r4, r5, r6, lr}
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	b125      	cbz	r5, 8006672 <__swsetup_r+0x16>
 8006668:	69ab      	ldr	r3, [r5, #24]
 800666a:	b913      	cbnz	r3, 8006672 <__swsetup_r+0x16>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f985 	bl	800697c <__sinit>
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <__swsetup_r+0xd0>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d10f      	bne.n	8006698 <__swsetup_r+0x3c>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006680:	0719      	lsls	r1, r3, #28
 8006682:	d42c      	bmi.n	80066de <__swsetup_r+0x82>
 8006684:	06dd      	lsls	r5, r3, #27
 8006686:	d411      	bmi.n	80066ac <__swsetup_r+0x50>
 8006688:	2309      	movs	r3, #9
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	f04f 30ff 	mov.w	r0, #4294967295
 8006696:	e03e      	b.n	8006716 <__swsetup_r+0xba>
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <__swsetup_r+0xd4>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <__swsetup_r+0x46>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7eb      	b.n	800667a <__swsetup_r+0x1e>
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <__swsetup_r+0xd8>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7e6      	b.n	800667a <__swsetup_r+0x1e>
 80066ac:	0758      	lsls	r0, r3, #29
 80066ae:	d512      	bpl.n	80066d6 <__swsetup_r+0x7a>
 80066b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b2:	b141      	cbz	r1, 80066c6 <__swsetup_r+0x6a>
 80066b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <__swsetup_r+0x66>
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 fa63 	bl	8006b88 <_free_r>
 80066c2:	2300      	movs	r3, #0
 80066c4:	6363      	str	r3, [r4, #52]	; 0x34
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	2300      	movs	r3, #0
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0308 	orr.w	r3, r3, #8
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b94b      	cbnz	r3, 80066f6 <__swsetup_r+0x9a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d003      	beq.n	80066f6 <__swsetup_r+0x9a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 fa09 	bl	8006b08 <__smakebuf_r>
 80066f6:	89a0      	ldrh	r0, [r4, #12]
 80066f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066fc:	f010 0301 	ands.w	r3, r0, #1
 8006700:	d00a      	beq.n	8006718 <__swsetup_r+0xbc>
 8006702:	2300      	movs	r3, #0
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	425b      	negs	r3, r3
 800670a:	61a3      	str	r3, [r4, #24]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b943      	cbnz	r3, 8006722 <__swsetup_r+0xc6>
 8006710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006714:	d1ba      	bne.n	800668c <__swsetup_r+0x30>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	0781      	lsls	r1, r0, #30
 800671a:	bf58      	it	pl
 800671c:	6963      	ldrpl	r3, [r4, #20]
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	e7f4      	b.n	800670c <__swsetup_r+0xb0>
 8006722:	2000      	movs	r0, #0
 8006724:	e7f7      	b.n	8006716 <__swsetup_r+0xba>
 8006726:	bf00      	nop
 8006728:	2000003c 	.word	0x2000003c
 800672c:	08007558 	.word	0x08007558
 8006730:	08007578 	.word	0x08007578
 8006734:	08007538 	.word	0x08007538

08006738 <abort>:
 8006738:	b508      	push	{r3, lr}
 800673a:	2006      	movs	r0, #6
 800673c:	f000 fb3c 	bl	8006db8 <raise>
 8006740:	2001      	movs	r0, #1
 8006742:	f7fb ffe9 	bl	8002718 <_exit>
	...

08006748 <__sflush_r>:
 8006748:	898a      	ldrh	r2, [r1, #12]
 800674a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	0710      	lsls	r0, r2, #28
 8006752:	460c      	mov	r4, r1
 8006754:	d458      	bmi.n	8006808 <__sflush_r+0xc0>
 8006756:	684b      	ldr	r3, [r1, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc05      	bgt.n	8006768 <__sflush_r+0x20>
 800675c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	dc02      	bgt.n	8006768 <__sflush_r+0x20>
 8006762:	2000      	movs	r0, #0
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676a:	2e00      	cmp	r6, #0
 800676c:	d0f9      	beq.n	8006762 <__sflush_r+0x1a>
 800676e:	2300      	movs	r3, #0
 8006770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006774:	682f      	ldr	r7, [r5, #0]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	d032      	beq.n	80067e0 <__sflush_r+0x98>
 800677a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	075a      	lsls	r2, r3, #29
 8006780:	d505      	bpl.n	800678e <__sflush_r+0x46>
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006788:	b10b      	cbz	r3, 800678e <__sflush_r+0x46>
 800678a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800678c:	1ac0      	subs	r0, r0, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4602      	mov	r2, r0
 8006792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006794:	6a21      	ldr	r1, [r4, #32]
 8006796:	4628      	mov	r0, r5
 8006798:	47b0      	blx	r6
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	d106      	bne.n	80067ae <__sflush_r+0x66>
 80067a0:	6829      	ldr	r1, [r5, #0]
 80067a2:	291d      	cmp	r1, #29
 80067a4:	d82c      	bhi.n	8006800 <__sflush_r+0xb8>
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <__sflush_r+0x108>)
 80067a8:	40ca      	lsrs	r2, r1
 80067aa:	07d6      	lsls	r6, r2, #31
 80067ac:	d528      	bpl.n	8006800 <__sflush_r+0xb8>
 80067ae:	2200      	movs	r2, #0
 80067b0:	6062      	str	r2, [r4, #4]
 80067b2:	04d9      	lsls	r1, r3, #19
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	d504      	bpl.n	80067c4 <__sflush_r+0x7c>
 80067ba:	1c42      	adds	r2, r0, #1
 80067bc:	d101      	bne.n	80067c2 <__sflush_r+0x7a>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b903      	cbnz	r3, 80067c4 <__sflush_r+0x7c>
 80067c2:	6560      	str	r0, [r4, #84]	; 0x54
 80067c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	2900      	cmp	r1, #0
 80067ca:	d0ca      	beq.n	8006762 <__sflush_r+0x1a>
 80067cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d0:	4299      	cmp	r1, r3
 80067d2:	d002      	beq.n	80067da <__sflush_r+0x92>
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 f9d7 	bl	8006b88 <_free_r>
 80067da:	2000      	movs	r0, #0
 80067dc:	6360      	str	r0, [r4, #52]	; 0x34
 80067de:	e7c1      	b.n	8006764 <__sflush_r+0x1c>
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	2301      	movs	r3, #1
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b0      	blx	r6
 80067e8:	1c41      	adds	r1, r0, #1
 80067ea:	d1c7      	bne.n	800677c <__sflush_r+0x34>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0c4      	beq.n	800677c <__sflush_r+0x34>
 80067f2:	2b1d      	cmp	r3, #29
 80067f4:	d001      	beq.n	80067fa <__sflush_r+0xb2>
 80067f6:	2b16      	cmp	r3, #22
 80067f8:	d101      	bne.n	80067fe <__sflush_r+0xb6>
 80067fa:	602f      	str	r7, [r5, #0]
 80067fc:	e7b1      	b.n	8006762 <__sflush_r+0x1a>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	e7ad      	b.n	8006764 <__sflush_r+0x1c>
 8006808:	690f      	ldr	r7, [r1, #16]
 800680a:	2f00      	cmp	r7, #0
 800680c:	d0a9      	beq.n	8006762 <__sflush_r+0x1a>
 800680e:	0793      	lsls	r3, r2, #30
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	bf08      	it	eq
 8006814:	694b      	ldreq	r3, [r1, #20]
 8006816:	600f      	str	r7, [r1, #0]
 8006818:	bf18      	it	ne
 800681a:	2300      	movne	r3, #0
 800681c:	eba6 0807 	sub.w	r8, r6, r7
 8006820:	608b      	str	r3, [r1, #8]
 8006822:	f1b8 0f00 	cmp.w	r8, #0
 8006826:	dd9c      	ble.n	8006762 <__sflush_r+0x1a>
 8006828:	6a21      	ldr	r1, [r4, #32]
 800682a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800682c:	4643      	mov	r3, r8
 800682e:	463a      	mov	r2, r7
 8006830:	4628      	mov	r0, r5
 8006832:	47b0      	blx	r6
 8006834:	2800      	cmp	r0, #0
 8006836:	dc06      	bgt.n	8006846 <__sflush_r+0xfe>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	e78e      	b.n	8006764 <__sflush_r+0x1c>
 8006846:	4407      	add	r7, r0
 8006848:	eba8 0800 	sub.w	r8, r8, r0
 800684c:	e7e9      	b.n	8006822 <__sflush_r+0xda>
 800684e:	bf00      	nop
 8006850:	20400001 	.word	0x20400001

08006854 <_fflush_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b913      	cbnz	r3, 8006864 <_fflush_r+0x10>
 800685e:	2500      	movs	r5, #0
 8006860:	4628      	mov	r0, r5
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	b118      	cbz	r0, 800686e <_fflush_r+0x1a>
 8006866:	6983      	ldr	r3, [r0, #24]
 8006868:	b90b      	cbnz	r3, 800686e <_fflush_r+0x1a>
 800686a:	f000 f887 	bl	800697c <__sinit>
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <_fflush_r+0x6c>)
 8006870:	429c      	cmp	r4, r3
 8006872:	d11b      	bne.n	80068ac <_fflush_r+0x58>
 8006874:	686c      	ldr	r4, [r5, #4]
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ef      	beq.n	800685e <_fflush_r+0xa>
 800687e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d404      	bmi.n	800688e <_fflush_r+0x3a>
 8006884:	0599      	lsls	r1, r3, #22
 8006886:	d402      	bmi.n	800688e <_fflush_r+0x3a>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f000 f915 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7ff ff59 	bl	8006748 <__sflush_r>
 8006896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006898:	07da      	lsls	r2, r3, #31
 800689a:	4605      	mov	r5, r0
 800689c:	d4e0      	bmi.n	8006860 <_fflush_r+0xc>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	d4dd      	bmi.n	8006860 <_fflush_r+0xc>
 80068a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a6:	f000 f908 	bl	8006aba <__retarget_lock_release_recursive>
 80068aa:	e7d9      	b.n	8006860 <_fflush_r+0xc>
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_fflush_r+0x70>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <_fflush_r+0x62>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7df      	b.n	8006876 <_fflush_r+0x22>
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_fflush_r+0x74>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7da      	b.n	8006876 <_fflush_r+0x22>
 80068c0:	08007558 	.word	0x08007558
 80068c4:	08007578 	.word	0x08007578
 80068c8:	08007538 	.word	0x08007538

080068cc <std>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	e9c0 3300 	strd	r3, r3, [r0]
 80068d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068da:	6083      	str	r3, [r0, #8]
 80068dc:	8181      	strh	r1, [r0, #12]
 80068de:	6643      	str	r3, [r0, #100]	; 0x64
 80068e0:	81c2      	strh	r2, [r0, #14]
 80068e2:	6183      	str	r3, [r0, #24]
 80068e4:	4619      	mov	r1, r3
 80068e6:	2208      	movs	r2, #8
 80068e8:	305c      	adds	r0, #92	; 0x5c
 80068ea:	f7ff fb6f 	bl	8005fcc <memset>
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x38>)
 80068f0:	6263      	str	r3, [r4, #36]	; 0x24
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <std+0x3c>)
 80068f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <std+0x40>)
 80068f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <std+0x44>)
 80068fc:	6224      	str	r4, [r4, #32]
 80068fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08006df1 	.word	0x08006df1
 8006908:	08006e13 	.word	0x08006e13
 800690c:	08006e4b 	.word	0x08006e4b
 8006910:	08006e6f 	.word	0x08006e6f

08006914 <_cleanup_r>:
 8006914:	4901      	ldr	r1, [pc, #4]	; (800691c <_cleanup_r+0x8>)
 8006916:	f000 b8af 	b.w	8006a78 <_fwalk_reent>
 800691a:	bf00      	nop
 800691c:	08006855 	.word	0x08006855

08006920 <__sfmoreglue>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	2268      	movs	r2, #104	; 0x68
 8006924:	1e4d      	subs	r5, r1, #1
 8006926:	4355      	muls	r5, r2
 8006928:	460e      	mov	r6, r1
 800692a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800692e:	f000 f997 	bl	8006c60 <_malloc_r>
 8006932:	4604      	mov	r4, r0
 8006934:	b140      	cbz	r0, 8006948 <__sfmoreglue+0x28>
 8006936:	2100      	movs	r1, #0
 8006938:	e9c0 1600 	strd	r1, r6, [r0]
 800693c:	300c      	adds	r0, #12
 800693e:	60a0      	str	r0, [r4, #8]
 8006940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006944:	f7ff fb42 	bl	8005fcc <memset>
 8006948:	4620      	mov	r0, r4
 800694a:	bd70      	pop	{r4, r5, r6, pc}

0800694c <__sfp_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sfp_lock_acquire+0x8>)
 800694e:	f000 b8b3 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	200004c5 	.word	0x200004c5

08006958 <__sfp_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sfp_lock_release+0x8>)
 800695a:	f000 b8ae 	b.w	8006aba <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	200004c5 	.word	0x200004c5

08006964 <__sinit_lock_acquire>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__sinit_lock_acquire+0x8>)
 8006966:	f000 b8a7 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	200004c6 	.word	0x200004c6

08006970 <__sinit_lock_release>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__sinit_lock_release+0x8>)
 8006972:	f000 b8a2 	b.w	8006aba <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	200004c6 	.word	0x200004c6

0800697c <__sinit>:
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	f7ff fff0 	bl	8006964 <__sinit_lock_acquire>
 8006984:	69a3      	ldr	r3, [r4, #24]
 8006986:	b11b      	cbz	r3, 8006990 <__sinit+0x14>
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f7ff bff0 	b.w	8006970 <__sinit_lock_release>
 8006990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006994:	6523      	str	r3, [r4, #80]	; 0x50
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <__sinit+0x68>)
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <__sinit+0x6c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62a2      	str	r2, [r4, #40]	; 0x28
 800699e:	42a3      	cmp	r3, r4
 80069a0:	bf04      	itt	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	61a3      	streq	r3, [r4, #24]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f820 	bl	80069ec <__sfp>
 80069ac:	6060      	str	r0, [r4, #4]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f81c 	bl	80069ec <__sfp>
 80069b4:	60a0      	str	r0, [r4, #8]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f818 	bl	80069ec <__sfp>
 80069bc:	2200      	movs	r2, #0
 80069be:	60e0      	str	r0, [r4, #12]
 80069c0:	2104      	movs	r1, #4
 80069c2:	6860      	ldr	r0, [r4, #4]
 80069c4:	f7ff ff82 	bl	80068cc <std>
 80069c8:	68a0      	ldr	r0, [r4, #8]
 80069ca:	2201      	movs	r2, #1
 80069cc:	2109      	movs	r1, #9
 80069ce:	f7ff ff7d 	bl	80068cc <std>
 80069d2:	68e0      	ldr	r0, [r4, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	2112      	movs	r1, #18
 80069d8:	f7ff ff78 	bl	80068cc <std>
 80069dc:	2301      	movs	r3, #1
 80069de:	61a3      	str	r3, [r4, #24]
 80069e0:	e7d2      	b.n	8006988 <__sinit+0xc>
 80069e2:	bf00      	nop
 80069e4:	08007500 	.word	0x08007500
 80069e8:	08006915 	.word	0x08006915

080069ec <__sfp>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	4607      	mov	r7, r0
 80069f0:	f7ff ffac 	bl	800694c <__sfp_lock_acquire>
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <__sfp+0x84>)
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	69b3      	ldr	r3, [r6, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__sfp+0x16>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffbd 	bl	800697c <__sinit>
 8006a02:	3648      	adds	r6, #72	; 0x48
 8006a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	d503      	bpl.n	8006a14 <__sfp+0x28>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	b30b      	cbz	r3, 8006a54 <__sfp+0x68>
 8006a10:	6836      	ldr	r6, [r6, #0]
 8006a12:	e7f7      	b.n	8006a04 <__sfp+0x18>
 8006a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a18:	b9d5      	cbnz	r5, 8006a50 <__sfp+0x64>
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <__sfp+0x88>)
 8006a1c:	60e3      	str	r3, [r4, #12]
 8006a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a22:	6665      	str	r5, [r4, #100]	; 0x64
 8006a24:	f000 f847 	bl	8006ab6 <__retarget_lock_init_recursive>
 8006a28:	f7ff ff96 	bl	8006958 <__sfp_lock_release>
 8006a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a34:	6025      	str	r5, [r4, #0]
 8006a36:	61a5      	str	r5, [r4, #24]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a40:	f7ff fac4 	bl	8005fcc <memset>
 8006a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	3468      	adds	r4, #104	; 0x68
 8006a52:	e7d9      	b.n	8006a08 <__sfp+0x1c>
 8006a54:	2104      	movs	r1, #4
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ff62 	bl	8006920 <__sfmoreglue>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1d5      	bne.n	8006a10 <__sfp+0x24>
 8006a64:	f7ff ff78 	bl	8006958 <__sfp_lock_release>
 8006a68:	230c      	movs	r3, #12
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	e7ee      	b.n	8006a4c <__sfp+0x60>
 8006a6e:	bf00      	nop
 8006a70:	08007500 	.word	0x08007500
 8006a74:	ffff0001 	.word	0xffff0001

08006a78 <_fwalk_reent>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	4688      	mov	r8, r1
 8006a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a84:	2700      	movs	r7, #0
 8006a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a8e:	d505      	bpl.n	8006a9c <_fwalk_reent+0x24>
 8006a90:	6824      	ldr	r4, [r4, #0]
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d1f7      	bne.n	8006a86 <_fwalk_reent+0xe>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	89ab      	ldrh	r3, [r5, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d907      	bls.n	8006ab2 <_fwalk_reent+0x3a>
 8006aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d003      	beq.n	8006ab2 <_fwalk_reent+0x3a>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4630      	mov	r0, r6
 8006aae:	47c0      	blx	r8
 8006ab0:	4307      	orrs	r7, r0
 8006ab2:	3568      	adds	r5, #104	; 0x68
 8006ab4:	e7e9      	b.n	8006a8a <_fwalk_reent+0x12>

08006ab6 <__retarget_lock_init_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__swhatbuf_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	460e      	mov	r6, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	b096      	sub	sp, #88	; 0x58
 8006ac8:	4614      	mov	r4, r2
 8006aca:	461d      	mov	r5, r3
 8006acc:	da08      	bge.n	8006ae0 <__swhatbuf_r+0x24>
 8006ace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	061a      	lsls	r2, r3, #24
 8006ad8:	d410      	bmi.n	8006afc <__swhatbuf_r+0x40>
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	e00e      	b.n	8006afe <__swhatbuf_r+0x42>
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	f000 f9eb 	bl	8006ebc <_fstat_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dbf1      	blt.n	8006ace <__swhatbuf_r+0x12>
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006af4:	425a      	negs	r2, r3
 8006af6:	415a      	adcs	r2, r3
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	e7ee      	b.n	8006ada <__swhatbuf_r+0x1e>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	2000      	movs	r0, #0
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	b016      	add	sp, #88	; 0x58
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b08 <__smakebuf_r>:
 8006b08:	898b      	ldrh	r3, [r1, #12]
 8006b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b0c:	079d      	lsls	r5, r3, #30
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	d507      	bpl.n	8006b24 <__smakebuf_r+0x1c>
 8006b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6163      	str	r3, [r4, #20]
 8006b20:	b002      	add	sp, #8
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	ab01      	add	r3, sp, #4
 8006b26:	466a      	mov	r2, sp
 8006b28:	f7ff ffc8 	bl	8006abc <__swhatbuf_r>
 8006b2c:	9900      	ldr	r1, [sp, #0]
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f895 	bl	8006c60 <_malloc_r>
 8006b36:	b948      	cbnz	r0, 8006b4c <__smakebuf_r+0x44>
 8006b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3c:	059a      	lsls	r2, r3, #22
 8006b3e:	d4ef      	bmi.n	8006b20 <__smakebuf_r+0x18>
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7e3      	b.n	8006b14 <__smakebuf_r+0xc>
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <__smakebuf_r+0x7c>)
 8006b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	6020      	str	r0, [r4, #0]
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	6163      	str	r3, [r4, #20]
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	6120      	str	r0, [r4, #16]
 8006b62:	b15b      	cbz	r3, 8006b7c <__smakebuf_r+0x74>
 8006b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 f9b9 	bl	8006ee0 <_isatty_r>
 8006b6e:	b128      	cbz	r0, 8006b7c <__smakebuf_r+0x74>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	89a0      	ldrh	r0, [r4, #12]
 8006b7e:	4305      	orrs	r5, r0
 8006b80:	81a5      	strh	r5, [r4, #12]
 8006b82:	e7cd      	b.n	8006b20 <__smakebuf_r+0x18>
 8006b84:	08006915 	.word	0x08006915

08006b88 <_free_r>:
 8006b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b8a:	2900      	cmp	r1, #0
 8006b8c:	d044      	beq.n	8006c18 <_free_r+0x90>
 8006b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b92:	9001      	str	r0, [sp, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f1a1 0404 	sub.w	r4, r1, #4
 8006b9a:	bfb8      	it	lt
 8006b9c:	18e4      	addlt	r4, r4, r3
 8006b9e:	f000 f9c1 	bl	8006f24 <__malloc_lock>
 8006ba2:	4a1e      	ldr	r2, [pc, #120]	; (8006c1c <_free_r+0x94>)
 8006ba4:	9801      	ldr	r0, [sp, #4]
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	b933      	cbnz	r3, 8006bb8 <_free_r+0x30>
 8006baa:	6063      	str	r3, [r4, #4]
 8006bac:	6014      	str	r4, [r2, #0]
 8006bae:	b003      	add	sp, #12
 8006bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb4:	f000 b9bc 	b.w	8006f30 <__malloc_unlock>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d908      	bls.n	8006bce <_free_r+0x46>
 8006bbc:	6825      	ldr	r5, [r4, #0]
 8006bbe:	1961      	adds	r1, r4, r5
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf01      	itttt	eq
 8006bc4:	6819      	ldreq	r1, [r3, #0]
 8006bc6:	685b      	ldreq	r3, [r3, #4]
 8006bc8:	1949      	addeq	r1, r1, r5
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	e7ed      	b.n	8006baa <_free_r+0x22>
 8006bce:	461a      	mov	r2, r3
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	b10b      	cbz	r3, 8006bd8 <_free_r+0x50>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d9fa      	bls.n	8006bce <_free_r+0x46>
 8006bd8:	6811      	ldr	r1, [r2, #0]
 8006bda:	1855      	adds	r5, r2, r1
 8006bdc:	42a5      	cmp	r5, r4
 8006bde:	d10b      	bne.n	8006bf8 <_free_r+0x70>
 8006be0:	6824      	ldr	r4, [r4, #0]
 8006be2:	4421      	add	r1, r4
 8006be4:	1854      	adds	r4, r2, r1
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	d1e0      	bne.n	8006bae <_free_r+0x26>
 8006bec:	681c      	ldr	r4, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	6053      	str	r3, [r2, #4]
 8006bf2:	4421      	add	r1, r4
 8006bf4:	6011      	str	r1, [r2, #0]
 8006bf6:	e7da      	b.n	8006bae <_free_r+0x26>
 8006bf8:	d902      	bls.n	8006c00 <_free_r+0x78>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	6003      	str	r3, [r0, #0]
 8006bfe:	e7d6      	b.n	8006bae <_free_r+0x26>
 8006c00:	6825      	ldr	r5, [r4, #0]
 8006c02:	1961      	adds	r1, r4, r5
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf04      	itt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	bf04      	itt	eq
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	6054      	str	r4, [r2, #4]
 8006c16:	e7ca      	b.n	8006bae <_free_r+0x26>
 8006c18:	b003      	add	sp, #12
 8006c1a:	bd30      	pop	{r4, r5, pc}
 8006c1c:	200004c8 	.word	0x200004c8

08006c20 <sbrk_aligned>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4e0e      	ldr	r6, [pc, #56]	; (8006c5c <sbrk_aligned+0x3c>)
 8006c24:	460c      	mov	r4, r1
 8006c26:	6831      	ldr	r1, [r6, #0]
 8006c28:	4605      	mov	r5, r0
 8006c2a:	b911      	cbnz	r1, 8006c32 <sbrk_aligned+0x12>
 8006c2c:	f000 f88c 	bl	8006d48 <_sbrk_r>
 8006c30:	6030      	str	r0, [r6, #0]
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f887 	bl	8006d48 <_sbrk_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d00a      	beq.n	8006c54 <sbrk_aligned+0x34>
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d007      	beq.n	8006c58 <sbrk_aligned+0x38>
 8006c48:	1a21      	subs	r1, r4, r0
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f87c 	bl	8006d48 <_sbrk_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d101      	bne.n	8006c58 <sbrk_aligned+0x38>
 8006c54:	f04f 34ff 	mov.w	r4, #4294967295
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	200004cc 	.word	0x200004cc

08006c60 <_malloc_r>:
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	1ccd      	adds	r5, r1, #3
 8006c66:	f025 0503 	bic.w	r5, r5, #3
 8006c6a:	3508      	adds	r5, #8
 8006c6c:	2d0c      	cmp	r5, #12
 8006c6e:	bf38      	it	cc
 8006c70:	250c      	movcc	r5, #12
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	4607      	mov	r7, r0
 8006c76:	db01      	blt.n	8006c7c <_malloc_r+0x1c>
 8006c78:	42a9      	cmp	r1, r5
 8006c7a:	d905      	bls.n	8006c88 <_malloc_r+0x28>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	2600      	movs	r6, #0
 8006c82:	4630      	mov	r0, r6
 8006c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c88:	4e2e      	ldr	r6, [pc, #184]	; (8006d44 <_malloc_r+0xe4>)
 8006c8a:	f000 f94b 	bl	8006f24 <__malloc_lock>
 8006c8e:	6833      	ldr	r3, [r6, #0]
 8006c90:	461c      	mov	r4, r3
 8006c92:	bb34      	cbnz	r4, 8006ce2 <_malloc_r+0x82>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	f7ff ffc2 	bl	8006c20 <sbrk_aligned>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	d14d      	bne.n	8006d3e <_malloc_r+0xde>
 8006ca2:	6834      	ldr	r4, [r6, #0]
 8006ca4:	4626      	mov	r6, r4
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d140      	bne.n	8006d2c <_malloc_r+0xcc>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	4631      	mov	r1, r6
 8006cae:	4638      	mov	r0, r7
 8006cb0:	eb04 0803 	add.w	r8, r4, r3
 8006cb4:	f000 f848 	bl	8006d48 <_sbrk_r>
 8006cb8:	4580      	cmp	r8, r0
 8006cba:	d13a      	bne.n	8006d32 <_malloc_r+0xd2>
 8006cbc:	6821      	ldr	r1, [r4, #0]
 8006cbe:	3503      	adds	r5, #3
 8006cc0:	1a6d      	subs	r5, r5, r1
 8006cc2:	f025 0503 	bic.w	r5, r5, #3
 8006cc6:	3508      	adds	r5, #8
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	bf38      	it	cc
 8006ccc:	250c      	movcc	r5, #12
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ffa5 	bl	8006c20 <sbrk_aligned>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d02b      	beq.n	8006d32 <_malloc_r+0xd2>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	442b      	add	r3, r5
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	e00e      	b.n	8006d00 <_malloc_r+0xa0>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	1b52      	subs	r2, r2, r5
 8006ce6:	d41e      	bmi.n	8006d26 <_malloc_r+0xc6>
 8006ce8:	2a0b      	cmp	r2, #11
 8006cea:	d916      	bls.n	8006d1a <_malloc_r+0xba>
 8006cec:	1961      	adds	r1, r4, r5
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	bf18      	it	ne
 8006cf4:	6059      	strne	r1, [r3, #4]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	bf08      	it	eq
 8006cfa:	6031      	streq	r1, [r6, #0]
 8006cfc:	5162      	str	r2, [r4, r5]
 8006cfe:	604b      	str	r3, [r1, #4]
 8006d00:	4638      	mov	r0, r7
 8006d02:	f104 060b 	add.w	r6, r4, #11
 8006d06:	f000 f913 	bl	8006f30 <__malloc_unlock>
 8006d0a:	f026 0607 	bic.w	r6, r6, #7
 8006d0e:	1d23      	adds	r3, r4, #4
 8006d10:	1af2      	subs	r2, r6, r3
 8006d12:	d0b6      	beq.n	8006c82 <_malloc_r+0x22>
 8006d14:	1b9b      	subs	r3, r3, r6
 8006d16:	50a3      	str	r3, [r4, r2]
 8006d18:	e7b3      	b.n	8006c82 <_malloc_r+0x22>
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	bf0c      	ite	eq
 8006d20:	6032      	streq	r2, [r6, #0]
 8006d22:	605a      	strne	r2, [r3, #4]
 8006d24:	e7ec      	b.n	8006d00 <_malloc_r+0xa0>
 8006d26:	4623      	mov	r3, r4
 8006d28:	6864      	ldr	r4, [r4, #4]
 8006d2a:	e7b2      	b.n	8006c92 <_malloc_r+0x32>
 8006d2c:	4634      	mov	r4, r6
 8006d2e:	6876      	ldr	r6, [r6, #4]
 8006d30:	e7b9      	b.n	8006ca6 <_malloc_r+0x46>
 8006d32:	230c      	movs	r3, #12
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4638      	mov	r0, r7
 8006d38:	f000 f8fa 	bl	8006f30 <__malloc_unlock>
 8006d3c:	e7a1      	b.n	8006c82 <_malloc_r+0x22>
 8006d3e:	6025      	str	r5, [r4, #0]
 8006d40:	e7de      	b.n	8006d00 <_malloc_r+0xa0>
 8006d42:	bf00      	nop
 8006d44:	200004c8 	.word	0x200004c8

08006d48 <_sbrk_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	; (8006d64 <_sbrk_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f7fb fd10 	bl	8002778 <_sbrk>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_sbrk_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_sbrk_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	200004d0 	.word	0x200004d0

08006d68 <_raise_r>:
 8006d68:	291f      	cmp	r1, #31
 8006d6a:	b538      	push	{r3, r4, r5, lr}
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	460d      	mov	r5, r1
 8006d70:	d904      	bls.n	8006d7c <_raise_r+0x14>
 8006d72:	2316      	movs	r3, #22
 8006d74:	6003      	str	r3, [r0, #0]
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d7e:	b112      	cbz	r2, 8006d86 <_raise_r+0x1e>
 8006d80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d84:	b94b      	cbnz	r3, 8006d9a <_raise_r+0x32>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f830 	bl	8006dec <_getpid_r>
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4620      	mov	r0, r4
 8006d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d96:	f000 b817 	b.w	8006dc8 <_kill_r>
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d00a      	beq.n	8006db4 <_raise_r+0x4c>
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	d103      	bne.n	8006daa <_raise_r+0x42>
 8006da2:	2316      	movs	r3, #22
 8006da4:	6003      	str	r3, [r0, #0]
 8006da6:	2001      	movs	r0, #1
 8006da8:	e7e7      	b.n	8006d7a <_raise_r+0x12>
 8006daa:	2400      	movs	r4, #0
 8006dac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006db0:	4628      	mov	r0, r5
 8006db2:	4798      	blx	r3
 8006db4:	2000      	movs	r0, #0
 8006db6:	e7e0      	b.n	8006d7a <_raise_r+0x12>

08006db8 <raise>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <raise+0xc>)
 8006dba:	4601      	mov	r1, r0
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f7ff bfd3 	b.w	8006d68 <_raise_r>
 8006dc2:	bf00      	nop
 8006dc4:	2000003c 	.word	0x2000003c

08006dc8 <_kill_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	; (8006de8 <_kill_r+0x20>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	f7fb fc97 	bl	8002708 <_kill>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d102      	bne.n	8006de4 <_kill_r+0x1c>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b103      	cbz	r3, 8006de4 <_kill_r+0x1c>
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	bd38      	pop	{r3, r4, r5, pc}
 8006de6:	bf00      	nop
 8006de8:	200004d0 	.word	0x200004d0

08006dec <_getpid_r>:
 8006dec:	f7fb bc8a 	b.w	8002704 <_getpid>

08006df0 <__sread>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	460c      	mov	r4, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	f000 f8a0 	bl	8006f3c <_read_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	bfab      	itete	ge
 8006e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e02:	89a3      	ldrhlt	r3, [r4, #12]
 8006e04:	181b      	addge	r3, r3, r0
 8006e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0a:	bfac      	ite	ge
 8006e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e0e:	81a3      	strhlt	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__swrite>:
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4616      	mov	r6, r2
 8006e22:	d505      	bpl.n	8006e30 <__swrite+0x1e>
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f868 	bl	8006f00 <_lseek_r>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	f000 b817 	b.w	8006e78 <_write_r>

08006e4a <__sseek>:
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 f855 	bl	8006f00 <_lseek_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	bf15      	itete	ne
 8006e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e66:	81a3      	strheq	r3, [r4, #12]
 8006e68:	bf18      	it	ne
 8006e6a:	81a3      	strhne	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__sclose>:
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 b813 	b.w	8006e9c <_close_r>
	...

08006e78 <_write_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_write_r+0x20>)
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7fb fc5a 	bl	8002740 <_write>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_write_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_write_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	200004d0 	.word	0x200004d0

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fb fc58 	bl	800275c <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200004d0 	.word	0x200004d0

08006ebc <_fstat_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	; (8006edc <_fstat_r+0x20>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f7fb fc4b 	bl	8002764 <_fstat>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d102      	bne.n	8006ed8 <_fstat_r+0x1c>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	b103      	cbz	r3, 8006ed8 <_fstat_r+0x1c>
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	200004d0 	.word	0x200004d0

08006ee0 <_isatty_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d06      	ldr	r5, [pc, #24]	; (8006efc <_isatty_r+0x1c>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7fb fc40 	bl	8002770 <_isatty>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_isatty_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_isatty_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	200004d0 	.word	0x200004d0

08006f00 <_lseek_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_lseek_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7fb fc30 	bl	8002774 <_lseek>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_lseek_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_lseek_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	200004d0 	.word	0x200004d0

08006f24 <__malloc_lock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_lock+0x8>)
 8006f26:	f7ff bdc7 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200004c4 	.word	0x200004c4

08006f30 <__malloc_unlock>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__malloc_unlock+0x8>)
 8006f32:	f7ff bdc2 	b.w	8006aba <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	200004c4 	.word	0x200004c4

08006f3c <_read_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d07      	ldr	r5, [pc, #28]	; (8006f5c <_read_r+0x20>)
 8006f40:	4604      	mov	r4, r0
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fb fbea 	bl	8002724 <_read>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_read_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_read_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200004d0 	.word	0x200004d0

08006f60 <_init>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr

08006f6c <_fini>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr
